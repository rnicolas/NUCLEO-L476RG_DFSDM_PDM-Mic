
NUCLEO-L476RG_DFSDM_PDM-Mic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d6c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013c4c  08008f00  08008f00  00018f00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801cb4c  0801cb4c  000301e0  2**0
                  CONTENTS
  4 .ARM          00000008  0801cb4c  0801cb4c  0002cb4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801cb54  0801cb54  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801cb54  0801cb54  0002cb54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801cb58  0801cb58  0002cb58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0801cb5c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000f1dc  200001e0  0801cd3c  000301e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000f3bc  0801cd3c  0003f3bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c692  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d05  00000000  00000000  0004c8a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e60  00000000  00000000  000505a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d80  00000000  00000000  00051408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028316  00000000  00000000  00052188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000124f7  00000000  00000000  0007a49e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f01ce  00000000  00000000  0008c995  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c8  00000000  00000000  0017cb63  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004900  00000000  00000000  0017cc2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00003d9f  00000000  00000000  0018152c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008ee4 	.word	0x08008ee4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08008ee4 	.word	0x08008ee4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <MX_DFSDM1_Init>:
DFSDM_Channel_HandleTypeDef hdfsdm1_channel0;
DMA_HandleTypeDef hdma_dfsdm1_flt0;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000ea4:	4b2c      	ldr	r3, [pc, #176]	; (8000f58 <MX_DFSDM1_Init+0xb8>)
 8000ea6:	4a2d      	ldr	r2, [pc, #180]	; (8000f5c <MX_DFSDM1_Init+0xbc>)
 8000ea8:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000eaa:	4b2b      	ldr	r3, [pc, #172]	; (8000f58 <MX_DFSDM1_Init+0xb8>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000eb0:	4b29      	ldr	r3, [pc, #164]	; (8000f58 <MX_DFSDM1_Init+0xb8>)
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8000eb6:	4b28      	ldr	r3, [pc, #160]	; (8000f58 <MX_DFSDM1_Init+0xb8>)
 8000eb8:	2201      	movs	r2, #1
 8000eba:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8000ebc:	4b26      	ldr	r3, [pc, #152]	; (8000f58 <MX_DFSDM1_Init+0xb8>)
 8000ebe:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000ec2:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 32;
 8000ec4:	4b24      	ldr	r3, [pc, #144]	; (8000f58 <MX_DFSDM1_Init+0xb8>)
 8000ec6:	2220      	movs	r2, #32
 8000ec8:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8000eca:	4b23      	ldr	r3, [pc, #140]	; (8000f58 <MX_DFSDM1_Init+0xb8>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8000ed0:	4821      	ldr	r0, [pc, #132]	; (8000f58 <MX_DFSDM1_Init+0xb8>)
 8000ed2:	f001 f85b 	bl	8001f8c <HAL_DFSDM_FilterInit>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 8000edc:	f000 fc0e 	bl	80016fc <Error_Handler>
  }
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 8000ee0:	4b1f      	ldr	r3, [pc, #124]	; (8000f60 <MX_DFSDM1_Init+0xc0>)
 8000ee2:	4a20      	ldr	r2, [pc, #128]	; (8000f64 <MX_DFSDM1_Init+0xc4>)
 8000ee4:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = ENABLE;
 8000ee6:	4b1e      	ldr	r3, [pc, #120]	; (8000f60 <MX_DFSDM1_Init+0xc0>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000eec:	4b1c      	ldr	r3, [pc, #112]	; (8000f60 <MX_DFSDM1_Init+0xc0>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 17;
 8000ef2:	4b1b      	ldr	r3, [pc, #108]	; (8000f60 <MX_DFSDM1_Init+0xc0>)
 8000ef4:	2211      	movs	r2, #17
 8000ef6:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000ef8:	4b19      	ldr	r3, [pc, #100]	; (8000f60 <MX_DFSDM1_Init+0xc0>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000efe:	4b18      	ldr	r3, [pc, #96]	; (8000f60 <MX_DFSDM1_Init+0xc0>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000f04:	4b16      	ldr	r3, [pc, #88]	; (8000f60 <MX_DFSDM1_Init+0xc0>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000f0a:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <MX_DFSDM1_Init+0xc0>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000f10:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <MX_DFSDM1_Init+0xc0>)
 8000f12:	2204      	movs	r2, #4
 8000f14:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000f16:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <MX_DFSDM1_Init+0xc0>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 10;
 8000f1c:	4b10      	ldr	r3, [pc, #64]	; (8000f60 <MX_DFSDM1_Init+0xc0>)
 8000f1e:	220a      	movs	r2, #10
 8000f20:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0;
 8000f22:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <MX_DFSDM1_Init+0xc0>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x02;
 8000f28:	4b0d      	ldr	r3, [pc, #52]	; (8000f60 <MX_DFSDM1_Init+0xc0>)
 8000f2a:	2202      	movs	r2, #2
 8000f2c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 8000f2e:	480c      	ldr	r0, [pc, #48]	; (8000f60 <MX_DFSDM1_Init+0xc0>)
 8000f30:	f000 ff6c 	bl	8001e0c <HAL_DFSDM_ChannelInit>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 8000f3a:	f000 fbdf 	bl	80016fc <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_0, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	2101      	movs	r1, #1
 8000f42:	4805      	ldr	r0, [pc, #20]	; (8000f58 <MX_DFSDM1_Init+0xb8>)
 8000f44:	f001 f8fc 	bl	8002140 <HAL_DFSDM_FilterConfigRegChannel>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 8000f4e:	f000 fbd5 	bl	80016fc <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	2000f234 	.word	0x2000f234
 8000f5c:	40016100 	.word	0x40016100
 8000f60:	2000f2d0 	.word	0x2000f2d0
 8000f64:	40016000 	.word	0x40016000

08000f68 <HAL_DFSDM_FilterMspInit>:
static uint32_t HAL_RCC_DFSDM1_CLK_ENABLED=0;

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* dfsdm_filterHandle)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08a      	sub	sp, #40	; 0x28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8000f80:	4b48      	ldr	r3, [pc, #288]	; (80010a4 <HAL_DFSDM_FilterMspInit+0x13c>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d151      	bne.n	800102c <HAL_DFSDM_FilterMspInit+0xc4>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000f88:	4b47      	ldr	r3, [pc, #284]	; (80010a8 <HAL_DFSDM_FilterMspInit+0x140>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	4a46      	ldr	r2, [pc, #280]	; (80010a8 <HAL_DFSDM_FilterMspInit+0x140>)
 8000f90:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000f92:	4b45      	ldr	r3, [pc, #276]	; (80010a8 <HAL_DFSDM_FilterMspInit+0x140>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d10b      	bne.n	8000fb2 <HAL_DFSDM_FilterMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000f9a:	4b44      	ldr	r3, [pc, #272]	; (80010ac <HAL_DFSDM_FilterMspInit+0x144>)
 8000f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f9e:	4a43      	ldr	r2, [pc, #268]	; (80010ac <HAL_DFSDM_FilterMspInit+0x144>)
 8000fa0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fa4:	6613      	str	r3, [r2, #96]	; 0x60
 8000fa6:	4b41      	ldr	r3, [pc, #260]	; (80010ac <HAL_DFSDM_FilterMspInit+0x144>)
 8000fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000faa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb2:	4b3e      	ldr	r3, [pc, #248]	; (80010ac <HAL_DFSDM_FilterMspInit+0x144>)
 8000fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb6:	4a3d      	ldr	r2, [pc, #244]	; (80010ac <HAL_DFSDM_FilterMspInit+0x144>)
 8000fb8:	f043 0304 	orr.w	r3, r3, #4
 8000fbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fbe:	4b3b      	ldr	r3, [pc, #236]	; (80010ac <HAL_DFSDM_FilterMspInit+0x144>)
 8000fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc2:	f003 0304 	and.w	r3, r3, #4
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fca:	4b38      	ldr	r3, [pc, #224]	; (80010ac <HAL_DFSDM_FilterMspInit+0x144>)
 8000fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fce:	4a37      	ldr	r2, [pc, #220]	; (80010ac <HAL_DFSDM_FilterMspInit+0x144>)
 8000fd0:	f043 0302 	orr.w	r3, r3, #2
 8000fd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fd6:	4b35      	ldr	r3, [pc, #212]	; (80010ac <HAL_DFSDM_FilterMspInit+0x144>)
 8000fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fda:	f003 0302 	and.w	r3, r3, #2
 8000fde:	60bb      	str	r3, [r7, #8]
 8000fe0:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PC2     ------> DFSDM1_CKOUT
    PB1     ------> DFSDM1_DATIN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000fe2:	2304      	movs	r3, #4
 8000fe4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000ff2:	2306      	movs	r3, #6
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ff6:	f107 0314 	add.w	r3, r7, #20
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	482c      	ldr	r0, [pc, #176]	; (80010b0 <HAL_DFSDM_FilterMspInit+0x148>)
 8000ffe:	f001 fc39 	bl	8002874 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001002:	2302      	movs	r3, #2
 8001004:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001006:	2302      	movs	r3, #2
 8001008:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100e:	2300      	movs	r3, #0
 8001010:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001012:	2306      	movs	r3, #6
 8001014:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	4619      	mov	r1, r3
 800101c:	4825      	ldr	r0, [pc, #148]	; (80010b4 <HAL_DFSDM_FilterMspInit+0x14c>)
 800101e:	f001 fc29 	bl	8002874 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001022:	4b20      	ldr	r3, [pc, #128]	; (80010a4 <HAL_DFSDM_FilterMspInit+0x13c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	3301      	adds	r3, #1
 8001028:	4a1e      	ldr	r2, [pc, #120]	; (80010a4 <HAL_DFSDM_FilterMspInit+0x13c>)
 800102a:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter0){
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a21      	ldr	r2, [pc, #132]	; (80010b8 <HAL_DFSDM_FilterMspInit+0x150>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d131      	bne.n	800109a <HAL_DFSDM_FilterMspInit+0x132>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 8001036:	4b21      	ldr	r3, [pc, #132]	; (80010bc <HAL_DFSDM_FilterMspInit+0x154>)
 8001038:	4a21      	ldr	r2, [pc, #132]	; (80010c0 <HAL_DFSDM_FilterMspInit+0x158>)
 800103a:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_0;
 800103c:	4b1f      	ldr	r3, [pc, #124]	; (80010bc <HAL_DFSDM_FilterMspInit+0x154>)
 800103e:	2200      	movs	r2, #0
 8001040:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001042:	4b1e      	ldr	r3, [pc, #120]	; (80010bc <HAL_DFSDM_FilterMspInit+0x154>)
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8001048:	4b1c      	ldr	r3, [pc, #112]	; (80010bc <HAL_DFSDM_FilterMspInit+0x154>)
 800104a:	2200      	movs	r2, #0
 800104c:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 800104e:	4b1b      	ldr	r3, [pc, #108]	; (80010bc <HAL_DFSDM_FilterMspInit+0x154>)
 8001050:	2280      	movs	r2, #128	; 0x80
 8001052:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001054:	4b19      	ldr	r3, [pc, #100]	; (80010bc <HAL_DFSDM_FilterMspInit+0x154>)
 8001056:	f44f 7200 	mov.w	r2, #512	; 0x200
 800105a:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800105c:	4b17      	ldr	r3, [pc, #92]	; (80010bc <HAL_DFSDM_FilterMspInit+0x154>)
 800105e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001062:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8001064:	4b15      	ldr	r3, [pc, #84]	; (80010bc <HAL_DFSDM_FilterMspInit+0x154>)
 8001066:	2220      	movs	r2, #32
 8001068:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_MEDIUM;
 800106a:	4b14      	ldr	r3, [pc, #80]	; (80010bc <HAL_DFSDM_FilterMspInit+0x154>)
 800106c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001070:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8001072:	4812      	ldr	r0, [pc, #72]	; (80010bc <HAL_DFSDM_FilterMspInit+0x154>)
 8001074:	f001 fa06 	bl	8002484 <HAL_DMA_Init>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <HAL_DFSDM_FilterMspInit+0x11a>
    {
      Error_Handler();
 800107e:	f000 fb3d 	bl	80016fc <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt0);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a0d      	ldr	r2, [pc, #52]	; (80010bc <HAL_DFSDM_FilterMspInit+0x154>)
 8001086:	62da      	str	r2, [r3, #44]	; 0x2c
 8001088:	4a0c      	ldr	r2, [pc, #48]	; (80010bc <HAL_DFSDM_FilterMspInit+0x154>)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt0);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a0a      	ldr	r2, [pc, #40]	; (80010bc <HAL_DFSDM_FilterMspInit+0x154>)
 8001092:	629a      	str	r2, [r3, #40]	; 0x28
 8001094:	4a09      	ldr	r2, [pc, #36]	; (80010bc <HAL_DFSDM_FilterMspInit+0x154>)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 800109a:	bf00      	nop
 800109c:	3728      	adds	r7, #40	; 0x28
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000200 	.word	0x20000200
 80010a8:	200001fc 	.word	0x200001fc
 80010ac:	40021000 	.word	0x40021000
 80010b0:	48000800 	.word	0x48000800
 80010b4:	48000400 	.word	0x48000400
 80010b8:	40016100 	.word	0x40016100
 80010bc:	2000f288 	.word	0x2000f288
 80010c0:	40020044 	.word	0x40020044

080010c4 <HAL_DFSDM_ChannelMspInit>:

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08a      	sub	sp, #40	; 0x28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 80010dc:	4b2c      	ldr	r3, [pc, #176]	; (8001190 <HAL_DFSDM_ChannelMspInit+0xcc>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d151      	bne.n	8001188 <HAL_DFSDM_ChannelMspInit+0xc4>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80010e4:	4b2b      	ldr	r3, [pc, #172]	; (8001194 <HAL_DFSDM_ChannelMspInit+0xd0>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	3301      	adds	r3, #1
 80010ea:	4a2a      	ldr	r2, [pc, #168]	; (8001194 <HAL_DFSDM_ChannelMspInit+0xd0>)
 80010ec:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80010ee:	4b29      	ldr	r3, [pc, #164]	; (8001194 <HAL_DFSDM_ChannelMspInit+0xd0>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d10b      	bne.n	800110e <HAL_DFSDM_ChannelMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80010f6:	4b28      	ldr	r3, [pc, #160]	; (8001198 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80010f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010fa:	4a27      	ldr	r2, [pc, #156]	; (8001198 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80010fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001100:	6613      	str	r3, [r2, #96]	; 0x60
 8001102:	4b25      	ldr	r3, [pc, #148]	; (8001198 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8001104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001106:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800110a:	613b      	str	r3, [r7, #16]
 800110c:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800110e:	4b22      	ldr	r3, [pc, #136]	; (8001198 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8001110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001112:	4a21      	ldr	r2, [pc, #132]	; (8001198 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8001114:	f043 0304 	orr.w	r3, r3, #4
 8001118:	64d3      	str	r3, [r2, #76]	; 0x4c
 800111a:	4b1f      	ldr	r3, [pc, #124]	; (8001198 <HAL_DFSDM_ChannelMspInit+0xd4>)
 800111c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111e:	f003 0304 	and.w	r3, r3, #4
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001126:	4b1c      	ldr	r3, [pc, #112]	; (8001198 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112a:	4a1b      	ldr	r2, [pc, #108]	; (8001198 <HAL_DFSDM_ChannelMspInit+0xd4>)
 800112c:	f043 0302 	orr.w	r3, r3, #2
 8001130:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001132:	4b19      	ldr	r3, [pc, #100]	; (8001198 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	60bb      	str	r3, [r7, #8]
 800113c:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PC2     ------> DFSDM1_CKOUT
    PB1     ------> DFSDM1_DATIN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800113e:	2304      	movs	r3, #4
 8001140:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001142:	2302      	movs	r3, #2
 8001144:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114a:	2300      	movs	r3, #0
 800114c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800114e:	2306      	movs	r3, #6
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001152:	f107 0314 	add.w	r3, r7, #20
 8001156:	4619      	mov	r1, r3
 8001158:	4810      	ldr	r0, [pc, #64]	; (800119c <HAL_DFSDM_ChannelMspInit+0xd8>)
 800115a:	f001 fb8b 	bl	8002874 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800115e:	2302      	movs	r3, #2
 8001160:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001162:	2302      	movs	r3, #2
 8001164:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116a:	2300      	movs	r3, #0
 800116c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800116e:	2306      	movs	r3, #6
 8001170:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001172:	f107 0314 	add.w	r3, r7, #20
 8001176:	4619      	mov	r1, r3
 8001178:	4809      	ldr	r0, [pc, #36]	; (80011a0 <HAL_DFSDM_ChannelMspInit+0xdc>)
 800117a:	f001 fb7b 	bl	8002874 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800117e:	4b04      	ldr	r3, [pc, #16]	; (8001190 <HAL_DFSDM_ChannelMspInit+0xcc>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	3301      	adds	r3, #1
 8001184:	4a02      	ldr	r2, [pc, #8]	; (8001190 <HAL_DFSDM_ChannelMspInit+0xcc>)
 8001186:	6013      	str	r3, [r2, #0]
  }
}
 8001188:	bf00      	nop
 800118a:	3728      	adds	r7, #40	; 0x28
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000200 	.word	0x20000200
 8001194:	200001fc 	.word	0x200001fc
 8001198:	40021000 	.word	0x40021000
 800119c:	48000800 	.word	0x48000800
 80011a0:	48000400 	.word	0x48000400

080011a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011aa:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <MX_DMA_Init+0x38>)
 80011ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011ae:	4a0b      	ldr	r2, [pc, #44]	; (80011dc <MX_DMA_Init+0x38>)
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	6493      	str	r3, [r2, #72]	; 0x48
 80011b6:	4b09      	ldr	r3, [pc, #36]	; (80011dc <MX_DMA_Init+0x38>)
 80011b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80011c2:	2200      	movs	r2, #0
 80011c4:	2100      	movs	r1, #0
 80011c6:	200e      	movs	r0, #14
 80011c8:	f000 fde9 	bl	8001d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80011cc:	200e      	movs	r0, #14
 80011ce:	f000 fe02 	bl	8001dd6 <HAL_NVIC_EnableIRQ>

}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40021000 	.word	0x40021000

080011e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08a      	sub	sp, #40	; 0x28
 80011e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e6:	f107 0314 	add.w	r3, r7, #20
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	605a      	str	r2, [r3, #4]
 80011f0:	609a      	str	r2, [r3, #8]
 80011f2:	60da      	str	r2, [r3, #12]
 80011f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f6:	4b2b      	ldr	r3, [pc, #172]	; (80012a4 <MX_GPIO_Init+0xc4>)
 80011f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fa:	4a2a      	ldr	r2, [pc, #168]	; (80012a4 <MX_GPIO_Init+0xc4>)
 80011fc:	f043 0304 	orr.w	r3, r3, #4
 8001200:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001202:	4b28      	ldr	r3, [pc, #160]	; (80012a4 <MX_GPIO_Init+0xc4>)
 8001204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001206:	f003 0304 	and.w	r3, r3, #4
 800120a:	613b      	str	r3, [r7, #16]
 800120c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800120e:	4b25      	ldr	r3, [pc, #148]	; (80012a4 <MX_GPIO_Init+0xc4>)
 8001210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001212:	4a24      	ldr	r2, [pc, #144]	; (80012a4 <MX_GPIO_Init+0xc4>)
 8001214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001218:	64d3      	str	r3, [r2, #76]	; 0x4c
 800121a:	4b22      	ldr	r3, [pc, #136]	; (80012a4 <MX_GPIO_Init+0xc4>)
 800121c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001226:	4b1f      	ldr	r3, [pc, #124]	; (80012a4 <MX_GPIO_Init+0xc4>)
 8001228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122a:	4a1e      	ldr	r2, [pc, #120]	; (80012a4 <MX_GPIO_Init+0xc4>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001232:	4b1c      	ldr	r3, [pc, #112]	; (80012a4 <MX_GPIO_Init+0xc4>)
 8001234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800123e:	4b19      	ldr	r3, [pc, #100]	; (80012a4 <MX_GPIO_Init+0xc4>)
 8001240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001242:	4a18      	ldr	r2, [pc, #96]	; (80012a4 <MX_GPIO_Init+0xc4>)
 8001244:	f043 0302 	orr.w	r3, r3, #2
 8001248:	64d3      	str	r3, [r2, #76]	; 0x4c
 800124a:	4b16      	ldr	r3, [pc, #88]	; (80012a4 <MX_GPIO_Init+0xc4>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	607b      	str	r3, [r7, #4]
 8001254:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001256:	2200      	movs	r2, #0
 8001258:	2120      	movs	r1, #32
 800125a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800125e:	f001 fcb3 	bl	8002bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001262:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001266:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001268:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <MX_GPIO_Init+0xc8>)
 800126a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	4619      	mov	r1, r3
 8001276:	480d      	ldr	r0, [pc, #52]	; (80012ac <MX_GPIO_Init+0xcc>)
 8001278:	f001 fafc 	bl	8002874 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800127c:	2320      	movs	r3, #32
 800127e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001280:	2301      	movs	r3, #1
 8001282:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001288:	2300      	movs	r3, #0
 800128a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800128c:	f107 0314 	add.w	r3, r7, #20
 8001290:	4619      	mov	r1, r3
 8001292:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001296:	f001 faed 	bl	8002874 <HAL_GPIO_Init>

}
 800129a:	bf00      	nop
 800129c:	3728      	adds	r7, #40	; 0x28
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40021000 	.word	0x40021000
 80012a8:	10210000 	.word	0x10210000
 80012ac:	48000800 	.word	0x48000800

080012b0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80012b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012b4:	b08c      	sub	sp, #48	; 0x30
 80012b6:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80012b8:	f000 fbf6 	bl	8001aa8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80012bc:	f000 f95a 	bl	8001574 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80012c0:	f7ff ff8e 	bl	80011e0 <MX_GPIO_Init>
	MX_DMA_Init();
 80012c4:	f7ff ff6e 	bl	80011a4 <MX_DMA_Init>
	MX_USART2_UART_Init();
 80012c8:	f000 fb52 	bl	8001970 <MX_USART2_UART_Init>
	MX_DFSDM1_Init();
 80012cc:	f7ff fde8 	bl	8000ea0 <MX_DFSDM1_Init>
	/* USER CODE BEGIN 2 */
	printf("\r\n***** Program start! *****\r\n");
 80012d0:	4893      	ldr	r0, [pc, #588]	; (8001520 <main+0x270>)
 80012d2:	f005 fd97 	bl	8006e04 <puts>
	HAL_Delay(100);
 80012d6:	2064      	movs	r0, #100	; 0x64
 80012d8:	f000 fc62 	bl	8001ba0 <HAL_Delay>
	if (HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, Buff, FFT_SampleNum) != HAL_OK) {
 80012dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012e0:	4990      	ldr	r1, [pc, #576]	; (8001524 <main+0x274>)
 80012e2:	4891      	ldr	r0, [pc, #580]	; (8001528 <main+0x278>)
 80012e4:	f000 ff72 	bl	80021cc <HAL_DFSDM_FilterRegularStart_DMA>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <main+0x42>
		Error_Handler();
 80012ee:	f000 fa05 	bl	80016fc <Error_Handler>
	}

	// FFT init
	FFT_SampleRate = SystemCoreClock / hdfsdm1_channel0.Init.OutputClock.Divider /
 80012f2:	4b8e      	ldr	r3, [pc, #568]	; (800152c <main+0x27c>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	4b8e      	ldr	r3, [pc, #568]	; (8001530 <main+0x280>)
 80012f8:	68db      	ldr	r3, [r3, #12]
 80012fa:	fbb2 f2f3 	udiv	r2, r2, r3
					 hdfsdm1_filter0.Init.FilterParam.Oversampling /
 80012fe:	4b8a      	ldr	r3, [pc, #552]	; (8001528 <main+0x278>)
 8001300:	6a1b      	ldr	r3, [r3, #32]
	FFT_SampleRate = SystemCoreClock / hdfsdm1_channel0.Init.OutputClock.Divider /
 8001302:	fbb2 f2f3 	udiv	r2, r2, r3
					 hdfsdm1_filter0.Init.FilterParam.IntOversampling;
 8001306:	4b88      	ldr	r3, [pc, #544]	; (8001528 <main+0x278>)
 8001308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
					 hdfsdm1_filter0.Init.FilterParam.Oversampling /
 800130a:	fbb2 f3f3 	udiv	r3, r2, r3
	FFT_SampleRate = SystemCoreClock / hdfsdm1_channel0.Init.OutputClock.Divider /
 800130e:	ee07 3a90 	vmov	s15, r3
 8001312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001316:	4b87      	ldr	r3, [pc, #540]	; (8001534 <main+0x284>)
 8001318:	edc3 7a00 	vstr	s15, [r3]

	// Hanning window
	const float tmp = 2.0f * M_PI / (float)FFT_SampleNum;
 800131c:	4b86      	ldr	r3, [pc, #536]	; (8001538 <main+0x288>)
 800131e:	607b      	str	r3, [r7, #4]
	for (uint32_t i = 0; i < FFT_SampleNum; i++)
 8001320:	2300      	movs	r3, #0
 8001322:	61fb      	str	r3, [r7, #28]
 8001324:	e01f      	b.n	8001366 <main+0xb6>
		*(FFT_window + i) = 0.5f - 0.5f * arm_cos_f32((float)i * tmp);
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	ee07 3a90 	vmov	s15, r3
 800132c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001330:	edd7 7a01 	vldr	s15, [r7, #4]
 8001334:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001338:	eeb0 0a67 	vmov.f32	s0, s15
 800133c:	f004 fc6e 	bl	8005c1c <arm_cos_f32>
 8001340:	eef0 7a40 	vmov.f32	s15, s0
 8001344:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001348:	ee67 7a87 	vmul.f32	s15, s15, s14
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	4a7a      	ldr	r2, [pc, #488]	; (800153c <main+0x28c>)
 8001352:	4413      	add	r3, r2
 8001354:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001358:	ee77 7a67 	vsub.f32	s15, s14, s15
 800135c:	edc3 7a00 	vstr	s15, [r3]
	for (uint32_t i = 0; i < FFT_SampleNum; i++)
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	3301      	adds	r3, #1
 8001364:	61fb      	str	r3, [r7, #28]
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800136c:	d3db      	bcc.n	8001326 <main+0x76>

	for (uint32_t i = 0; i < FFT_SampleNum / 2; i++)
 800136e:	2300      	movs	r3, #0
 8001370:	61bb      	str	r3, [r7, #24]
 8001372:	e016      	b.n	80013a2 <main+0xf2>
		*(FFT_frq + i) = (float)i * (float)FFT_SampleRate / (float)FFT_SampleNum;
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	ee07 3a90 	vmov	s15, r3
 800137a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800137e:	4b6d      	ldr	r3, [pc, #436]	; (8001534 <main+0x284>)
 8001380:	edd3 7a00 	vldr	s15, [r3]
 8001384:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	4a6c      	ldr	r2, [pc, #432]	; (8001540 <main+0x290>)
 800138e:	4413      	add	r3, r2
 8001390:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8001544 <main+0x294>
 8001394:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001398:	edc3 7a00 	vstr	s15, [r3]
	for (uint32_t i = 0; i < FFT_SampleNum / 2; i++)
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	3301      	adds	r3, #1
 80013a0:	61bb      	str	r3, [r7, #24]
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013a8:	d3e4      	bcc.n	8001374 <main+0xc4>

	arm_rfft_fast_init_f32(&S, FFT_SampleNum);
 80013aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013ae:	4866      	ldr	r0, [pc, #408]	; (8001548 <main+0x298>)
 80013b0:	f003 fe4e 	bl	8005050 <arm_rfft_fast_init_f32>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		// Wait
		while (flag)
 80013b4:	bf00      	nop
 80013b6:	4b65      	ldr	r3, [pc, #404]	; (800154c <main+0x29c>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1fb      	bne.n	80013b6 <main+0x106>

		// Raw data output
		// for (uint32_t i = 0; i < FFT_SampleNum; i++) printf("%d\r\n", FFT_inp_int32[i]);

		// Set input data
		for (uint32_t i = 0; i < FFT_SampleNum; i++) FFT_inp[i] = (float)FFT_inp_int32[i];
 80013be:	2300      	movs	r3, #0
 80013c0:	617b      	str	r3, [r7, #20]
 80013c2:	e010      	b.n	80013e6 <main+0x136>
 80013c4:	4a62      	ldr	r2, [pc, #392]	; (8001550 <main+0x2a0>)
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013cc:	ee07 3a90 	vmov	s15, r3
 80013d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013d4:	4a5f      	ldr	r2, [pc, #380]	; (8001554 <main+0x2a4>)
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	4413      	add	r3, r2
 80013dc:	edc3 7a00 	vstr	s15, [r3]
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	3301      	adds	r3, #1
 80013e4:	617b      	str	r3, [r7, #20]
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80013ec:	d3ea      	bcc.n	80013c4 <main+0x114>

		// Windowing
		arm_mult_f32(FFT_inp, FFT_window, FFT_inp, FFT_SampleNum);
 80013ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013f2:	4a58      	ldr	r2, [pc, #352]	; (8001554 <main+0x2a4>)
 80013f4:	4951      	ldr	r1, [pc, #324]	; (800153c <main+0x28c>)
 80013f6:	4857      	ldr	r0, [pc, #348]	; (8001554 <main+0x2a4>)
 80013f8:	f004 fc9e 	bl	8005d38 <arm_mult_f32>

		// Execute FFT
		arm_rfft_fast_f32(&S, FFT_inp, FFT_oup, 0);
 80013fc:	2300      	movs	r3, #0
 80013fe:	4a56      	ldr	r2, [pc, #344]	; (8001558 <main+0x2a8>)
 8001400:	4954      	ldr	r1, [pc, #336]	; (8001554 <main+0x2a4>)
 8001402:	4851      	ldr	r0, [pc, #324]	; (8001548 <main+0x298>)
 8001404:	f003 ff08 	bl	8005218 <arm_rfft_fast_f32>

		// calculate magnitude
		arm_cmplx_mag_f32(FFT_oup, FFT_mag, FFT_SampleNum / 2);
 8001408:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800140c:	4953      	ldr	r1, [pc, #332]	; (800155c <main+0x2ac>)
 800140e:	4852      	ldr	r0, [pc, #328]	; (8001558 <main+0x2a8>)
 8001410:	f004 fae0 	bl	80059d4 <arm_cmplx_mag_f32>

		// Normalization (Unitary transformation) of magnitude
		arm_scale_f32(FFT_mag, 1.0f / sqrtf((float)FFT_SampleNum), FFT_mag, FFT_SampleNum / 2);
 8001414:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001418:	4950      	ldr	r1, [pc, #320]	; (800155c <main+0x2ac>)
 800141a:	ed9f 0a51 	vldr	s0, [pc, #324]	; 8001560 <main+0x2b0>
 800141e:	484f      	ldr	r0, [pc, #316]	; (800155c <main+0x2ac>)
 8001420:	f004 fc46 	bl	8005cb0 <arm_scale_f32>

		// AC coupling
		for (uint32_t i = 0; i < FFT_SampleNum / 2; i++) {
 8001424:	2300      	movs	r3, #0
 8001426:	613b      	str	r3, [r7, #16]
 8001428:	e017      	b.n	800145a <main+0x1aa>
			if (*(FFT_frq + i) < FFT_AC_COUPLING_HZ)
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	4a44      	ldr	r2, [pc, #272]	; (8001540 <main+0x290>)
 8001430:	4413      	add	r3, r2
 8001432:	edd3 7a00 	vldr	s15, [r3]
 8001436:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8001564 <main+0x2b4>
 800143a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800143e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001442:	d400      	bmi.n	8001446 <main+0x196>
				FFT_mag[i] = 1.0f;
			else
				break;
 8001444:	e00d      	b.n	8001462 <main+0x1b2>
				FFT_mag[i] = 1.0f;
 8001446:	4a45      	ldr	r2, [pc, #276]	; (800155c <main+0x2ac>)
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	4413      	add	r3, r2
 800144e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001452:	601a      	str	r2, [r3, #0]
		for (uint32_t i = 0; i < FFT_SampleNum / 2; i++) {
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	3301      	adds	r3, #1
 8001458:	613b      	str	r3, [r7, #16]
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001460:	d3e3      	bcc.n	800142a <main+0x17a>
		}

		float inv_dB_base_mag = 1.0f / 1.0f;
 8001462:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001466:	603b      	str	r3, [r7, #0]
		for (uint32_t i = 0; i < FFT_SampleNum / 2; i++)
 8001468:	2300      	movs	r3, #0
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	e01c      	b.n	80014a8 <main+0x1f8>
			FFT_dB[i] = 10.0f * log10f(FFT_mag[i] * inv_dB_base_mag);
 800146e:	4a3b      	ldr	r2, [pc, #236]	; (800155c <main+0x2ac>)
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	4413      	add	r3, r2
 8001476:	ed93 7a00 	vldr	s14, [r3]
 800147a:	edd7 7a00 	vldr	s15, [r7]
 800147e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001482:	eeb0 0a67 	vmov.f32	s0, s15
 8001486:	f003 fb97 	bl	8004bb8 <log10f>
 800148a:	eef0 7a40 	vmov.f32	s15, s0
 800148e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001492:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001496:	4a34      	ldr	r2, [pc, #208]	; (8001568 <main+0x2b8>)
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	4413      	add	r3, r2
 800149e:	edc3 7a00 	vstr	s15, [r3]
		for (uint32_t i = 0; i < FFT_SampleNum / 2; i++)
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	3301      	adds	r3, #1
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014ae:	d3de      	bcc.n	800146e <main+0x1be>
		// arm_max_f32(FFT_mag, FFT_SampleNum / 2, &mag_max, &maxIndex);
		// frq_max = *(FFT_frq + maxIndex);

		// printf("SampleRate=%d, frq_max = %.1f, mag_max = %f\r\n", (int)FFT_SampleRate, frq_max,
		// mag_max);
		for (uint32_t i = 0; i < FFT_SampleNum / 2; i++) {
 80014b0:	2300      	movs	r3, #0
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	e029      	b.n	800150a <main+0x25a>
			printf("%.1f  %f  %f\r\n", FFT_frq[i], FFT_mag[i], FFT_dB[i]);
 80014b6:	4a22      	ldr	r2, [pc, #136]	; (8001540 <main+0x290>)
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	4413      	add	r3, r2
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff f841 	bl	8000548 <__aeabi_f2d>
 80014c6:	4680      	mov	r8, r0
 80014c8:	4689      	mov	r9, r1
 80014ca:	4a24      	ldr	r2, [pc, #144]	; (800155c <main+0x2ac>)
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	4413      	add	r3, r2
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff f837 	bl	8000548 <__aeabi_f2d>
 80014da:	4604      	mov	r4, r0
 80014dc:	460d      	mov	r5, r1
 80014de:	4a22      	ldr	r2, [pc, #136]	; (8001568 <main+0x2b8>)
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff f82d 	bl	8000548 <__aeabi_f2d>
 80014ee:	4602      	mov	r2, r0
 80014f0:	460b      	mov	r3, r1
 80014f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80014f6:	e9cd 4500 	strd	r4, r5, [sp]
 80014fa:	4642      	mov	r2, r8
 80014fc:	464b      	mov	r3, r9
 80014fe:	481b      	ldr	r0, [pc, #108]	; (800156c <main+0x2bc>)
 8001500:	f005 fbfa 	bl	8006cf8 <iprintf>
		for (uint32_t i = 0; i < FFT_SampleNum / 2; i++) {
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	3301      	adds	r3, #1
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001510:	d3d1      	bcc.n	80014b6 <main+0x206>
		}

		printf("=====\r\n");
 8001512:	4817      	ldr	r0, [pc, #92]	; (8001570 <main+0x2c0>)
 8001514:	f005 fc76 	bl	8006e04 <puts>

		// while(1);
		// HAL_Delay(2000);
		flag = true;  // <- Continuous transformation
 8001518:	4b0c      	ldr	r3, [pc, #48]	; (800154c <main+0x29c>)
 800151a:	2201      	movs	r2, #1
 800151c:	701a      	strb	r2, [r3, #0]
	while (1) {
 800151e:	e749      	b.n	80013b4 <main+0x104>
 8001520:	08008f00 	.word	0x08008f00
 8001524:	20000204 	.word	0x20000204
 8001528:	2000f234 	.word	0x2000f234
 800152c:	20000004 	.word	0x20000004
 8001530:	2000f2d0 	.word	0x2000f2d0
 8001534:	2000f308 	.word	0x2000f308
 8001538:	3b490fdb 	.word	0x3b490fdb
 800153c:	2000d204 	.word	0x2000d204
 8001540:	2000c204 	.word	0x2000c204
 8001544:	45000000 	.word	0x45000000
 8001548:	2000f30c 	.word	0x2000f30c
 800154c:	20000000 	.word	0x20000000
 8001550:	20004204 	.word	0x20004204
 8001554:	20006204 	.word	0x20006204
 8001558:	20008204 	.word	0x20008204
 800155c:	2000a204 	.word	0x2000a204
 8001560:	3cb504f3 	.word	0x3cb504f3
 8001564:	447a0000 	.word	0x447a0000
 8001568:	2000b204 	.word	0x2000b204
 800156c:	08008f20 	.word	0x08008f20
 8001570:	08008f30 	.word	0x08008f30

08001574 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001574:	b580      	push	{r7, lr}
 8001576:	b0b8      	sub	sp, #224	; 0xe0
 8001578:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800157a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800157e:	2244      	movs	r2, #68	; 0x44
 8001580:	2100      	movs	r1, #0
 8001582:	4618      	mov	r0, r3
 8001584:	f004 ff46 	bl	8006414 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001588:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001598:	463b      	mov	r3, r7
 800159a:	2288      	movs	r2, #136	; 0x88
 800159c:	2100      	movs	r1, #0
 800159e:	4618      	mov	r0, r3
 80015a0:	f004 ff38 	bl	8006414 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015a4:	2302      	movs	r3, #2
 80015a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015b2:	2310      	movs	r3, #16
 80015b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015b8:	2302      	movs	r3, #2
 80015ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015be:	2302      	movs	r3, #2
 80015c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 2;
 80015c4:	2302      	movs	r3, #2
 80015c6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 20;
 80015ca:	2314      	movs	r3, #20
 80015cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80015d0:	2307      	movs	r3, #7
 80015d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015d6:	2302      	movs	r3, #2
 80015d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015dc:	2302      	movs	r3, #2
 80015de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) { Error_Handler(); }
 80015e2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015e6:	4618      	mov	r0, r3
 80015e8:	f001 fb6a 	bl	8002cc0 <HAL_RCC_OscConfig>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <SystemClock_Config+0x82>
 80015f2:	f000 f883 	bl	80016fc <Error_Handler>
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType =
 80015f6:	230f      	movs	r3, #15
 80015f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015fc:	2303      	movs	r3, #3
 80015fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001602:	2300      	movs	r3, #0
 8001604:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001608:	2300      	movs	r3, #0
 800160a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800160e:	2300      	movs	r3, #0
 8001610:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) { Error_Handler(); }
 8001614:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001618:	2104      	movs	r1, #4
 800161a:	4618      	mov	r0, r3
 800161c:	f001 ff36 	bl	800348c <HAL_RCC_ClockConfig>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <SystemClock_Config+0xb6>
 8001626:	f000 f869 	bl	80016fc <Error_Handler>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_DFSDM1;
 800162a:	4b0e      	ldr	r3, [pc, #56]	; (8001664 <SystemClock_Config+0xf0>)
 800162c:	603b      	str	r3, [r7, #0]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800162e:	2300      	movs	r3, #0
 8001630:	63fb      	str	r3, [r7, #60]	; 0x3c
	PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001632:	2300      	movs	r3, #0
 8001634:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) { Error_Handler(); }
 8001638:	463b      	mov	r3, r7
 800163a:	4618      	mov	r0, r3
 800163c:	f002 f92c 	bl	8003898 <HAL_RCCEx_PeriphCLKConfig>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <SystemClock_Config+0xd6>
 8001646:	f000 f859 	bl	80016fc <Error_Handler>
	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) {
 800164a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800164e:	f001 fae1 	bl	8002c14 <HAL_PWREx_ControlVoltageScaling>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <SystemClock_Config+0xe8>
		Error_Handler();
 8001658:	f000 f850 	bl	80016fc <Error_Handler>
	}
}
 800165c:	bf00      	nop
 800165e:	37e0      	adds	r7, #224	; 0xe0
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	00010002 	.word	0x00010002

08001668 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
/**
 * @brief  Half regular conversion complete callback.
 * @param  hdfsdm_filter : DFSDM filter handle.
 * @retval None
 */
void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter) {
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
	/*static int i = 0;
	printf("%d\r\n", i);
	i++;*/
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <HAL_DFSDM_FilterRegConvCpltCallback>:
  * @note   In interrupt mode, user has to read conversion value in this function
			using HAL_DFSDM_FilterGetRegularValue.
  * @param  hdfsdm_filter : DFSDM filter handle.
  * @retval None
  */
void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter) {
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
	if (flag) {
 8001684:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <HAL_DFSDM_FilterRegConvCpltCallback+0x48>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d014      	beq.n	80016b6 <HAL_DFSDM_FilterRegConvCpltCallback+0x3a>
		for (uint32_t i = 0; i < FFT_SampleNum; i++) { FFT_inp_int32[i] = Buff[i]; }
 800168c:	2300      	movs	r3, #0
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	e00a      	b.n	80016a8 <HAL_DFSDM_FilterRegConvCpltCallback+0x2c>
 8001692:	4a0d      	ldr	r2, [pc, #52]	; (80016c8 <HAL_DFSDM_FilterRegConvCpltCallback+0x4c>)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800169a:	490c      	ldr	r1, [pc, #48]	; (80016cc <HAL_DFSDM_FilterRegConvCpltCallback+0x50>)
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	3301      	adds	r3, #1
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016ae:	d3f0      	bcc.n	8001692 <HAL_DFSDM_FilterRegConvCpltCallback+0x16>
		flag = false;
 80016b0:	4b04      	ldr	r3, [pc, #16]	; (80016c4 <HAL_DFSDM_FilterRegConvCpltCallback+0x48>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	701a      	strb	r2, [r3, #0]
	}
}
 80016b6:	bf00      	nop
 80016b8:	3714      	adds	r7, #20
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	20000000 	.word	0x20000000
 80016c8:	20000204 	.word	0x20000204
 80016cc:	20004204 	.word	0x20004204

080016d0 <_write>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
int _write(int file, char *ptr, int len) {
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, (uint16_t)len, 0xFFFFFFFF);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	b29a      	uxth	r2, r3
 80016e0:	f04f 33ff 	mov.w	r3, #4294967295
 80016e4:	68b9      	ldr	r1, [r7, #8]
 80016e6:	4804      	ldr	r0, [pc, #16]	; (80016f8 <_write+0x28>)
 80016e8:	f002 fde0 	bl	80042ac <HAL_UART_Transmit>
	return len;
 80016ec:	687b      	ldr	r3, [r7, #4]
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	2000f324 	.word	0x2000f324

080016fc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001700:	b672      	cpsid	i
}
 8001702:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {}
 8001704:	e7fe      	b.n	8001704 <Error_Handler+0x8>
	...

08001708 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800170e:	4b0f      	ldr	r3, [pc, #60]	; (800174c <HAL_MspInit+0x44>)
 8001710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001712:	4a0e      	ldr	r2, [pc, #56]	; (800174c <HAL_MspInit+0x44>)
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	6613      	str	r3, [r2, #96]	; 0x60
 800171a:	4b0c      	ldr	r3, [pc, #48]	; (800174c <HAL_MspInit+0x44>)
 800171c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	607b      	str	r3, [r7, #4]
 8001724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001726:	4b09      	ldr	r3, [pc, #36]	; (800174c <HAL_MspInit+0x44>)
 8001728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800172a:	4a08      	ldr	r2, [pc, #32]	; (800174c <HAL_MspInit+0x44>)
 800172c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001730:	6593      	str	r3, [r2, #88]	; 0x58
 8001732:	4b06      	ldr	r3, [pc, #24]	; (800174c <HAL_MspInit+0x44>)
 8001734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173a:	603b      	str	r3, [r7, #0]
 800173c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800173e:	bf00      	nop
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	40021000 	.word	0x40021000

08001750 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001754:	e7fe      	b.n	8001754 <NMI_Handler+0x4>

08001756 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800175a:	e7fe      	b.n	800175a <HardFault_Handler+0x4>

0800175c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001760:	e7fe      	b.n	8001760 <MemManage_Handler+0x4>

08001762 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001766:	e7fe      	b.n	8001766 <BusFault_Handler+0x4>

08001768 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800176c:	e7fe      	b.n	800176c <UsageFault_Handler+0x4>

0800176e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800178a:	b480      	push	{r7}
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800179c:	f000 f9e0 	bl	8001b60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017a0:	bf00      	nop
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 80017a8:	4802      	ldr	r0, [pc, #8]	; (80017b4 <DMA1_Channel4_IRQHandler+0x10>)
 80017aa:	f000 ff83 	bl	80026b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	2000f288 	.word	0x2000f288

080017b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
	return 1;
 80017bc:	2301      	movs	r3, #1
}
 80017be:	4618      	mov	r0, r3
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <_kill>:

int _kill(int pid, int sig)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80017d2:	f004 fdf5 	bl	80063c0 <__errno>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2216      	movs	r2, #22
 80017da:	601a      	str	r2, [r3, #0]
	return -1;
 80017dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <_exit>:

void _exit (int status)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80017f0:	f04f 31ff 	mov.w	r1, #4294967295
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f7ff ffe7 	bl	80017c8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80017fa:	e7fe      	b.n	80017fa <_exit+0x12>

080017fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]
 800180c:	e00a      	b.n	8001824 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800180e:	f3af 8000 	nop.w
 8001812:	4601      	mov	r1, r0
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	1c5a      	adds	r2, r3, #1
 8001818:	60ba      	str	r2, [r7, #8]
 800181a:	b2ca      	uxtb	r2, r1
 800181c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	3301      	adds	r3, #1
 8001822:	617b      	str	r3, [r7, #20]
 8001824:	697a      	ldr	r2, [r7, #20]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	429a      	cmp	r2, r3
 800182a:	dbf0      	blt.n	800180e <_read+0x12>
	}

return len;
 800182c:	687b      	ldr	r3, [r7, #4]
}
 800182e:	4618      	mov	r0, r3
 8001830:	3718      	adds	r7, #24
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001836:	b480      	push	{r7}
 8001838:	b083      	sub	sp, #12
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
	return -1;
 800183e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001842:	4618      	mov	r0, r3
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr

0800184e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800184e:	b480      	push	{r7}
 8001850:	b083      	sub	sp, #12
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
 8001856:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800185e:	605a      	str	r2, [r3, #4]
	return 0;
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <_isatty>:

int _isatty(int file)
{
 800186e:	b480      	push	{r7}
 8001870:	b083      	sub	sp, #12
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
	return 1;
 8001876:	2301      	movs	r3, #1
}
 8001878:	4618      	mov	r0, r3
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
	return 0;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3714      	adds	r7, #20
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
	...

080018a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018a8:	4a14      	ldr	r2, [pc, #80]	; (80018fc <_sbrk+0x5c>)
 80018aa:	4b15      	ldr	r3, [pc, #84]	; (8001900 <_sbrk+0x60>)
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018b4:	4b13      	ldr	r3, [pc, #76]	; (8001904 <_sbrk+0x64>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d102      	bne.n	80018c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018bc:	4b11      	ldr	r3, [pc, #68]	; (8001904 <_sbrk+0x64>)
 80018be:	4a12      	ldr	r2, [pc, #72]	; (8001908 <_sbrk+0x68>)
 80018c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018c2:	4b10      	ldr	r3, [pc, #64]	; (8001904 <_sbrk+0x64>)
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4413      	add	r3, r2
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d207      	bcs.n	80018e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018d0:	f004 fd76 	bl	80063c0 <__errno>
 80018d4:	4603      	mov	r3, r0
 80018d6:	220c      	movs	r2, #12
 80018d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018da:	f04f 33ff 	mov.w	r3, #4294967295
 80018de:	e009      	b.n	80018f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018e0:	4b08      	ldr	r3, [pc, #32]	; (8001904 <_sbrk+0x64>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018e6:	4b07      	ldr	r3, [pc, #28]	; (8001904 <_sbrk+0x64>)
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4413      	add	r3, r2
 80018ee:	4a05      	ldr	r2, [pc, #20]	; (8001904 <_sbrk+0x64>)
 80018f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018f2:	68fb      	ldr	r3, [r7, #12]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3718      	adds	r7, #24
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20018000 	.word	0x20018000
 8001900:	00000400 	.word	0x00000400
 8001904:	2000f204 	.word	0x2000f204
 8001908:	2000f3c0 	.word	0x2000f3c0

0800190c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001910:	4b15      	ldr	r3, [pc, #84]	; (8001968 <SystemInit+0x5c>)
 8001912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001916:	4a14      	ldr	r2, [pc, #80]	; (8001968 <SystemInit+0x5c>)
 8001918:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800191c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001920:	4b12      	ldr	r3, [pc, #72]	; (800196c <SystemInit+0x60>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a11      	ldr	r2, [pc, #68]	; (800196c <SystemInit+0x60>)
 8001926:	f043 0301 	orr.w	r3, r3, #1
 800192a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800192c:	4b0f      	ldr	r3, [pc, #60]	; (800196c <SystemInit+0x60>)
 800192e:	2200      	movs	r2, #0
 8001930:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001932:	4b0e      	ldr	r3, [pc, #56]	; (800196c <SystemInit+0x60>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a0d      	ldr	r2, [pc, #52]	; (800196c <SystemInit+0x60>)
 8001938:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800193c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001940:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001942:	4b0a      	ldr	r3, [pc, #40]	; (800196c <SystemInit+0x60>)
 8001944:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001948:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800194a:	4b08      	ldr	r3, [pc, #32]	; (800196c <SystemInit+0x60>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a07      	ldr	r2, [pc, #28]	; (800196c <SystemInit+0x60>)
 8001950:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001954:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001956:	4b05      	ldr	r3, [pc, #20]	; (800196c <SystemInit+0x60>)
 8001958:	2200      	movs	r2, #0
 800195a:	619a      	str	r2, [r3, #24]
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	e000ed00 	.word	0xe000ed00
 800196c:	40021000 	.word	0x40021000

08001970 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001974:	4b14      	ldr	r3, [pc, #80]	; (80019c8 <MX_USART2_UART_Init+0x58>)
 8001976:	4a15      	ldr	r2, [pc, #84]	; (80019cc <MX_USART2_UART_Init+0x5c>)
 8001978:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 800197a:	4b13      	ldr	r3, [pc, #76]	; (80019c8 <MX_USART2_UART_Init+0x58>)
 800197c:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001980:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001982:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <MX_USART2_UART_Init+0x58>)
 8001984:	2200      	movs	r2, #0
 8001986:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001988:	4b0f      	ldr	r3, [pc, #60]	; (80019c8 <MX_USART2_UART_Init+0x58>)
 800198a:	2200      	movs	r2, #0
 800198c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800198e:	4b0e      	ldr	r3, [pc, #56]	; (80019c8 <MX_USART2_UART_Init+0x58>)
 8001990:	2200      	movs	r2, #0
 8001992:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001994:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <MX_USART2_UART_Init+0x58>)
 8001996:	220c      	movs	r2, #12
 8001998:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800199a:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <MX_USART2_UART_Init+0x58>)
 800199c:	2200      	movs	r2, #0
 800199e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019a0:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <MX_USART2_UART_Init+0x58>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019a6:	4b08      	ldr	r3, [pc, #32]	; (80019c8 <MX_USART2_UART_Init+0x58>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019ac:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <MX_USART2_UART_Init+0x58>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019b2:	4805      	ldr	r0, [pc, #20]	; (80019c8 <MX_USART2_UART_Init+0x58>)
 80019b4:	f002 fc2c 	bl	8004210 <HAL_UART_Init>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80019be:	f7ff fe9d 	bl	80016fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	2000f324 	.word	0x2000f324
 80019cc:	40004400 	.word	0x40004400

080019d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b08a      	sub	sp, #40	; 0x28
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d8:	f107 0314 	add.w	r3, r7, #20
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	60da      	str	r2, [r3, #12]
 80019e6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a17      	ldr	r2, [pc, #92]	; (8001a4c <HAL_UART_MspInit+0x7c>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d128      	bne.n	8001a44 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019f2:	4b17      	ldr	r3, [pc, #92]	; (8001a50 <HAL_UART_MspInit+0x80>)
 80019f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f6:	4a16      	ldr	r2, [pc, #88]	; (8001a50 <HAL_UART_MspInit+0x80>)
 80019f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019fc:	6593      	str	r3, [r2, #88]	; 0x58
 80019fe:	4b14      	ldr	r3, [pc, #80]	; (8001a50 <HAL_UART_MspInit+0x80>)
 8001a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a06:	613b      	str	r3, [r7, #16]
 8001a08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0a:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <HAL_UART_MspInit+0x80>)
 8001a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a0e:	4a10      	ldr	r2, [pc, #64]	; (8001a50 <HAL_UART_MspInit+0x80>)
 8001a10:	f043 0301 	orr.w	r3, r3, #1
 8001a14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a16:	4b0e      	ldr	r3, [pc, #56]	; (8001a50 <HAL_UART_MspInit+0x80>)
 8001a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a22:	230c      	movs	r3, #12
 8001a24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a26:	2302      	movs	r3, #2
 8001a28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a32:	2307      	movs	r3, #7
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a36:	f107 0314 	add.w	r3, r7, #20
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a40:	f000 ff18 	bl	8002874 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001a44:	bf00      	nop
 8001a46:	3728      	adds	r7, #40	; 0x28
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40004400 	.word	0x40004400
 8001a50:	40021000 	.word	0x40021000

08001a54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a8c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a58:	f7ff ff58 	bl	800190c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001a5c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001a5e:	e003      	b.n	8001a68 <LoopCopyDataInit>

08001a60 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001a60:	4b0b      	ldr	r3, [pc, #44]	; (8001a90 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001a62:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001a64:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001a66:	3104      	adds	r1, #4

08001a68 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001a68:	480a      	ldr	r0, [pc, #40]	; (8001a94 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001a6a:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001a6c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001a6e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001a70:	d3f6      	bcc.n	8001a60 <CopyDataInit>
	ldr	r2, =_sbss
 8001a72:	4a0a      	ldr	r2, [pc, #40]	; (8001a9c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001a74:	e002      	b.n	8001a7c <LoopFillZerobss>

08001a76 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001a76:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001a78:	f842 3b04 	str.w	r3, [r2], #4

08001a7c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001a7c:	4b08      	ldr	r3, [pc, #32]	; (8001aa0 <LoopForever+0x16>)
	cmp	r2, r3
 8001a7e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001a80:	d3f9      	bcc.n	8001a76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a82:	f004 fca3 	bl	80063cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a86:	f7ff fc13 	bl	80012b0 <main>

08001a8a <LoopForever>:

LoopForever:
    b LoopForever
 8001a8a:	e7fe      	b.n	8001a8a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a8c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001a90:	0801cb5c 	.word	0x0801cb5c
	ldr	r0, =_sdata
 8001a94:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001a98:	200001e0 	.word	0x200001e0
	ldr	r2, =_sbss
 8001a9c:	200001e0 	.word	0x200001e0
	ldr	r3, = _ebss
 8001aa0:	2000f3bc 	.word	0x2000f3bc

08001aa4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001aa4:	e7fe      	b.n	8001aa4 <ADC1_2_IRQHandler>
	...

08001aa8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ab2:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <HAL_Init+0x3c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a0b      	ldr	r2, [pc, #44]	; (8001ae4 <HAL_Init+0x3c>)
 8001ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001abc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001abe:	2003      	movs	r0, #3
 8001ac0:	f000 f962 	bl	8001d88 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	f000 f80f 	bl	8001ae8 <HAL_InitTick>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d002      	beq.n	8001ad6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	71fb      	strb	r3, [r7, #7]
 8001ad4:	e001      	b.n	8001ada <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ad6:	f7ff fe17 	bl	8001708 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ada:	79fb      	ldrb	r3, [r7, #7]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40022000 	.word	0x40022000

08001ae8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001af0:	2300      	movs	r3, #0
 8001af2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001af4:	4b17      	ldr	r3, [pc, #92]	; (8001b54 <HAL_InitTick+0x6c>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d023      	beq.n	8001b44 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001afc:	4b16      	ldr	r3, [pc, #88]	; (8001b58 <HAL_InitTick+0x70>)
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	4b14      	ldr	r3, [pc, #80]	; (8001b54 <HAL_InitTick+0x6c>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	4619      	mov	r1, r3
 8001b06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b12:	4618      	mov	r0, r3
 8001b14:	f000 f96d 	bl	8001df2 <HAL_SYSTICK_Config>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d10f      	bne.n	8001b3e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2b0f      	cmp	r3, #15
 8001b22:	d809      	bhi.n	8001b38 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b24:	2200      	movs	r2, #0
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	f04f 30ff 	mov.w	r0, #4294967295
 8001b2c:	f000 f937 	bl	8001d9e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b30:	4a0a      	ldr	r2, [pc, #40]	; (8001b5c <HAL_InitTick+0x74>)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6013      	str	r3, [r2, #0]
 8001b36:	e007      	b.n	8001b48 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	73fb      	strb	r3, [r7, #15]
 8001b3c:	e004      	b.n	8001b48 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	73fb      	strb	r3, [r7, #15]
 8001b42:	e001      	b.n	8001b48 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	2000000c 	.word	0x2000000c
 8001b58:	20000004 	.word	0x20000004
 8001b5c:	20000008 	.word	0x20000008

08001b60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b64:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <HAL_IncTick+0x20>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	461a      	mov	r2, r3
 8001b6a:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <HAL_IncTick+0x24>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4413      	add	r3, r2
 8001b70:	4a04      	ldr	r2, [pc, #16]	; (8001b84 <HAL_IncTick+0x24>)
 8001b72:	6013      	str	r3, [r2, #0]
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	2000000c 	.word	0x2000000c
 8001b84:	2000f3a8 	.word	0x2000f3a8

08001b88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b8c:	4b03      	ldr	r3, [pc, #12]	; (8001b9c <HAL_GetTick+0x14>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	2000f3a8 	.word	0x2000f3a8

08001ba0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ba8:	f7ff ffee 	bl	8001b88 <HAL_GetTick>
 8001bac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bb8:	d005      	beq.n	8001bc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001bba:	4b0a      	ldr	r3, [pc, #40]	; (8001be4 <HAL_Delay+0x44>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bc6:	bf00      	nop
 8001bc8:	f7ff ffde 	bl	8001b88 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d8f7      	bhi.n	8001bc8 <HAL_Delay+0x28>
  {
  }
}
 8001bd8:	bf00      	nop
 8001bda:	bf00      	nop
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	2000000c 	.word	0x2000000c

08001be8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bf8:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <__NVIC_SetPriorityGrouping+0x44>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bfe:	68ba      	ldr	r2, [r7, #8]
 8001c00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c04:	4013      	ands	r3, r2
 8001c06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c1a:	4a04      	ldr	r2, [pc, #16]	; (8001c2c <__NVIC_SetPriorityGrouping+0x44>)
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	60d3      	str	r3, [r2, #12]
}
 8001c20:	bf00      	nop
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	e000ed00 	.word	0xe000ed00

08001c30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c34:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <__NVIC_GetPriorityGrouping+0x18>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	0a1b      	lsrs	r3, r3, #8
 8001c3a:	f003 0307 	and.w	r3, r3, #7
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	db0b      	blt.n	8001c76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	f003 021f 	and.w	r2, r3, #31
 8001c64:	4907      	ldr	r1, [pc, #28]	; (8001c84 <__NVIC_EnableIRQ+0x38>)
 8001c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6a:	095b      	lsrs	r3, r3, #5
 8001c6c:	2001      	movs	r0, #1
 8001c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	e000e100 	.word	0xe000e100

08001c88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	6039      	str	r1, [r7, #0]
 8001c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	db0a      	blt.n	8001cb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	490c      	ldr	r1, [pc, #48]	; (8001cd4 <__NVIC_SetPriority+0x4c>)
 8001ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca6:	0112      	lsls	r2, r2, #4
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	440b      	add	r3, r1
 8001cac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cb0:	e00a      	b.n	8001cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	4908      	ldr	r1, [pc, #32]	; (8001cd8 <__NVIC_SetPriority+0x50>)
 8001cb8:	79fb      	ldrb	r3, [r7, #7]
 8001cba:	f003 030f 	and.w	r3, r3, #15
 8001cbe:	3b04      	subs	r3, #4
 8001cc0:	0112      	lsls	r2, r2, #4
 8001cc2:	b2d2      	uxtb	r2, r2
 8001cc4:	440b      	add	r3, r1
 8001cc6:	761a      	strb	r2, [r3, #24]
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	e000e100 	.word	0xe000e100
 8001cd8:	e000ed00 	.word	0xe000ed00

08001cdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b089      	sub	sp, #36	; 0x24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	f1c3 0307 	rsb	r3, r3, #7
 8001cf6:	2b04      	cmp	r3, #4
 8001cf8:	bf28      	it	cs
 8001cfa:	2304      	movcs	r3, #4
 8001cfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	3304      	adds	r3, #4
 8001d02:	2b06      	cmp	r3, #6
 8001d04:	d902      	bls.n	8001d0c <NVIC_EncodePriority+0x30>
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	3b03      	subs	r3, #3
 8001d0a:	e000      	b.n	8001d0e <NVIC_EncodePriority+0x32>
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d10:	f04f 32ff 	mov.w	r2, #4294967295
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	43da      	mvns	r2, r3
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	401a      	ands	r2, r3
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d24:	f04f 31ff 	mov.w	r1, #4294967295
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2e:	43d9      	mvns	r1, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d34:	4313      	orrs	r3, r2
         );
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3724      	adds	r7, #36	; 0x24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
	...

08001d44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d54:	d301      	bcc.n	8001d5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d56:	2301      	movs	r3, #1
 8001d58:	e00f      	b.n	8001d7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d5a:	4a0a      	ldr	r2, [pc, #40]	; (8001d84 <SysTick_Config+0x40>)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d62:	210f      	movs	r1, #15
 8001d64:	f04f 30ff 	mov.w	r0, #4294967295
 8001d68:	f7ff ff8e 	bl	8001c88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d6c:	4b05      	ldr	r3, [pc, #20]	; (8001d84 <SysTick_Config+0x40>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d72:	4b04      	ldr	r3, [pc, #16]	; (8001d84 <SysTick_Config+0x40>)
 8001d74:	2207      	movs	r2, #7
 8001d76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	e000e010 	.word	0xe000e010

08001d88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f7ff ff29 	bl	8001be8 <__NVIC_SetPriorityGrouping>
}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b086      	sub	sp, #24
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	4603      	mov	r3, r0
 8001da6:	60b9      	str	r1, [r7, #8]
 8001da8:	607a      	str	r2, [r7, #4]
 8001daa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001dac:	2300      	movs	r3, #0
 8001dae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001db0:	f7ff ff3e 	bl	8001c30 <__NVIC_GetPriorityGrouping>
 8001db4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	68b9      	ldr	r1, [r7, #8]
 8001dba:	6978      	ldr	r0, [r7, #20]
 8001dbc:	f7ff ff8e 	bl	8001cdc <NVIC_EncodePriority>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dc6:	4611      	mov	r1, r2
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff ff5d 	bl	8001c88 <__NVIC_SetPriority>
}
 8001dce:	bf00      	nop
 8001dd0:	3718      	adds	r7, #24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b082      	sub	sp, #8
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	4603      	mov	r3, r0
 8001dde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff ff31 	bl	8001c4c <__NVIC_EnableIRQ>
}
 8001dea:	bf00      	nop
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b082      	sub	sp, #8
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7ff ffa2 	bl	8001d44 <SysTick_Config>
 8001e00:	4603      	mov	r3, r0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
	...

08001e0c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e0ac      	b.n	8001f78 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f000 fa8c 	bl	8002340 <DFSDM_GetChannelFromInstance>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	4a55      	ldr	r2, [pc, #340]	; (8001f80 <HAL_DFSDM_ChannelInit+0x174>)
 8001e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e09f      	b.n	8001f78 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f7ff f943 	bl	80010c4 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001e3e:	4b51      	ldr	r3, [pc, #324]	; (8001f84 <HAL_DFSDM_ChannelInit+0x178>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	3301      	adds	r3, #1
 8001e44:	4a4f      	ldr	r2, [pc, #316]	; (8001f84 <HAL_DFSDM_ChannelInit+0x178>)
 8001e46:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001e48:	4b4e      	ldr	r3, [pc, #312]	; (8001f84 <HAL_DFSDM_ChannelInit+0x178>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d125      	bne.n	8001e9c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001e50:	4b4d      	ldr	r3, [pc, #308]	; (8001f88 <HAL_DFSDM_ChannelInit+0x17c>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a4c      	ldr	r2, [pc, #304]	; (8001f88 <HAL_DFSDM_ChannelInit+0x17c>)
 8001e56:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001e5a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001e5c:	4b4a      	ldr	r3, [pc, #296]	; (8001f88 <HAL_DFSDM_ChannelInit+0x17c>)
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	4948      	ldr	r1, [pc, #288]	; (8001f88 <HAL_DFSDM_ChannelInit+0x17c>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001e6a:	4b47      	ldr	r3, [pc, #284]	; (8001f88 <HAL_DFSDM_ChannelInit+0x17c>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a46      	ldr	r2, [pc, #280]	; (8001f88 <HAL_DFSDM_ChannelInit+0x17c>)
 8001e70:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001e74:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	791b      	ldrb	r3, [r3, #4]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d108      	bne.n	8001e90 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001e7e:	4b42      	ldr	r3, [pc, #264]	; (8001f88 <HAL_DFSDM_ChannelInit+0x17c>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	041b      	lsls	r3, r3, #16
 8001e8a:	493f      	ldr	r1, [pc, #252]	; (8001f88 <HAL_DFSDM_ChannelInit+0x17c>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001e90:	4b3d      	ldr	r3, [pc, #244]	; (8001f88 <HAL_DFSDM_ChannelInit+0x17c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a3c      	ldr	r2, [pc, #240]	; (8001f88 <HAL_DFSDM_ChannelInit+0x17c>)
 8001e96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001e9a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001eaa:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6819      	ldr	r1, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001eba:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001ec0:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 020f 	bic.w	r2, r2, #15
 8001ed8:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6819      	ldr	r1, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001f00:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	6899      	ldr	r1, [r3, #8]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f10:	3b01      	subs	r3, #1
 8001f12:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001f14:	431a      	orrs	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f002 0207 	and.w	r2, r2, #7
 8001f2c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	6859      	ldr	r1, [r3, #4]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f38:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001f40:	431a      	orrs	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	430a      	orrs	r2, r1
 8001f48:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f58:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f000 f9ea 	bl	8002340 <DFSDM_GetChannelFromInstance>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	4904      	ldr	r1, [pc, #16]	; (8001f80 <HAL_DFSDM_ChannelInit+0x174>)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	2000f20c 	.word	0x2000f20c
 8001f84:	2000f208 	.word	0x2000f208
 8001f88:	40016000 	.word	0x40016000

08001f8c <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e0ca      	b.n	8002134 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a66      	ldr	r2, [pc, #408]	; (800213c <HAL_DFSDM_FilterInit+0x1b0>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d109      	bne.n	8001fbc <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d003      	beq.n	8001fb8 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d101      	bne.n	8001fbc <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e0bb      	b.n	8002134 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f7fe ffc7 	bl	8000f68 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8001fe8:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	7a1b      	ldrb	r3, [r3, #8]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d108      	bne.n	8002004 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	e007      	b.n	8002014 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002012:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	7a5b      	ldrb	r3, [r3, #9]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d108      	bne.n	800202e <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	e007      	b.n	800203e <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800203c:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	6812      	ldr	r2, [r2, #0]
 8002048:	f423 43ce 	bic.w	r3, r3, #26368	; 0x6700
 800204c:	f023 0308 	bic.w	r3, r3, #8
 8002050:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	2b02      	cmp	r3, #2
 8002058:	d108      	bne.n	800206c <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6819      	ldr	r1, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	695a      	ldr	r2, [r3, #20]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	430a      	orrs	r2, r1
 800206a:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	7c1b      	ldrb	r3, [r3, #16]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d108      	bne.n	8002086 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f042 0210 	orr.w	r2, r2, #16
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	e007      	b.n	8002096 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f022 0210 	bic.w	r2, r2, #16
 8002094:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	7c5b      	ldrb	r3, [r3, #17]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d108      	bne.n	80020b0 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f042 0220 	orr.w	r2, r2, #32
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	e007      	b.n	80020c0 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f022 0220 	bic.w	r2, r2, #32
 80020be:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	695b      	ldr	r3, [r3, #20]
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	6812      	ldr	r2, [r2, #0]
 80020ca:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 80020ce:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 80020d2:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6959      	ldr	r1, [r3, #20]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a1b      	ldr	r3, [r3, #32]
 80020e2:	3b01      	subs	r3, #1
 80020e4:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80020e6:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ec:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80020ee:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	430a      	orrs	r2, r1
 80020f6:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685a      	ldr	r2, [r3, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68da      	ldr	r2, [r3, #12]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	699a      	ldr	r2, [r3, #24]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	7c1a      	ldrb	r2, [r3, #16]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f042 0201 	orr.w	r2, r2, #1
 8002128:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2201      	movs	r2, #1
 800212e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8002132:	2300      	movs	r3, #0
}
 8002134:	4618      	mov	r0, r3
 8002136:	3708      	adds	r7, #8
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	40016100 	.word	0x40016100

08002140 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8002140:	b480      	push	{r7}
 8002142:	b087      	sub	sp, #28
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800214c:	2300      	movs	r3, #0
 800214e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002156:	2b00      	cmp	r3, #0
 8002158:	d02e      	beq.n	80021b8 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002160:	2bff      	cmp	r3, #255	; 0xff
 8002162:	d029      	beq.n	80021b8 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	6812      	ldr	r2, [r2, #0]
 800216e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002172:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002176:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d10d      	bne.n	800219a <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	021b      	lsls	r3, r3, #8
 8002188:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800218c:	431a      	orrs	r2, r3
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	e00a      	b.n	80021b0 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	6819      	ldr	r1, [r3, #0]
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	021b      	lsls	r3, r3, #8
 80021a4:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	430a      	orrs	r2, r1
 80021ae:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	631a      	str	r2, [r3, #48]	; 0x30
 80021b6:	e001      	b.n	80021bc <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 80021bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80021be:	4618      	mov	r0, r3
 80021c0:	371c      	adds	r7, #28
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
	...

080021cc <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021d8:	2300      	movs	r3, #0
 80021da:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d002      	beq.n	80021e8 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d102      	bne.n	80021ee <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	75fb      	strb	r3, [r7, #23]
 80021ec:	e064      	b.n	80022b8 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80021fc:	d002      	beq.n	8002204 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	75fb      	strb	r3, [r7, #23]
 8002202:	e059      	b.n	80022b8 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002208:	2b00      	cmp	r3, #0
 800220a:	d10e      	bne.n	800222a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002210:	2b00      	cmp	r3, #0
 8002212:	d10a      	bne.n	800222a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002218:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800221a:	2b00      	cmp	r3, #0
 800221c:	d105      	bne.n	800222a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d002      	beq.n	800222a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	75fb      	strb	r3, [r7, #23]
 8002228:	e046      	b.n	80022b8 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800222e:	2b00      	cmp	r3, #0
 8002230:	d10b      	bne.n	800224a <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002236:	2b00      	cmp	r3, #0
 8002238:	d107      	bne.n	800224a <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223e:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002240:	2b20      	cmp	r3, #32
 8002242:	d102      	bne.n	800224a <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	75fb      	strb	r3, [r7, #23]
 8002248:	e036      	b.n	80022b8 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002250:	2b01      	cmp	r3, #1
 8002252:	d004      	beq.n	800225e <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 800225a:	2b03      	cmp	r3, #3
 800225c:	d12a      	bne.n	80022b4 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002262:	4a18      	ldr	r2, [pc, #96]	; (80022c4 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 8002264:	62da      	str	r2, [r3, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226a:	4a17      	ldr	r2, [pc, #92]	; (80022c8 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 800226c:	635a      	str	r2, [r3, #52]	; 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002272:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8002274:	2b20      	cmp	r3, #32
 8002276:	d101      	bne.n	800227c <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 8002278:	4a14      	ldr	r2, [pc, #80]	; (80022cc <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 800227a:	e000      	b.n	800227e <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 800227c:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002282:	631a      	str	r2, [r3, #48]	; 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	331c      	adds	r3, #28
 800228e:	4619      	mov	r1, r3
 8002290:	68ba      	ldr	r2, [r7, #8]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f000 f9ae 	bl	80025f4 <HAL_DMA_Start_IT>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d006      	beq.n	80022ac <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	22ff      	movs	r2, #255	; 0xff
 80022a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80022aa:	e005      	b.n	80022b8 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	f000 f893 	bl	80023d8 <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80022b2:	e001      	b.n	80022b8 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 80022b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3718      	adds	r7, #24
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	08002301 	.word	0x08002301
 80022c8:	0800231d 	.word	0x0800231d
 80022cc:	080022e5 	.word	0x080022e5

080022d0 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f0:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	f7ff f9b8 	bl	8001668 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 80022f8:	bf00      	nop
 80022fa:	3710      	adds	r7, #16
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800230c:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 800230e:	68f8      	ldr	r0, [r7, #12]
 8002310:	f7ff f9b4 	bl	800167c <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8002314:	bf00      	nop
 8002316:	3710      	adds	r7, #16
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002328:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2203      	movs	r2, #3
 800232e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8002330:	68f8      	ldr	r0, [r7, #12]
 8002332:	f7ff ffcd 	bl	80022d0 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 8002336:	bf00      	nop
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
	...

08002340 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a1c      	ldr	r2, [pc, #112]	; (80023bc <DFSDM_GetChannelFromInstance+0x7c>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d102      	bne.n	8002356 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002350:	2300      	movs	r3, #0
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	e02b      	b.n	80023ae <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a19      	ldr	r2, [pc, #100]	; (80023c0 <DFSDM_GetChannelFromInstance+0x80>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d102      	bne.n	8002364 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800235e:	2301      	movs	r3, #1
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	e024      	b.n	80023ae <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a17      	ldr	r2, [pc, #92]	; (80023c4 <DFSDM_GetChannelFromInstance+0x84>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d102      	bne.n	8002372 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800236c:	2302      	movs	r3, #2
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	e01d      	b.n	80023ae <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a14      	ldr	r2, [pc, #80]	; (80023c8 <DFSDM_GetChannelFromInstance+0x88>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d102      	bne.n	8002380 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800237a:	2304      	movs	r3, #4
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	e016      	b.n	80023ae <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4a12      	ldr	r2, [pc, #72]	; (80023cc <DFSDM_GetChannelFromInstance+0x8c>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d102      	bne.n	800238e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002388:	2305      	movs	r3, #5
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	e00f      	b.n	80023ae <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a0f      	ldr	r2, [pc, #60]	; (80023d0 <DFSDM_GetChannelFromInstance+0x90>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d102      	bne.n	800239c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002396:	2306      	movs	r3, #6
 8002398:	60fb      	str	r3, [r7, #12]
 800239a:	e008      	b.n	80023ae <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a0d      	ldr	r2, [pc, #52]	; (80023d4 <DFSDM_GetChannelFromInstance+0x94>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d102      	bne.n	80023aa <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80023a4:	2307      	movs	r3, #7
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	e001      	b.n	80023ae <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80023aa:	2303      	movs	r3, #3
 80023ac:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80023ae:	68fb      	ldr	r3, [r7, #12]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3714      	adds	r7, #20
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	40016000 	.word	0x40016000
 80023c0:	40016020 	.word	0x40016020
 80023c4:	40016040 	.word	0x40016040
 80023c8:	40016080 	.word	0x40016080
 80023cc:	400160a0 	.word	0x400160a0
 80023d0:	400160c0 	.word	0x400160c0
 80023d4:	400160e0 	.word	0x400160e0

080023d8 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d108      	bne.n	80023fa <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	e033      	b.n	8002462 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 0201 	bic.w	r2, r2, #1
 8002408:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002418:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f042 0201 	orr.w	r2, r2, #1
 8002428:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002430:	2b03      	cmp	r3, #3
 8002432:	d116      	bne.n	8002462 <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002438:	2b00      	cmp	r3, #0
 800243a:	d107      	bne.n	800244c <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f042 0202 	orr.w	r2, r2, #2
 800244a:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8002452:	2b01      	cmp	r3, #1
 8002454:	d102      	bne.n	800245c <DFSDM_RegConvStart+0x84>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245a:	e000      	b.n	800245e <DFSDM_RegConvStart+0x86>
 800245c:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8002468:	2b01      	cmp	r3, #1
 800246a:	d101      	bne.n	8002470 <DFSDM_RegConvStart+0x98>
 800246c:	2202      	movs	r2, #2
 800246e:	e000      	b.n	8002472 <DFSDM_RegConvStart+0x9a>
 8002470:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e098      	b.n	80025c8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	461a      	mov	r2, r3
 800249c:	4b4d      	ldr	r3, [pc, #308]	; (80025d4 <HAL_DMA_Init+0x150>)
 800249e:	429a      	cmp	r2, r3
 80024a0:	d80f      	bhi.n	80024c2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	461a      	mov	r2, r3
 80024a8:	4b4b      	ldr	r3, [pc, #300]	; (80025d8 <HAL_DMA_Init+0x154>)
 80024aa:	4413      	add	r3, r2
 80024ac:	4a4b      	ldr	r2, [pc, #300]	; (80025dc <HAL_DMA_Init+0x158>)
 80024ae:	fba2 2303 	umull	r2, r3, r2, r3
 80024b2:	091b      	lsrs	r3, r3, #4
 80024b4:	009a      	lsls	r2, r3, #2
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a48      	ldr	r2, [pc, #288]	; (80025e0 <HAL_DMA_Init+0x15c>)
 80024be:	641a      	str	r2, [r3, #64]	; 0x40
 80024c0:	e00e      	b.n	80024e0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	461a      	mov	r2, r3
 80024c8:	4b46      	ldr	r3, [pc, #280]	; (80025e4 <HAL_DMA_Init+0x160>)
 80024ca:	4413      	add	r3, r2
 80024cc:	4a43      	ldr	r2, [pc, #268]	; (80025dc <HAL_DMA_Init+0x158>)
 80024ce:	fba2 2303 	umull	r2, r3, r2, r3
 80024d2:	091b      	lsrs	r3, r3, #4
 80024d4:	009a      	lsls	r2, r3, #2
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a42      	ldr	r2, [pc, #264]	; (80025e8 <HAL_DMA_Init+0x164>)
 80024de:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2202      	movs	r2, #2
 80024e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80024f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024fa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002504:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002510:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800251c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	4313      	orrs	r3, r2
 8002528:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800253a:	d039      	beq.n	80025b0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002540:	4a27      	ldr	r2, [pc, #156]	; (80025e0 <HAL_DMA_Init+0x15c>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d11a      	bne.n	800257c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002546:	4b29      	ldr	r3, [pc, #164]	; (80025ec <HAL_DMA_Init+0x168>)
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254e:	f003 031c 	and.w	r3, r3, #28
 8002552:	210f      	movs	r1, #15
 8002554:	fa01 f303 	lsl.w	r3, r1, r3
 8002558:	43db      	mvns	r3, r3
 800255a:	4924      	ldr	r1, [pc, #144]	; (80025ec <HAL_DMA_Init+0x168>)
 800255c:	4013      	ands	r3, r2
 800255e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002560:	4b22      	ldr	r3, [pc, #136]	; (80025ec <HAL_DMA_Init+0x168>)
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6859      	ldr	r1, [r3, #4]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256c:	f003 031c 	and.w	r3, r3, #28
 8002570:	fa01 f303 	lsl.w	r3, r1, r3
 8002574:	491d      	ldr	r1, [pc, #116]	; (80025ec <HAL_DMA_Init+0x168>)
 8002576:	4313      	orrs	r3, r2
 8002578:	600b      	str	r3, [r1, #0]
 800257a:	e019      	b.n	80025b0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800257c:	4b1c      	ldr	r3, [pc, #112]	; (80025f0 <HAL_DMA_Init+0x16c>)
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002584:	f003 031c 	and.w	r3, r3, #28
 8002588:	210f      	movs	r1, #15
 800258a:	fa01 f303 	lsl.w	r3, r1, r3
 800258e:	43db      	mvns	r3, r3
 8002590:	4917      	ldr	r1, [pc, #92]	; (80025f0 <HAL_DMA_Init+0x16c>)
 8002592:	4013      	ands	r3, r2
 8002594:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002596:	4b16      	ldr	r3, [pc, #88]	; (80025f0 <HAL_DMA_Init+0x16c>)
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6859      	ldr	r1, [r3, #4]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a2:	f003 031c 	and.w	r3, r3, #28
 80025a6:	fa01 f303 	lsl.w	r3, r1, r3
 80025aa:	4911      	ldr	r1, [pc, #68]	; (80025f0 <HAL_DMA_Init+0x16c>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2201      	movs	r2, #1
 80025ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3714      	adds	r7, #20
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr
 80025d4:	40020407 	.word	0x40020407
 80025d8:	bffdfff8 	.word	0xbffdfff8
 80025dc:	cccccccd 	.word	0xcccccccd
 80025e0:	40020000 	.word	0x40020000
 80025e4:	bffdfbf8 	.word	0xbffdfbf8
 80025e8:	40020400 	.word	0x40020400
 80025ec:	400200a8 	.word	0x400200a8
 80025f0:	400204a8 	.word	0x400204a8

080025f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
 8002600:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002602:	2300      	movs	r3, #0
 8002604:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800260c:	2b01      	cmp	r3, #1
 800260e:	d101      	bne.n	8002614 <HAL_DMA_Start_IT+0x20>
 8002610:	2302      	movs	r3, #2
 8002612:	e04b      	b.n	80026ac <HAL_DMA_Start_IT+0xb8>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002622:	b2db      	uxtb	r3, r3
 8002624:	2b01      	cmp	r3, #1
 8002626:	d13a      	bne.n	800269e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2202      	movs	r2, #2
 800262c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2200      	movs	r2, #0
 8002634:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 0201 	bic.w	r2, r2, #1
 8002644:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	68b9      	ldr	r1, [r7, #8]
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f000 f8e0 	bl	8002812 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002656:	2b00      	cmp	r3, #0
 8002658:	d008      	beq.n	800266c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f042 020e 	orr.w	r2, r2, #14
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	e00f      	b.n	800268c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f022 0204 	bic.w	r2, r2, #4
 800267a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f042 020a 	orr.w	r2, r2, #10
 800268a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f042 0201 	orr.w	r2, r2, #1
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	e005      	b.n	80026aa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80026a6:	2302      	movs	r3, #2
 80026a8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80026aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3718      	adds	r7, #24
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d0:	f003 031c 	and.w	r3, r3, #28
 80026d4:	2204      	movs	r2, #4
 80026d6:	409a      	lsls	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	4013      	ands	r3, r2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d026      	beq.n	800272e <HAL_DMA_IRQHandler+0x7a>
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	f003 0304 	and.w	r3, r3, #4
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d021      	beq.n	800272e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0320 	and.w	r3, r3, #32
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d107      	bne.n	8002708 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f022 0204 	bic.w	r2, r2, #4
 8002706:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270c:	f003 021c 	and.w	r2, r3, #28
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002714:	2104      	movs	r1, #4
 8002716:	fa01 f202 	lsl.w	r2, r1, r2
 800271a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002720:	2b00      	cmp	r3, #0
 8002722:	d071      	beq.n	8002808 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800272c:	e06c      	b.n	8002808 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002732:	f003 031c 	and.w	r3, r3, #28
 8002736:	2202      	movs	r2, #2
 8002738:	409a      	lsls	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	4013      	ands	r3, r2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d02e      	beq.n	80027a0 <HAL_DMA_IRQHandler+0xec>
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d029      	beq.n	80027a0 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0320 	and.w	r3, r3, #32
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10b      	bne.n	8002772 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f022 020a 	bic.w	r2, r2, #10
 8002768:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002776:	f003 021c 	and.w	r2, r3, #28
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	2102      	movs	r1, #2
 8002780:	fa01 f202 	lsl.w	r2, r1, r2
 8002784:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002792:	2b00      	cmp	r3, #0
 8002794:	d038      	beq.n	8002808 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800279e:	e033      	b.n	8002808 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a4:	f003 031c 	and.w	r3, r3, #28
 80027a8:	2208      	movs	r2, #8
 80027aa:	409a      	lsls	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	4013      	ands	r3, r2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d02a      	beq.n	800280a <HAL_DMA_IRQHandler+0x156>
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	f003 0308 	and.w	r3, r3, #8
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d025      	beq.n	800280a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f022 020e 	bic.w	r2, r2, #14
 80027cc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d2:	f003 021c 	and.w	r2, r3, #28
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	2101      	movs	r1, #1
 80027dc:	fa01 f202 	lsl.w	r2, r1, r2
 80027e0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2201      	movs	r2, #1
 80027e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d004      	beq.n	800280a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002808:	bf00      	nop
 800280a:	bf00      	nop
}
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002812:	b480      	push	{r7}
 8002814:	b085      	sub	sp, #20
 8002816:	af00      	add	r7, sp, #0
 8002818:	60f8      	str	r0, [r7, #12]
 800281a:	60b9      	str	r1, [r7, #8]
 800281c:	607a      	str	r2, [r7, #4]
 800281e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002824:	f003 021c 	and.w	r2, r3, #28
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282c:	2101      	movs	r1, #1
 800282e:	fa01 f202 	lsl.w	r2, r1, r2
 8002832:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	2b10      	cmp	r3, #16
 8002842:	d108      	bne.n	8002856 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68ba      	ldr	r2, [r7, #8]
 8002852:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002854:	e007      	b.n	8002866 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68ba      	ldr	r2, [r7, #8]
 800285c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	60da      	str	r2, [r3, #12]
}
 8002866:	bf00      	nop
 8002868:	3714      	adds	r7, #20
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
	...

08002874 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002874:	b480      	push	{r7}
 8002876:	b087      	sub	sp, #28
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800287e:	2300      	movs	r3, #0
 8002880:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002882:	e17f      	b.n	8002b84 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	2101      	movs	r1, #1
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	fa01 f303 	lsl.w	r3, r1, r3
 8002890:	4013      	ands	r3, r2
 8002892:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2b00      	cmp	r3, #0
 8002898:	f000 8171 	beq.w	8002b7e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d00b      	beq.n	80028bc <HAL_GPIO_Init+0x48>
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d007      	beq.n	80028bc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028b0:	2b11      	cmp	r3, #17
 80028b2:	d003      	beq.n	80028bc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	2b12      	cmp	r3, #18
 80028ba:	d130      	bne.n	800291e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	2203      	movs	r2, #3
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	43db      	mvns	r3, r3
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	4013      	ands	r3, r2
 80028d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	68da      	ldr	r2, [r3, #12]
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028f2:	2201      	movs	r2, #1
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	43db      	mvns	r3, r3
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	4013      	ands	r3, r2
 8002900:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	091b      	lsrs	r3, r3, #4
 8002908:	f003 0201 	and.w	r2, r3, #1
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	4313      	orrs	r3, r2
 8002916:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f003 0303 	and.w	r3, r3, #3
 8002926:	2b03      	cmp	r3, #3
 8002928:	d118      	bne.n	800295c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002930:	2201      	movs	r2, #1
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	43db      	mvns	r3, r3
 800293a:	693a      	ldr	r2, [r7, #16]
 800293c:	4013      	ands	r3, r2
 800293e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	08db      	lsrs	r3, r3, #3
 8002946:	f003 0201 	and.w	r2, r3, #1
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	4313      	orrs	r3, r2
 8002954:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	693a      	ldr	r2, [r7, #16]
 800295a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	2203      	movs	r2, #3
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	43db      	mvns	r3, r3
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	4013      	ands	r3, r2
 8002972:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	693a      	ldr	r2, [r7, #16]
 8002982:	4313      	orrs	r3, r2
 8002984:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	2b02      	cmp	r3, #2
 8002992:	d003      	beq.n	800299c <HAL_GPIO_Init+0x128>
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	2b12      	cmp	r3, #18
 800299a:	d123      	bne.n	80029e4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	08da      	lsrs	r2, r3, #3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	3208      	adds	r2, #8
 80029a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	220f      	movs	r2, #15
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	43db      	mvns	r3, r3
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	4013      	ands	r3, r2
 80029be:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	691a      	ldr	r2, [r3, #16]
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	08da      	lsrs	r2, r3, #3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	3208      	adds	r2, #8
 80029de:	6939      	ldr	r1, [r7, #16]
 80029e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	2203      	movs	r2, #3
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	43db      	mvns	r3, r3
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	4013      	ands	r3, r2
 80029fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f003 0203 	and.w	r2, r3, #3
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f000 80ac 	beq.w	8002b7e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a26:	4b5f      	ldr	r3, [pc, #380]	; (8002ba4 <HAL_GPIO_Init+0x330>)
 8002a28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a2a:	4a5e      	ldr	r2, [pc, #376]	; (8002ba4 <HAL_GPIO_Init+0x330>)
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	6613      	str	r3, [r2, #96]	; 0x60
 8002a32:	4b5c      	ldr	r3, [pc, #368]	; (8002ba4 <HAL_GPIO_Init+0x330>)
 8002a34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	60bb      	str	r3, [r7, #8]
 8002a3c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a3e:	4a5a      	ldr	r2, [pc, #360]	; (8002ba8 <HAL_GPIO_Init+0x334>)
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	089b      	lsrs	r3, r3, #2
 8002a44:	3302      	adds	r3, #2
 8002a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	f003 0303 	and.w	r3, r3, #3
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	220f      	movs	r2, #15
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	43db      	mvns	r3, r3
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a68:	d025      	beq.n	8002ab6 <HAL_GPIO_Init+0x242>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a4f      	ldr	r2, [pc, #316]	; (8002bac <HAL_GPIO_Init+0x338>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d01f      	beq.n	8002ab2 <HAL_GPIO_Init+0x23e>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a4e      	ldr	r2, [pc, #312]	; (8002bb0 <HAL_GPIO_Init+0x33c>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d019      	beq.n	8002aae <HAL_GPIO_Init+0x23a>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a4d      	ldr	r2, [pc, #308]	; (8002bb4 <HAL_GPIO_Init+0x340>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d013      	beq.n	8002aaa <HAL_GPIO_Init+0x236>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a4c      	ldr	r2, [pc, #304]	; (8002bb8 <HAL_GPIO_Init+0x344>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d00d      	beq.n	8002aa6 <HAL_GPIO_Init+0x232>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a4b      	ldr	r2, [pc, #300]	; (8002bbc <HAL_GPIO_Init+0x348>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d007      	beq.n	8002aa2 <HAL_GPIO_Init+0x22e>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a4a      	ldr	r2, [pc, #296]	; (8002bc0 <HAL_GPIO_Init+0x34c>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d101      	bne.n	8002a9e <HAL_GPIO_Init+0x22a>
 8002a9a:	2306      	movs	r3, #6
 8002a9c:	e00c      	b.n	8002ab8 <HAL_GPIO_Init+0x244>
 8002a9e:	2307      	movs	r3, #7
 8002aa0:	e00a      	b.n	8002ab8 <HAL_GPIO_Init+0x244>
 8002aa2:	2305      	movs	r3, #5
 8002aa4:	e008      	b.n	8002ab8 <HAL_GPIO_Init+0x244>
 8002aa6:	2304      	movs	r3, #4
 8002aa8:	e006      	b.n	8002ab8 <HAL_GPIO_Init+0x244>
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e004      	b.n	8002ab8 <HAL_GPIO_Init+0x244>
 8002aae:	2302      	movs	r3, #2
 8002ab0:	e002      	b.n	8002ab8 <HAL_GPIO_Init+0x244>
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e000      	b.n	8002ab8 <HAL_GPIO_Init+0x244>
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	697a      	ldr	r2, [r7, #20]
 8002aba:	f002 0203 	and.w	r2, r2, #3
 8002abe:	0092      	lsls	r2, r2, #2
 8002ac0:	4093      	lsls	r3, r2
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ac8:	4937      	ldr	r1, [pc, #220]	; (8002ba8 <HAL_GPIO_Init+0x334>)
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	089b      	lsrs	r3, r3, #2
 8002ace:	3302      	adds	r3, #2
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002ad6:	4b3b      	ldr	r3, [pc, #236]	; (8002bc4 <HAL_GPIO_Init+0x350>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002afa:	4a32      	ldr	r2, [pc, #200]	; (8002bc4 <HAL_GPIO_Init+0x350>)
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002b00:	4b30      	ldr	r3, [pc, #192]	; (8002bc4 <HAL_GPIO_Init+0x350>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d003      	beq.n	8002b24 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b24:	4a27      	ldr	r2, [pc, #156]	; (8002bc4 <HAL_GPIO_Init+0x350>)
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b2a:	4b26      	ldr	r3, [pc, #152]	; (8002bc4 <HAL_GPIO_Init+0x350>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	43db      	mvns	r3, r3
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	4013      	ands	r3, r2
 8002b38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d003      	beq.n	8002b4e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b4e:	4a1d      	ldr	r2, [pc, #116]	; (8002bc4 <HAL_GPIO_Init+0x350>)
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b54:	4b1b      	ldr	r3, [pc, #108]	; (8002bc4 <HAL_GPIO_Init+0x350>)
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	43db      	mvns	r3, r3
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	4013      	ands	r3, r2
 8002b62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d003      	beq.n	8002b78 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002b70:	693a      	ldr	r2, [r7, #16]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b78:	4a12      	ldr	r2, [pc, #72]	; (8002bc4 <HAL_GPIO_Init+0x350>)
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	3301      	adds	r3, #1
 8002b82:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f47f ae78 	bne.w	8002884 <HAL_GPIO_Init+0x10>
  }
}
 8002b94:	bf00      	nop
 8002b96:	bf00      	nop
 8002b98:	371c      	adds	r7, #28
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	40010000 	.word	0x40010000
 8002bac:	48000400 	.word	0x48000400
 8002bb0:	48000800 	.word	0x48000800
 8002bb4:	48000c00 	.word	0x48000c00
 8002bb8:	48001000 	.word	0x48001000
 8002bbc:	48001400 	.word	0x48001400
 8002bc0:	48001800 	.word	0x48001800
 8002bc4:	40010400 	.word	0x40010400

08002bc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	807b      	strh	r3, [r7, #2]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bd8:	787b      	ldrb	r3, [r7, #1]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d003      	beq.n	8002be6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bde:	887a      	ldrh	r2, [r7, #2]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002be4:	e002      	b.n	8002bec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002be6:	887a      	ldrh	r2, [r7, #2]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002bfc:	4b04      	ldr	r3, [pc, #16]	; (8002c10 <HAL_PWREx_GetVoltageRange+0x18>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	40007000 	.word	0x40007000

08002c14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c22:	d130      	bne.n	8002c86 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c24:	4b23      	ldr	r3, [pc, #140]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c30:	d038      	beq.n	8002ca4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c32:	4b20      	ldr	r3, [pc, #128]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c3a:	4a1e      	ldr	r2, [pc, #120]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c40:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c42:	4b1d      	ldr	r3, [pc, #116]	; (8002cb8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2232      	movs	r2, #50	; 0x32
 8002c48:	fb02 f303 	mul.w	r3, r2, r3
 8002c4c:	4a1b      	ldr	r2, [pc, #108]	; (8002cbc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c52:	0c9b      	lsrs	r3, r3, #18
 8002c54:	3301      	adds	r3, #1
 8002c56:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c58:	e002      	b.n	8002c60 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c60:	4b14      	ldr	r3, [pc, #80]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c62:	695b      	ldr	r3, [r3, #20]
 8002c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c6c:	d102      	bne.n	8002c74 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d1f2      	bne.n	8002c5a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c74:	4b0f      	ldr	r3, [pc, #60]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c76:	695b      	ldr	r3, [r3, #20]
 8002c78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c80:	d110      	bne.n	8002ca4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e00f      	b.n	8002ca6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c86:	4b0b      	ldr	r3, [pc, #44]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c92:	d007      	beq.n	8002ca4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c94:	4b07      	ldr	r3, [pc, #28]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c9c:	4a05      	ldr	r2, [pc, #20]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ca2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3714      	adds	r7, #20
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	40007000 	.word	0x40007000
 8002cb8:	20000004 	.word	0x20000004
 8002cbc:	431bde83 	.word	0x431bde83

08002cc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b088      	sub	sp, #32
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e3d4      	b.n	800347c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cd2:	4ba1      	ldr	r3, [pc, #644]	; (8002f58 <HAL_RCC_OscConfig+0x298>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 030c 	and.w	r3, r3, #12
 8002cda:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cdc:	4b9e      	ldr	r3, [pc, #632]	; (8002f58 <HAL_RCC_OscConfig+0x298>)
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	f003 0303 	and.w	r3, r3, #3
 8002ce4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0310 	and.w	r3, r3, #16
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f000 80e4 	beq.w	8002ebc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d007      	beq.n	8002d0a <HAL_RCC_OscConfig+0x4a>
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	2b0c      	cmp	r3, #12
 8002cfe:	f040 808b 	bne.w	8002e18 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	f040 8087 	bne.w	8002e18 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d0a:	4b93      	ldr	r3, [pc, #588]	; (8002f58 <HAL_RCC_OscConfig+0x298>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d005      	beq.n	8002d22 <HAL_RCC_OscConfig+0x62>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e3ac      	b.n	800347c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a1a      	ldr	r2, [r3, #32]
 8002d26:	4b8c      	ldr	r3, [pc, #560]	; (8002f58 <HAL_RCC_OscConfig+0x298>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0308 	and.w	r3, r3, #8
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d004      	beq.n	8002d3c <HAL_RCC_OscConfig+0x7c>
 8002d32:	4b89      	ldr	r3, [pc, #548]	; (8002f58 <HAL_RCC_OscConfig+0x298>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d3a:	e005      	b.n	8002d48 <HAL_RCC_OscConfig+0x88>
 8002d3c:	4b86      	ldr	r3, [pc, #536]	; (8002f58 <HAL_RCC_OscConfig+0x298>)
 8002d3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d42:	091b      	lsrs	r3, r3, #4
 8002d44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d223      	bcs.n	8002d94 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a1b      	ldr	r3, [r3, #32]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f000 fd41 	bl	80037d8 <RCC_SetFlashLatencyFromMSIRange>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e38d      	b.n	800347c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d60:	4b7d      	ldr	r3, [pc, #500]	; (8002f58 <HAL_RCC_OscConfig+0x298>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a7c      	ldr	r2, [pc, #496]	; (8002f58 <HAL_RCC_OscConfig+0x298>)
 8002d66:	f043 0308 	orr.w	r3, r3, #8
 8002d6a:	6013      	str	r3, [r2, #0]
 8002d6c:	4b7a      	ldr	r3, [pc, #488]	; (8002f58 <HAL_RCC_OscConfig+0x298>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	4977      	ldr	r1, [pc, #476]	; (8002f58 <HAL_RCC_OscConfig+0x298>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d7e:	4b76      	ldr	r3, [pc, #472]	; (8002f58 <HAL_RCC_OscConfig+0x298>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	69db      	ldr	r3, [r3, #28]
 8002d8a:	021b      	lsls	r3, r3, #8
 8002d8c:	4972      	ldr	r1, [pc, #456]	; (8002f58 <HAL_RCC_OscConfig+0x298>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	604b      	str	r3, [r1, #4]
 8002d92:	e025      	b.n	8002de0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d94:	4b70      	ldr	r3, [pc, #448]	; (8002f58 <HAL_RCC_OscConfig+0x298>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a6f      	ldr	r2, [pc, #444]	; (8002f58 <HAL_RCC_OscConfig+0x298>)
 8002d9a:	f043 0308 	orr.w	r3, r3, #8
 8002d9e:	6013      	str	r3, [r2, #0]
 8002da0:	4b6d      	ldr	r3, [pc, #436]	; (8002f58 <HAL_RCC_OscConfig+0x298>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	496a      	ldr	r1, [pc, #424]	; (8002f58 <HAL_RCC_OscConfig+0x298>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002db2:	4b69      	ldr	r3, [pc, #420]	; (8002f58 <HAL_RCC_OscConfig+0x298>)
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	69db      	ldr	r3, [r3, #28]
 8002dbe:	021b      	lsls	r3, r3, #8
 8002dc0:	4965      	ldr	r1, [pc, #404]	; (8002f58 <HAL_RCC_OscConfig+0x298>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d109      	bne.n	8002de0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a1b      	ldr	r3, [r3, #32]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f000 fd01 	bl	80037d8 <RCC_SetFlashLatencyFromMSIRange>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d001      	beq.n	8002de0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e34d      	b.n	800347c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002de0:	f000 fc36 	bl	8003650 <HAL_RCC_GetSysClockFreq>
 8002de4:	4602      	mov	r2, r0
 8002de6:	4b5c      	ldr	r3, [pc, #368]	; (8002f58 <HAL_RCC_OscConfig+0x298>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	091b      	lsrs	r3, r3, #4
 8002dec:	f003 030f 	and.w	r3, r3, #15
 8002df0:	495a      	ldr	r1, [pc, #360]	; (8002f5c <HAL_RCC_OscConfig+0x29c>)
 8002df2:	5ccb      	ldrb	r3, [r1, r3]
 8002df4:	f003 031f 	and.w	r3, r3, #31
 8002df8:	fa22 f303 	lsr.w	r3, r2, r3
 8002dfc:	4a58      	ldr	r2, [pc, #352]	; (8002f60 <HAL_RCC_OscConfig+0x2a0>)
 8002dfe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002e00:	4b58      	ldr	r3, [pc, #352]	; (8002f64 <HAL_RCC_OscConfig+0x2a4>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7fe fe6f 	bl	8001ae8 <HAL_InitTick>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002e0e:	7bfb      	ldrb	r3, [r7, #15]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d052      	beq.n	8002eba <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002e14:	7bfb      	ldrb	r3, [r7, #15]
 8002e16:	e331      	b.n	800347c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d032      	beq.n	8002e86 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e20:	4b4d      	ldr	r3, [pc, #308]	; (8002f58 <HAL_RCC_OscConfig+0x298>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a4c      	ldr	r2, [pc, #304]	; (8002f58 <HAL_RCC_OscConfig+0x298>)
 8002e26:	f043 0301 	orr.w	r3, r3, #1
 8002e2a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e2c:	f7fe feac 	bl	8001b88 <HAL_GetTick>
 8002e30:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e32:	e008      	b.n	8002e46 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e34:	f7fe fea8 	bl	8001b88 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e31a      	b.n	800347c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e46:	4b44      	ldr	r3, [pc, #272]	; (8002f58 <HAL_RCC_OscConfig+0x298>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d0f0      	beq.n	8002e34 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e52:	4b41      	ldr	r3, [pc, #260]	; (8002f58 <HAL_RCC_OscConfig+0x298>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a40      	ldr	r2, [pc, #256]	; (8002f58 <HAL_RCC_OscConfig+0x298>)
 8002e58:	f043 0308 	orr.w	r3, r3, #8
 8002e5c:	6013      	str	r3, [r2, #0]
 8002e5e:	4b3e      	ldr	r3, [pc, #248]	; (8002f58 <HAL_RCC_OscConfig+0x298>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a1b      	ldr	r3, [r3, #32]
 8002e6a:	493b      	ldr	r1, [pc, #236]	; (8002f58 <HAL_RCC_OscConfig+0x298>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e70:	4b39      	ldr	r3, [pc, #228]	; (8002f58 <HAL_RCC_OscConfig+0x298>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	69db      	ldr	r3, [r3, #28]
 8002e7c:	021b      	lsls	r3, r3, #8
 8002e7e:	4936      	ldr	r1, [pc, #216]	; (8002f58 <HAL_RCC_OscConfig+0x298>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	604b      	str	r3, [r1, #4]
 8002e84:	e01a      	b.n	8002ebc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e86:	4b34      	ldr	r3, [pc, #208]	; (8002f58 <HAL_RCC_OscConfig+0x298>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a33      	ldr	r2, [pc, #204]	; (8002f58 <HAL_RCC_OscConfig+0x298>)
 8002e8c:	f023 0301 	bic.w	r3, r3, #1
 8002e90:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e92:	f7fe fe79 	bl	8001b88 <HAL_GetTick>
 8002e96:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e98:	e008      	b.n	8002eac <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e9a:	f7fe fe75 	bl	8001b88 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d901      	bls.n	8002eac <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e2e7      	b.n	800347c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002eac:	4b2a      	ldr	r3, [pc, #168]	; (8002f58 <HAL_RCC_OscConfig+0x298>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1f0      	bne.n	8002e9a <HAL_RCC_OscConfig+0x1da>
 8002eb8:	e000      	b.n	8002ebc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002eba:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d074      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	2b08      	cmp	r3, #8
 8002ecc:	d005      	beq.n	8002eda <HAL_RCC_OscConfig+0x21a>
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	2b0c      	cmp	r3, #12
 8002ed2:	d10e      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	2b03      	cmp	r3, #3
 8002ed8:	d10b      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eda:	4b1f      	ldr	r3, [pc, #124]	; (8002f58 <HAL_RCC_OscConfig+0x298>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d064      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x2f0>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d160      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e2c4      	b.n	800347c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002efa:	d106      	bne.n	8002f0a <HAL_RCC_OscConfig+0x24a>
 8002efc:	4b16      	ldr	r3, [pc, #88]	; (8002f58 <HAL_RCC_OscConfig+0x298>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a15      	ldr	r2, [pc, #84]	; (8002f58 <HAL_RCC_OscConfig+0x298>)
 8002f02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f06:	6013      	str	r3, [r2, #0]
 8002f08:	e01d      	b.n	8002f46 <HAL_RCC_OscConfig+0x286>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f12:	d10c      	bne.n	8002f2e <HAL_RCC_OscConfig+0x26e>
 8002f14:	4b10      	ldr	r3, [pc, #64]	; (8002f58 <HAL_RCC_OscConfig+0x298>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a0f      	ldr	r2, [pc, #60]	; (8002f58 <HAL_RCC_OscConfig+0x298>)
 8002f1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f1e:	6013      	str	r3, [r2, #0]
 8002f20:	4b0d      	ldr	r3, [pc, #52]	; (8002f58 <HAL_RCC_OscConfig+0x298>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a0c      	ldr	r2, [pc, #48]	; (8002f58 <HAL_RCC_OscConfig+0x298>)
 8002f26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f2a:	6013      	str	r3, [r2, #0]
 8002f2c:	e00b      	b.n	8002f46 <HAL_RCC_OscConfig+0x286>
 8002f2e:	4b0a      	ldr	r3, [pc, #40]	; (8002f58 <HAL_RCC_OscConfig+0x298>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a09      	ldr	r2, [pc, #36]	; (8002f58 <HAL_RCC_OscConfig+0x298>)
 8002f34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f38:	6013      	str	r3, [r2, #0]
 8002f3a:	4b07      	ldr	r3, [pc, #28]	; (8002f58 <HAL_RCC_OscConfig+0x298>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a06      	ldr	r2, [pc, #24]	; (8002f58 <HAL_RCC_OscConfig+0x298>)
 8002f40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f44:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d01c      	beq.n	8002f88 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f4e:	f7fe fe1b 	bl	8001b88 <HAL_GetTick>
 8002f52:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f54:	e011      	b.n	8002f7a <HAL_RCC_OscConfig+0x2ba>
 8002f56:	bf00      	nop
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	08008f38 	.word	0x08008f38
 8002f60:	20000004 	.word	0x20000004
 8002f64:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f68:	f7fe fe0e 	bl	8001b88 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b64      	cmp	r3, #100	; 0x64
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e280      	b.n	800347c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f7a:	4baf      	ldr	r3, [pc, #700]	; (8003238 <HAL_RCC_OscConfig+0x578>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d0f0      	beq.n	8002f68 <HAL_RCC_OscConfig+0x2a8>
 8002f86:	e014      	b.n	8002fb2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f88:	f7fe fdfe 	bl	8001b88 <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f90:	f7fe fdfa 	bl	8001b88 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b64      	cmp	r3, #100	; 0x64
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e26c      	b.n	800347c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fa2:	4ba5      	ldr	r3, [pc, #660]	; (8003238 <HAL_RCC_OscConfig+0x578>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1f0      	bne.n	8002f90 <HAL_RCC_OscConfig+0x2d0>
 8002fae:	e000      	b.n	8002fb2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d060      	beq.n	8003080 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	2b04      	cmp	r3, #4
 8002fc2:	d005      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x310>
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	2b0c      	cmp	r3, #12
 8002fc8:	d119      	bne.n	8002ffe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d116      	bne.n	8002ffe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fd0:	4b99      	ldr	r3, [pc, #612]	; (8003238 <HAL_RCC_OscConfig+0x578>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d005      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x328>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d101      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e249      	b.n	800347c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fe8:	4b93      	ldr	r3, [pc, #588]	; (8003238 <HAL_RCC_OscConfig+0x578>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	061b      	lsls	r3, r3, #24
 8002ff6:	4990      	ldr	r1, [pc, #576]	; (8003238 <HAL_RCC_OscConfig+0x578>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ffc:	e040      	b.n	8003080 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d023      	beq.n	800304e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003006:	4b8c      	ldr	r3, [pc, #560]	; (8003238 <HAL_RCC_OscConfig+0x578>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a8b      	ldr	r2, [pc, #556]	; (8003238 <HAL_RCC_OscConfig+0x578>)
 800300c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003010:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003012:	f7fe fdb9 	bl	8001b88 <HAL_GetTick>
 8003016:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003018:	e008      	b.n	800302c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800301a:	f7fe fdb5 	bl	8001b88 <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	2b02      	cmp	r3, #2
 8003026:	d901      	bls.n	800302c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e227      	b.n	800347c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800302c:	4b82      	ldr	r3, [pc, #520]	; (8003238 <HAL_RCC_OscConfig+0x578>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003034:	2b00      	cmp	r3, #0
 8003036:	d0f0      	beq.n	800301a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003038:	4b7f      	ldr	r3, [pc, #508]	; (8003238 <HAL_RCC_OscConfig+0x578>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	691b      	ldr	r3, [r3, #16]
 8003044:	061b      	lsls	r3, r3, #24
 8003046:	497c      	ldr	r1, [pc, #496]	; (8003238 <HAL_RCC_OscConfig+0x578>)
 8003048:	4313      	orrs	r3, r2
 800304a:	604b      	str	r3, [r1, #4]
 800304c:	e018      	b.n	8003080 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800304e:	4b7a      	ldr	r3, [pc, #488]	; (8003238 <HAL_RCC_OscConfig+0x578>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a79      	ldr	r2, [pc, #484]	; (8003238 <HAL_RCC_OscConfig+0x578>)
 8003054:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003058:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800305a:	f7fe fd95 	bl	8001b88 <HAL_GetTick>
 800305e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003060:	e008      	b.n	8003074 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003062:	f7fe fd91 	bl	8001b88 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d901      	bls.n	8003074 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e203      	b.n	800347c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003074:	4b70      	ldr	r3, [pc, #448]	; (8003238 <HAL_RCC_OscConfig+0x578>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800307c:	2b00      	cmp	r3, #0
 800307e:	d1f0      	bne.n	8003062 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0308 	and.w	r3, r3, #8
 8003088:	2b00      	cmp	r3, #0
 800308a:	d03c      	beq.n	8003106 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	695b      	ldr	r3, [r3, #20]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d01c      	beq.n	80030ce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003094:	4b68      	ldr	r3, [pc, #416]	; (8003238 <HAL_RCC_OscConfig+0x578>)
 8003096:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800309a:	4a67      	ldr	r2, [pc, #412]	; (8003238 <HAL_RCC_OscConfig+0x578>)
 800309c:	f043 0301 	orr.w	r3, r3, #1
 80030a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a4:	f7fe fd70 	bl	8001b88 <HAL_GetTick>
 80030a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030aa:	e008      	b.n	80030be <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030ac:	f7fe fd6c 	bl	8001b88 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e1de      	b.n	800347c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030be:	4b5e      	ldr	r3, [pc, #376]	; (8003238 <HAL_RCC_OscConfig+0x578>)
 80030c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d0ef      	beq.n	80030ac <HAL_RCC_OscConfig+0x3ec>
 80030cc:	e01b      	b.n	8003106 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030ce:	4b5a      	ldr	r3, [pc, #360]	; (8003238 <HAL_RCC_OscConfig+0x578>)
 80030d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030d4:	4a58      	ldr	r2, [pc, #352]	; (8003238 <HAL_RCC_OscConfig+0x578>)
 80030d6:	f023 0301 	bic.w	r3, r3, #1
 80030da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030de:	f7fe fd53 	bl	8001b88 <HAL_GetTick>
 80030e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030e4:	e008      	b.n	80030f8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030e6:	f7fe fd4f 	bl	8001b88 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d901      	bls.n	80030f8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e1c1      	b.n	800347c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030f8:	4b4f      	ldr	r3, [pc, #316]	; (8003238 <HAL_RCC_OscConfig+0x578>)
 80030fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1ef      	bne.n	80030e6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0304 	and.w	r3, r3, #4
 800310e:	2b00      	cmp	r3, #0
 8003110:	f000 80a6 	beq.w	8003260 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003114:	2300      	movs	r3, #0
 8003116:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003118:	4b47      	ldr	r3, [pc, #284]	; (8003238 <HAL_RCC_OscConfig+0x578>)
 800311a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800311c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d10d      	bne.n	8003140 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003124:	4b44      	ldr	r3, [pc, #272]	; (8003238 <HAL_RCC_OscConfig+0x578>)
 8003126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003128:	4a43      	ldr	r2, [pc, #268]	; (8003238 <HAL_RCC_OscConfig+0x578>)
 800312a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800312e:	6593      	str	r3, [r2, #88]	; 0x58
 8003130:	4b41      	ldr	r3, [pc, #260]	; (8003238 <HAL_RCC_OscConfig+0x578>)
 8003132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003138:	60bb      	str	r3, [r7, #8]
 800313a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800313c:	2301      	movs	r3, #1
 800313e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003140:	4b3e      	ldr	r3, [pc, #248]	; (800323c <HAL_RCC_OscConfig+0x57c>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003148:	2b00      	cmp	r3, #0
 800314a:	d118      	bne.n	800317e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800314c:	4b3b      	ldr	r3, [pc, #236]	; (800323c <HAL_RCC_OscConfig+0x57c>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a3a      	ldr	r2, [pc, #232]	; (800323c <HAL_RCC_OscConfig+0x57c>)
 8003152:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003156:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003158:	f7fe fd16 	bl	8001b88 <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003160:	f7fe fd12 	bl	8001b88 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b02      	cmp	r3, #2
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e184      	b.n	800347c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003172:	4b32      	ldr	r3, [pc, #200]	; (800323c <HAL_RCC_OscConfig+0x57c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800317a:	2b00      	cmp	r3, #0
 800317c:	d0f0      	beq.n	8003160 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d108      	bne.n	8003198 <HAL_RCC_OscConfig+0x4d8>
 8003186:	4b2c      	ldr	r3, [pc, #176]	; (8003238 <HAL_RCC_OscConfig+0x578>)
 8003188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800318c:	4a2a      	ldr	r2, [pc, #168]	; (8003238 <HAL_RCC_OscConfig+0x578>)
 800318e:	f043 0301 	orr.w	r3, r3, #1
 8003192:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003196:	e024      	b.n	80031e2 <HAL_RCC_OscConfig+0x522>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	2b05      	cmp	r3, #5
 800319e:	d110      	bne.n	80031c2 <HAL_RCC_OscConfig+0x502>
 80031a0:	4b25      	ldr	r3, [pc, #148]	; (8003238 <HAL_RCC_OscConfig+0x578>)
 80031a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a6:	4a24      	ldr	r2, [pc, #144]	; (8003238 <HAL_RCC_OscConfig+0x578>)
 80031a8:	f043 0304 	orr.w	r3, r3, #4
 80031ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031b0:	4b21      	ldr	r3, [pc, #132]	; (8003238 <HAL_RCC_OscConfig+0x578>)
 80031b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b6:	4a20      	ldr	r2, [pc, #128]	; (8003238 <HAL_RCC_OscConfig+0x578>)
 80031b8:	f043 0301 	orr.w	r3, r3, #1
 80031bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031c0:	e00f      	b.n	80031e2 <HAL_RCC_OscConfig+0x522>
 80031c2:	4b1d      	ldr	r3, [pc, #116]	; (8003238 <HAL_RCC_OscConfig+0x578>)
 80031c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c8:	4a1b      	ldr	r2, [pc, #108]	; (8003238 <HAL_RCC_OscConfig+0x578>)
 80031ca:	f023 0301 	bic.w	r3, r3, #1
 80031ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031d2:	4b19      	ldr	r3, [pc, #100]	; (8003238 <HAL_RCC_OscConfig+0x578>)
 80031d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d8:	4a17      	ldr	r2, [pc, #92]	; (8003238 <HAL_RCC_OscConfig+0x578>)
 80031da:	f023 0304 	bic.w	r3, r3, #4
 80031de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d016      	beq.n	8003218 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ea:	f7fe fccd 	bl	8001b88 <HAL_GetTick>
 80031ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031f0:	e00a      	b.n	8003208 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031f2:	f7fe fcc9 	bl	8001b88 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003200:	4293      	cmp	r3, r2
 8003202:	d901      	bls.n	8003208 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e139      	b.n	800347c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003208:	4b0b      	ldr	r3, [pc, #44]	; (8003238 <HAL_RCC_OscConfig+0x578>)
 800320a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d0ed      	beq.n	80031f2 <HAL_RCC_OscConfig+0x532>
 8003216:	e01a      	b.n	800324e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003218:	f7fe fcb6 	bl	8001b88 <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800321e:	e00f      	b.n	8003240 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003220:	f7fe fcb2 	bl	8001b88 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	f241 3288 	movw	r2, #5000	; 0x1388
 800322e:	4293      	cmp	r3, r2
 8003230:	d906      	bls.n	8003240 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e122      	b.n	800347c <HAL_RCC_OscConfig+0x7bc>
 8003236:	bf00      	nop
 8003238:	40021000 	.word	0x40021000
 800323c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003240:	4b90      	ldr	r3, [pc, #576]	; (8003484 <HAL_RCC_OscConfig+0x7c4>)
 8003242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1e8      	bne.n	8003220 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800324e:	7ffb      	ldrb	r3, [r7, #31]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d105      	bne.n	8003260 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003254:	4b8b      	ldr	r3, [pc, #556]	; (8003484 <HAL_RCC_OscConfig+0x7c4>)
 8003256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003258:	4a8a      	ldr	r2, [pc, #552]	; (8003484 <HAL_RCC_OscConfig+0x7c4>)
 800325a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800325e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003264:	2b00      	cmp	r3, #0
 8003266:	f000 8108 	beq.w	800347a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326e:	2b02      	cmp	r3, #2
 8003270:	f040 80d0 	bne.w	8003414 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003274:	4b83      	ldr	r3, [pc, #524]	; (8003484 <HAL_RCC_OscConfig+0x7c4>)
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	f003 0203 	and.w	r2, r3, #3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003284:	429a      	cmp	r2, r3
 8003286:	d130      	bne.n	80032ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003292:	3b01      	subs	r3, #1
 8003294:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003296:	429a      	cmp	r2, r3
 8003298:	d127      	bne.n	80032ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032a4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d11f      	bne.n	80032ea <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032b4:	2a07      	cmp	r2, #7
 80032b6:	bf14      	ite	ne
 80032b8:	2201      	movne	r2, #1
 80032ba:	2200      	moveq	r2, #0
 80032bc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032be:	4293      	cmp	r3, r2
 80032c0:	d113      	bne.n	80032ea <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032cc:	085b      	lsrs	r3, r3, #1
 80032ce:	3b01      	subs	r3, #1
 80032d0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d109      	bne.n	80032ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e0:	085b      	lsrs	r3, r3, #1
 80032e2:	3b01      	subs	r3, #1
 80032e4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d06e      	beq.n	80033c8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	2b0c      	cmp	r3, #12
 80032ee:	d069      	beq.n	80033c4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80032f0:	4b64      	ldr	r3, [pc, #400]	; (8003484 <HAL_RCC_OscConfig+0x7c4>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d105      	bne.n	8003308 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80032fc:	4b61      	ldr	r3, [pc, #388]	; (8003484 <HAL_RCC_OscConfig+0x7c4>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d001      	beq.n	800330c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e0b7      	b.n	800347c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800330c:	4b5d      	ldr	r3, [pc, #372]	; (8003484 <HAL_RCC_OscConfig+0x7c4>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a5c      	ldr	r2, [pc, #368]	; (8003484 <HAL_RCC_OscConfig+0x7c4>)
 8003312:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003316:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003318:	f7fe fc36 	bl	8001b88 <HAL_GetTick>
 800331c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800331e:	e008      	b.n	8003332 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003320:	f7fe fc32 	bl	8001b88 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e0a4      	b.n	800347c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003332:	4b54      	ldr	r3, [pc, #336]	; (8003484 <HAL_RCC_OscConfig+0x7c4>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1f0      	bne.n	8003320 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800333e:	4b51      	ldr	r3, [pc, #324]	; (8003484 <HAL_RCC_OscConfig+0x7c4>)
 8003340:	68da      	ldr	r2, [r3, #12]
 8003342:	4b51      	ldr	r3, [pc, #324]	; (8003488 <HAL_RCC_OscConfig+0x7c8>)
 8003344:	4013      	ands	r3, r2
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800334e:	3a01      	subs	r2, #1
 8003350:	0112      	lsls	r2, r2, #4
 8003352:	4311      	orrs	r1, r2
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003358:	0212      	lsls	r2, r2, #8
 800335a:	4311      	orrs	r1, r2
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003360:	0852      	lsrs	r2, r2, #1
 8003362:	3a01      	subs	r2, #1
 8003364:	0552      	lsls	r2, r2, #21
 8003366:	4311      	orrs	r1, r2
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800336c:	0852      	lsrs	r2, r2, #1
 800336e:	3a01      	subs	r2, #1
 8003370:	0652      	lsls	r2, r2, #25
 8003372:	4311      	orrs	r1, r2
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003378:	0912      	lsrs	r2, r2, #4
 800337a:	0452      	lsls	r2, r2, #17
 800337c:	430a      	orrs	r2, r1
 800337e:	4941      	ldr	r1, [pc, #260]	; (8003484 <HAL_RCC_OscConfig+0x7c4>)
 8003380:	4313      	orrs	r3, r2
 8003382:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003384:	4b3f      	ldr	r3, [pc, #252]	; (8003484 <HAL_RCC_OscConfig+0x7c4>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a3e      	ldr	r2, [pc, #248]	; (8003484 <HAL_RCC_OscConfig+0x7c4>)
 800338a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800338e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003390:	4b3c      	ldr	r3, [pc, #240]	; (8003484 <HAL_RCC_OscConfig+0x7c4>)
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	4a3b      	ldr	r2, [pc, #236]	; (8003484 <HAL_RCC_OscConfig+0x7c4>)
 8003396:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800339a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800339c:	f7fe fbf4 	bl	8001b88 <HAL_GetTick>
 80033a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a4:	f7fe fbf0 	bl	8001b88 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e062      	b.n	800347c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033b6:	4b33      	ldr	r3, [pc, #204]	; (8003484 <HAL_RCC_OscConfig+0x7c4>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d0f0      	beq.n	80033a4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033c2:	e05a      	b.n	800347a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e059      	b.n	800347c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033c8:	4b2e      	ldr	r3, [pc, #184]	; (8003484 <HAL_RCC_OscConfig+0x7c4>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d152      	bne.n	800347a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80033d4:	4b2b      	ldr	r3, [pc, #172]	; (8003484 <HAL_RCC_OscConfig+0x7c4>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a2a      	ldr	r2, [pc, #168]	; (8003484 <HAL_RCC_OscConfig+0x7c4>)
 80033da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033de:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033e0:	4b28      	ldr	r3, [pc, #160]	; (8003484 <HAL_RCC_OscConfig+0x7c4>)
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	4a27      	ldr	r2, [pc, #156]	; (8003484 <HAL_RCC_OscConfig+0x7c4>)
 80033e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033ea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80033ec:	f7fe fbcc 	bl	8001b88 <HAL_GetTick>
 80033f0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033f2:	e008      	b.n	8003406 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033f4:	f7fe fbc8 	bl	8001b88 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e03a      	b.n	800347c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003406:	4b1f      	ldr	r3, [pc, #124]	; (8003484 <HAL_RCC_OscConfig+0x7c4>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d0f0      	beq.n	80033f4 <HAL_RCC_OscConfig+0x734>
 8003412:	e032      	b.n	800347a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	2b0c      	cmp	r3, #12
 8003418:	d02d      	beq.n	8003476 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800341a:	4b1a      	ldr	r3, [pc, #104]	; (8003484 <HAL_RCC_OscConfig+0x7c4>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a19      	ldr	r2, [pc, #100]	; (8003484 <HAL_RCC_OscConfig+0x7c4>)
 8003420:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003424:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003426:	4b17      	ldr	r3, [pc, #92]	; (8003484 <HAL_RCC_OscConfig+0x7c4>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d105      	bne.n	800343e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003432:	4b14      	ldr	r3, [pc, #80]	; (8003484 <HAL_RCC_OscConfig+0x7c4>)
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	4a13      	ldr	r2, [pc, #76]	; (8003484 <HAL_RCC_OscConfig+0x7c4>)
 8003438:	f023 0303 	bic.w	r3, r3, #3
 800343c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800343e:	4b11      	ldr	r3, [pc, #68]	; (8003484 <HAL_RCC_OscConfig+0x7c4>)
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	4a10      	ldr	r2, [pc, #64]	; (8003484 <HAL_RCC_OscConfig+0x7c4>)
 8003444:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003448:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800344c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800344e:	f7fe fb9b 	bl	8001b88 <HAL_GetTick>
 8003452:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003454:	e008      	b.n	8003468 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003456:	f7fe fb97 	bl	8001b88 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b02      	cmp	r3, #2
 8003462:	d901      	bls.n	8003468 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e009      	b.n	800347c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003468:	4b06      	ldr	r3, [pc, #24]	; (8003484 <HAL_RCC_OscConfig+0x7c4>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d1f0      	bne.n	8003456 <HAL_RCC_OscConfig+0x796>
 8003474:	e001      	b.n	800347a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e000      	b.n	800347c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800347a:	2300      	movs	r3, #0
}
 800347c:	4618      	mov	r0, r3
 800347e:	3720      	adds	r7, #32
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	40021000 	.word	0x40021000
 8003488:	f99d808c 	.word	0xf99d808c

0800348c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d101      	bne.n	80034a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e0c8      	b.n	8003632 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034a0:	4b66      	ldr	r3, [pc, #408]	; (800363c <HAL_RCC_ClockConfig+0x1b0>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0307 	and.w	r3, r3, #7
 80034a8:	683a      	ldr	r2, [r7, #0]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d910      	bls.n	80034d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ae:	4b63      	ldr	r3, [pc, #396]	; (800363c <HAL_RCC_ClockConfig+0x1b0>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f023 0207 	bic.w	r2, r3, #7
 80034b6:	4961      	ldr	r1, [pc, #388]	; (800363c <HAL_RCC_ClockConfig+0x1b0>)
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034be:	4b5f      	ldr	r3, [pc, #380]	; (800363c <HAL_RCC_ClockConfig+0x1b0>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0307 	and.w	r3, r3, #7
 80034c6:	683a      	ldr	r2, [r7, #0]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d001      	beq.n	80034d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e0b0      	b.n	8003632 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0301 	and.w	r3, r3, #1
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d04c      	beq.n	8003576 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	2b03      	cmp	r3, #3
 80034e2:	d107      	bne.n	80034f4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034e4:	4b56      	ldr	r3, [pc, #344]	; (8003640 <HAL_RCC_ClockConfig+0x1b4>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d121      	bne.n	8003534 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e09e      	b.n	8003632 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d107      	bne.n	800350c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034fc:	4b50      	ldr	r3, [pc, #320]	; (8003640 <HAL_RCC_ClockConfig+0x1b4>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d115      	bne.n	8003534 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e092      	b.n	8003632 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d107      	bne.n	8003524 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003514:	4b4a      	ldr	r3, [pc, #296]	; (8003640 <HAL_RCC_ClockConfig+0x1b4>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0302 	and.w	r3, r3, #2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d109      	bne.n	8003534 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e086      	b.n	8003632 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003524:	4b46      	ldr	r3, [pc, #280]	; (8003640 <HAL_RCC_ClockConfig+0x1b4>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800352c:	2b00      	cmp	r3, #0
 800352e:	d101      	bne.n	8003534 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e07e      	b.n	8003632 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003534:	4b42      	ldr	r3, [pc, #264]	; (8003640 <HAL_RCC_ClockConfig+0x1b4>)
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f023 0203 	bic.w	r2, r3, #3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	493f      	ldr	r1, [pc, #252]	; (8003640 <HAL_RCC_ClockConfig+0x1b4>)
 8003542:	4313      	orrs	r3, r2
 8003544:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003546:	f7fe fb1f 	bl	8001b88 <HAL_GetTick>
 800354a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800354c:	e00a      	b.n	8003564 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800354e:	f7fe fb1b 	bl	8001b88 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	f241 3288 	movw	r2, #5000	; 0x1388
 800355c:	4293      	cmp	r3, r2
 800355e:	d901      	bls.n	8003564 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e066      	b.n	8003632 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003564:	4b36      	ldr	r3, [pc, #216]	; (8003640 <HAL_RCC_ClockConfig+0x1b4>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f003 020c 	and.w	r2, r3, #12
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	429a      	cmp	r2, r3
 8003574:	d1eb      	bne.n	800354e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d008      	beq.n	8003594 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003582:	4b2f      	ldr	r3, [pc, #188]	; (8003640 <HAL_RCC_ClockConfig+0x1b4>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	492c      	ldr	r1, [pc, #176]	; (8003640 <HAL_RCC_ClockConfig+0x1b4>)
 8003590:	4313      	orrs	r3, r2
 8003592:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003594:	4b29      	ldr	r3, [pc, #164]	; (800363c <HAL_RCC_ClockConfig+0x1b0>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0307 	and.w	r3, r3, #7
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d210      	bcs.n	80035c4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035a2:	4b26      	ldr	r3, [pc, #152]	; (800363c <HAL_RCC_ClockConfig+0x1b0>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f023 0207 	bic.w	r2, r3, #7
 80035aa:	4924      	ldr	r1, [pc, #144]	; (800363c <HAL_RCC_ClockConfig+0x1b0>)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035b2:	4b22      	ldr	r3, [pc, #136]	; (800363c <HAL_RCC_ClockConfig+0x1b0>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0307 	and.w	r3, r3, #7
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d001      	beq.n	80035c4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e036      	b.n	8003632 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0304 	and.w	r3, r3, #4
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d008      	beq.n	80035e2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035d0:	4b1b      	ldr	r3, [pc, #108]	; (8003640 <HAL_RCC_ClockConfig+0x1b4>)
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	4918      	ldr	r1, [pc, #96]	; (8003640 <HAL_RCC_ClockConfig+0x1b4>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0308 	and.w	r3, r3, #8
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d009      	beq.n	8003602 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035ee:	4b14      	ldr	r3, [pc, #80]	; (8003640 <HAL_RCC_ClockConfig+0x1b4>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	4910      	ldr	r1, [pc, #64]	; (8003640 <HAL_RCC_ClockConfig+0x1b4>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003602:	f000 f825 	bl	8003650 <HAL_RCC_GetSysClockFreq>
 8003606:	4602      	mov	r2, r0
 8003608:	4b0d      	ldr	r3, [pc, #52]	; (8003640 <HAL_RCC_ClockConfig+0x1b4>)
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	091b      	lsrs	r3, r3, #4
 800360e:	f003 030f 	and.w	r3, r3, #15
 8003612:	490c      	ldr	r1, [pc, #48]	; (8003644 <HAL_RCC_ClockConfig+0x1b8>)
 8003614:	5ccb      	ldrb	r3, [r1, r3]
 8003616:	f003 031f 	and.w	r3, r3, #31
 800361a:	fa22 f303 	lsr.w	r3, r2, r3
 800361e:	4a0a      	ldr	r2, [pc, #40]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 8003620:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003622:	4b0a      	ldr	r3, [pc, #40]	; (800364c <HAL_RCC_ClockConfig+0x1c0>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4618      	mov	r0, r3
 8003628:	f7fe fa5e 	bl	8001ae8 <HAL_InitTick>
 800362c:	4603      	mov	r3, r0
 800362e:	72fb      	strb	r3, [r7, #11]

  return status;
 8003630:	7afb      	ldrb	r3, [r7, #11]
}
 8003632:	4618      	mov	r0, r3
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	40022000 	.word	0x40022000
 8003640:	40021000 	.word	0x40021000
 8003644:	08008f38 	.word	0x08008f38
 8003648:	20000004 	.word	0x20000004
 800364c:	20000008 	.word	0x20000008

08003650 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003650:	b480      	push	{r7}
 8003652:	b089      	sub	sp, #36	; 0x24
 8003654:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003656:	2300      	movs	r3, #0
 8003658:	61fb      	str	r3, [r7, #28]
 800365a:	2300      	movs	r3, #0
 800365c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800365e:	4b3e      	ldr	r3, [pc, #248]	; (8003758 <HAL_RCC_GetSysClockFreq+0x108>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f003 030c 	and.w	r3, r3, #12
 8003666:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003668:	4b3b      	ldr	r3, [pc, #236]	; (8003758 <HAL_RCC_GetSysClockFreq+0x108>)
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	f003 0303 	and.w	r3, r3, #3
 8003670:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d005      	beq.n	8003684 <HAL_RCC_GetSysClockFreq+0x34>
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	2b0c      	cmp	r3, #12
 800367c:	d121      	bne.n	80036c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d11e      	bne.n	80036c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003684:	4b34      	ldr	r3, [pc, #208]	; (8003758 <HAL_RCC_GetSysClockFreq+0x108>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0308 	and.w	r3, r3, #8
 800368c:	2b00      	cmp	r3, #0
 800368e:	d107      	bne.n	80036a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003690:	4b31      	ldr	r3, [pc, #196]	; (8003758 <HAL_RCC_GetSysClockFreq+0x108>)
 8003692:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003696:	0a1b      	lsrs	r3, r3, #8
 8003698:	f003 030f 	and.w	r3, r3, #15
 800369c:	61fb      	str	r3, [r7, #28]
 800369e:	e005      	b.n	80036ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80036a0:	4b2d      	ldr	r3, [pc, #180]	; (8003758 <HAL_RCC_GetSysClockFreq+0x108>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	091b      	lsrs	r3, r3, #4
 80036a6:	f003 030f 	and.w	r3, r3, #15
 80036aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80036ac:	4a2b      	ldr	r2, [pc, #172]	; (800375c <HAL_RCC_GetSysClockFreq+0x10c>)
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d10d      	bne.n	80036d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036c0:	e00a      	b.n	80036d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	2b04      	cmp	r3, #4
 80036c6:	d102      	bne.n	80036ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80036c8:	4b25      	ldr	r3, [pc, #148]	; (8003760 <HAL_RCC_GetSysClockFreq+0x110>)
 80036ca:	61bb      	str	r3, [r7, #24]
 80036cc:	e004      	b.n	80036d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	2b08      	cmp	r3, #8
 80036d2:	d101      	bne.n	80036d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80036d4:	4b23      	ldr	r3, [pc, #140]	; (8003764 <HAL_RCC_GetSysClockFreq+0x114>)
 80036d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	2b0c      	cmp	r3, #12
 80036dc:	d134      	bne.n	8003748 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036de:	4b1e      	ldr	r3, [pc, #120]	; (8003758 <HAL_RCC_GetSysClockFreq+0x108>)
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	f003 0303 	and.w	r3, r3, #3
 80036e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d003      	beq.n	80036f6 <HAL_RCC_GetSysClockFreq+0xa6>
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	2b03      	cmp	r3, #3
 80036f2:	d003      	beq.n	80036fc <HAL_RCC_GetSysClockFreq+0xac>
 80036f4:	e005      	b.n	8003702 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80036f6:	4b1a      	ldr	r3, [pc, #104]	; (8003760 <HAL_RCC_GetSysClockFreq+0x110>)
 80036f8:	617b      	str	r3, [r7, #20]
      break;
 80036fa:	e005      	b.n	8003708 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80036fc:	4b19      	ldr	r3, [pc, #100]	; (8003764 <HAL_RCC_GetSysClockFreq+0x114>)
 80036fe:	617b      	str	r3, [r7, #20]
      break;
 8003700:	e002      	b.n	8003708 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	617b      	str	r3, [r7, #20]
      break;
 8003706:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003708:	4b13      	ldr	r3, [pc, #76]	; (8003758 <HAL_RCC_GetSysClockFreq+0x108>)
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	091b      	lsrs	r3, r3, #4
 800370e:	f003 0307 	and.w	r3, r3, #7
 8003712:	3301      	adds	r3, #1
 8003714:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003716:	4b10      	ldr	r3, [pc, #64]	; (8003758 <HAL_RCC_GetSysClockFreq+0x108>)
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	0a1b      	lsrs	r3, r3, #8
 800371c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003720:	697a      	ldr	r2, [r7, #20]
 8003722:	fb02 f203 	mul.w	r2, r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	fbb2 f3f3 	udiv	r3, r2, r3
 800372c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800372e:	4b0a      	ldr	r3, [pc, #40]	; (8003758 <HAL_RCC_GetSysClockFreq+0x108>)
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	0e5b      	lsrs	r3, r3, #25
 8003734:	f003 0303 	and.w	r3, r3, #3
 8003738:	3301      	adds	r3, #1
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800373e:	697a      	ldr	r2, [r7, #20]
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	fbb2 f3f3 	udiv	r3, r2, r3
 8003746:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003748:	69bb      	ldr	r3, [r7, #24]
}
 800374a:	4618      	mov	r0, r3
 800374c:	3724      	adds	r7, #36	; 0x24
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	40021000 	.word	0x40021000
 800375c:	08008f50 	.word	0x08008f50
 8003760:	00f42400 	.word	0x00f42400
 8003764:	007a1200 	.word	0x007a1200

08003768 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003768:	b480      	push	{r7}
 800376a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800376c:	4b03      	ldr	r3, [pc, #12]	; (800377c <HAL_RCC_GetHCLKFreq+0x14>)
 800376e:	681b      	ldr	r3, [r3, #0]
}
 8003770:	4618      	mov	r0, r3
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	20000004 	.word	0x20000004

08003780 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003784:	f7ff fff0 	bl	8003768 <HAL_RCC_GetHCLKFreq>
 8003788:	4602      	mov	r2, r0
 800378a:	4b06      	ldr	r3, [pc, #24]	; (80037a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	0a1b      	lsrs	r3, r3, #8
 8003790:	f003 0307 	and.w	r3, r3, #7
 8003794:	4904      	ldr	r1, [pc, #16]	; (80037a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003796:	5ccb      	ldrb	r3, [r1, r3]
 8003798:	f003 031f 	and.w	r3, r3, #31
 800379c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	40021000 	.word	0x40021000
 80037a8:	08008f48 	.word	0x08008f48

080037ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80037b0:	f7ff ffda 	bl	8003768 <HAL_RCC_GetHCLKFreq>
 80037b4:	4602      	mov	r2, r0
 80037b6:	4b06      	ldr	r3, [pc, #24]	; (80037d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	0adb      	lsrs	r3, r3, #11
 80037bc:	f003 0307 	and.w	r3, r3, #7
 80037c0:	4904      	ldr	r1, [pc, #16]	; (80037d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80037c2:	5ccb      	ldrb	r3, [r1, r3]
 80037c4:	f003 031f 	and.w	r3, r3, #31
 80037c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	40021000 	.word	0x40021000
 80037d4:	08008f48 	.word	0x08008f48

080037d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80037e0:	2300      	movs	r3, #0
 80037e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80037e4:	4b2a      	ldr	r3, [pc, #168]	; (8003890 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d003      	beq.n	80037f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80037f0:	f7ff fa02 	bl	8002bf8 <HAL_PWREx_GetVoltageRange>
 80037f4:	6178      	str	r0, [r7, #20]
 80037f6:	e014      	b.n	8003822 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80037f8:	4b25      	ldr	r3, [pc, #148]	; (8003890 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037fc:	4a24      	ldr	r2, [pc, #144]	; (8003890 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003802:	6593      	str	r3, [r2, #88]	; 0x58
 8003804:	4b22      	ldr	r3, [pc, #136]	; (8003890 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800380c:	60fb      	str	r3, [r7, #12]
 800380e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003810:	f7ff f9f2 	bl	8002bf8 <HAL_PWREx_GetVoltageRange>
 8003814:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003816:	4b1e      	ldr	r3, [pc, #120]	; (8003890 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800381a:	4a1d      	ldr	r2, [pc, #116]	; (8003890 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800381c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003820:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003828:	d10b      	bne.n	8003842 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2b80      	cmp	r3, #128	; 0x80
 800382e:	d919      	bls.n	8003864 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2ba0      	cmp	r3, #160	; 0xa0
 8003834:	d902      	bls.n	800383c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003836:	2302      	movs	r3, #2
 8003838:	613b      	str	r3, [r7, #16]
 800383a:	e013      	b.n	8003864 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800383c:	2301      	movs	r3, #1
 800383e:	613b      	str	r3, [r7, #16]
 8003840:	e010      	b.n	8003864 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2b80      	cmp	r3, #128	; 0x80
 8003846:	d902      	bls.n	800384e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003848:	2303      	movs	r3, #3
 800384a:	613b      	str	r3, [r7, #16]
 800384c:	e00a      	b.n	8003864 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2b80      	cmp	r3, #128	; 0x80
 8003852:	d102      	bne.n	800385a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003854:	2302      	movs	r3, #2
 8003856:	613b      	str	r3, [r7, #16]
 8003858:	e004      	b.n	8003864 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b70      	cmp	r3, #112	; 0x70
 800385e:	d101      	bne.n	8003864 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003860:	2301      	movs	r3, #1
 8003862:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003864:	4b0b      	ldr	r3, [pc, #44]	; (8003894 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f023 0207 	bic.w	r2, r3, #7
 800386c:	4909      	ldr	r1, [pc, #36]	; (8003894 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	4313      	orrs	r3, r2
 8003872:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003874:	4b07      	ldr	r3, [pc, #28]	; (8003894 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0307 	and.w	r3, r3, #7
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	429a      	cmp	r2, r3
 8003880:	d001      	beq.n	8003886 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e000      	b.n	8003888 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003886:	2300      	movs	r3, #0
}
 8003888:	4618      	mov	r0, r3
 800388a:	3718      	adds	r7, #24
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	40021000 	.word	0x40021000
 8003894:	40022000 	.word	0x40022000

08003898 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b086      	sub	sp, #24
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80038a0:	2300      	movs	r3, #0
 80038a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80038a4:	2300      	movs	r3, #0
 80038a6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d041      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038b8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80038bc:	d02a      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80038be:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80038c2:	d824      	bhi.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80038c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038c8:	d008      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80038ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038ce:	d81e      	bhi.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00a      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x52>
 80038d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038d8:	d010      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80038da:	e018      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80038dc:	4b86      	ldr	r3, [pc, #536]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	4a85      	ldr	r2, [pc, #532]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038e6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80038e8:	e015      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	3304      	adds	r3, #4
 80038ee:	2100      	movs	r1, #0
 80038f0:	4618      	mov	r0, r3
 80038f2:	f000 fabb 	bl	8003e6c <RCCEx_PLLSAI1_Config>
 80038f6:	4603      	mov	r3, r0
 80038f8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80038fa:	e00c      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	3320      	adds	r3, #32
 8003900:	2100      	movs	r1, #0
 8003902:	4618      	mov	r0, r3
 8003904:	f000 fba6 	bl	8004054 <RCCEx_PLLSAI2_Config>
 8003908:	4603      	mov	r3, r0
 800390a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800390c:	e003      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	74fb      	strb	r3, [r7, #19]
      break;
 8003912:	e000      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003914:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003916:	7cfb      	ldrb	r3, [r7, #19]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d10b      	bne.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800391c:	4b76      	ldr	r3, [pc, #472]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800391e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003922:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800392a:	4973      	ldr	r1, [pc, #460]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800392c:	4313      	orrs	r3, r2
 800392e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003932:	e001      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003934:	7cfb      	ldrb	r3, [r7, #19]
 8003936:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d041      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003948:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800394c:	d02a      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800394e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003952:	d824      	bhi.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003954:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003958:	d008      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800395a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800395e:	d81e      	bhi.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00a      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003964:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003968:	d010      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800396a:	e018      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800396c:	4b62      	ldr	r3, [pc, #392]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	4a61      	ldr	r2, [pc, #388]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003972:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003976:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003978:	e015      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	3304      	adds	r3, #4
 800397e:	2100      	movs	r1, #0
 8003980:	4618      	mov	r0, r3
 8003982:	f000 fa73 	bl	8003e6c <RCCEx_PLLSAI1_Config>
 8003986:	4603      	mov	r3, r0
 8003988:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800398a:	e00c      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	3320      	adds	r3, #32
 8003990:	2100      	movs	r1, #0
 8003992:	4618      	mov	r0, r3
 8003994:	f000 fb5e 	bl	8004054 <RCCEx_PLLSAI2_Config>
 8003998:	4603      	mov	r3, r0
 800399a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800399c:	e003      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	74fb      	strb	r3, [r7, #19]
      break;
 80039a2:	e000      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80039a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039a6:	7cfb      	ldrb	r3, [r7, #19]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d10b      	bne.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80039ac:	4b52      	ldr	r3, [pc, #328]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039ba:	494f      	ldr	r1, [pc, #316]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80039c2:	e001      	b.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039c4:	7cfb      	ldrb	r3, [r7, #19]
 80039c6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	f000 80a0 	beq.w	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039d6:	2300      	movs	r3, #0
 80039d8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80039da:	4b47      	ldr	r3, [pc, #284]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d101      	bne.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x152>
 80039e6:	2301      	movs	r3, #1
 80039e8:	e000      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x154>
 80039ea:	2300      	movs	r3, #0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00d      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039f0:	4b41      	ldr	r3, [pc, #260]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f4:	4a40      	ldr	r2, [pc, #256]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039fa:	6593      	str	r3, [r2, #88]	; 0x58
 80039fc:	4b3e      	ldr	r3, [pc, #248]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a04:	60bb      	str	r3, [r7, #8]
 8003a06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a0c:	4b3b      	ldr	r3, [pc, #236]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a3a      	ldr	r2, [pc, #232]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a16:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a18:	f7fe f8b6 	bl	8001b88 <HAL_GetTick>
 8003a1c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a1e:	e009      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a20:	f7fe f8b2 	bl	8001b88 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d902      	bls.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	74fb      	strb	r3, [r7, #19]
        break;
 8003a32:	e005      	b.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a34:	4b31      	ldr	r3, [pc, #196]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d0ef      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003a40:	7cfb      	ldrb	r3, [r7, #19]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d15c      	bne.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a46:	4b2c      	ldr	r3, [pc, #176]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a50:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d01f      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a5e:	697a      	ldr	r2, [r7, #20]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d019      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a64:	4b24      	ldr	r3, [pc, #144]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a6e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a70:	4b21      	ldr	r3, [pc, #132]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a76:	4a20      	ldr	r2, [pc, #128]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a80:	4b1d      	ldr	r3, [pc, #116]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a86:	4a1c      	ldr	r2, [pc, #112]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a90:	4a19      	ldr	r2, [pc, #100]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d016      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa2:	f7fe f871 	bl	8001b88 <HAL_GetTick>
 8003aa6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003aa8:	e00b      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aaa:	f7fe f86d 	bl	8001b88 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d902      	bls.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	74fb      	strb	r3, [r7, #19]
            break;
 8003ac0:	e006      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ac2:	4b0d      	ldr	r3, [pc, #52]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d0ec      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003ad0:	7cfb      	ldrb	r3, [r7, #19]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10c      	bne.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ad6:	4b08      	ldr	r3, [pc, #32]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003adc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ae6:	4904      	ldr	r1, [pc, #16]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003aee:	e009      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003af0:	7cfb      	ldrb	r3, [r7, #19]
 8003af2:	74bb      	strb	r3, [r7, #18]
 8003af4:	e006      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003af6:	bf00      	nop
 8003af8:	40021000 	.word	0x40021000
 8003afc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b00:	7cfb      	ldrb	r3, [r7, #19]
 8003b02:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b04:	7c7b      	ldrb	r3, [r7, #17]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d105      	bne.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b0a:	4b9e      	ldr	r3, [pc, #632]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b0e:	4a9d      	ldr	r2, [pc, #628]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b14:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00a      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b22:	4b98      	ldr	r3, [pc, #608]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b28:	f023 0203 	bic.w	r2, r3, #3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b30:	4994      	ldr	r1, [pc, #592]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00a      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b44:	4b8f      	ldr	r3, [pc, #572]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b4a:	f023 020c 	bic.w	r2, r3, #12
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b52:	498c      	ldr	r1, [pc, #560]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0304 	and.w	r3, r3, #4
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00a      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b66:	4b87      	ldr	r3, [pc, #540]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b6c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b74:	4983      	ldr	r1, [pc, #524]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0308 	and.w	r3, r3, #8
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00a      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b88:	4b7e      	ldr	r3, [pc, #504]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b8e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b96:	497b      	ldr	r1, [pc, #492]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0310 	and.w	r3, r3, #16
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00a      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003baa:	4b76      	ldr	r3, [pc, #472]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bb8:	4972      	ldr	r1, [pc, #456]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0320 	and.w	r3, r3, #32
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d00a      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003bcc:	4b6d      	ldr	r3, [pc, #436]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bda:	496a      	ldr	r1, [pc, #424]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d00a      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003bee:	4b65      	ldr	r3, [pc, #404]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bfc:	4961      	ldr	r1, [pc, #388]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d00a      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c10:	4b5c      	ldr	r3, [pc, #368]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c1e:	4959      	ldr	r1, [pc, #356]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00a      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c32:	4b54      	ldr	r3, [pc, #336]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c38:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c40:	4950      	ldr	r1, [pc, #320]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00a      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c54:	4b4b      	ldr	r3, [pc, #300]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c5a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c62:	4948      	ldr	r1, [pc, #288]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00a      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c76:	4b43      	ldr	r3, [pc, #268]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c84:	493f      	ldr	r1, [pc, #252]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d028      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c98:	4b3a      	ldr	r3, [pc, #232]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ca6:	4937      	ldr	r1, [pc, #220]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cb6:	d106      	bne.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cb8:	4b32      	ldr	r3, [pc, #200]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	4a31      	ldr	r2, [pc, #196]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cc2:	60d3      	str	r3, [r2, #12]
 8003cc4:	e011      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cce:	d10c      	bne.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	3304      	adds	r3, #4
 8003cd4:	2101      	movs	r1, #1
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f000 f8c8 	bl	8003e6c <RCCEx_PLLSAI1_Config>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003ce0:	7cfb      	ldrb	r3, [r7, #19]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d001      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003ce6:	7cfb      	ldrb	r3, [r7, #19]
 8003ce8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d028      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003cf6:	4b23      	ldr	r3, [pc, #140]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cfc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d04:	491f      	ldr	r1, [pc, #124]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d14:	d106      	bne.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d16:	4b1b      	ldr	r3, [pc, #108]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	4a1a      	ldr	r2, [pc, #104]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d20:	60d3      	str	r3, [r2, #12]
 8003d22:	e011      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d2c:	d10c      	bne.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	3304      	adds	r3, #4
 8003d32:	2101      	movs	r1, #1
 8003d34:	4618      	mov	r0, r3
 8003d36:	f000 f899 	bl	8003e6c <RCCEx_PLLSAI1_Config>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d3e:	7cfb      	ldrb	r3, [r7, #19]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d001      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003d44:	7cfb      	ldrb	r3, [r7, #19]
 8003d46:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d02b      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d54:	4b0b      	ldr	r3, [pc, #44]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d5a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d62:	4908      	ldr	r1, [pc, #32]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d72:	d109      	bne.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d74:	4b03      	ldr	r3, [pc, #12]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	4a02      	ldr	r2, [pc, #8]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d7e:	60d3      	str	r3, [r2, #12]
 8003d80:	e014      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003d82:	bf00      	nop
 8003d84:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d90:	d10c      	bne.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	3304      	adds	r3, #4
 8003d96:	2101      	movs	r1, #1
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f000 f867 	bl	8003e6c <RCCEx_PLLSAI1_Config>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003da2:	7cfb      	ldrb	r3, [r7, #19]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d001      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003da8:	7cfb      	ldrb	r3, [r7, #19]
 8003daa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d02f      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003db8:	4b2b      	ldr	r3, [pc, #172]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dbe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dc6:	4928      	ldr	r1, [pc, #160]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003dd6:	d10d      	bne.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	3304      	adds	r3, #4
 8003ddc:	2102      	movs	r1, #2
 8003dde:	4618      	mov	r0, r3
 8003de0:	f000 f844 	bl	8003e6c <RCCEx_PLLSAI1_Config>
 8003de4:	4603      	mov	r3, r0
 8003de6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003de8:	7cfb      	ldrb	r3, [r7, #19]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d014      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003dee:	7cfb      	ldrb	r3, [r7, #19]
 8003df0:	74bb      	strb	r3, [r7, #18]
 8003df2:	e011      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003df8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dfc:	d10c      	bne.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	3320      	adds	r3, #32
 8003e02:	2102      	movs	r1, #2
 8003e04:	4618      	mov	r0, r3
 8003e06:	f000 f925 	bl	8004054 <RCCEx_PLLSAI2_Config>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e0e:	7cfb      	ldrb	r3, [r7, #19]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d001      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003e14:	7cfb      	ldrb	r3, [r7, #19]
 8003e16:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00a      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003e24:	4b10      	ldr	r3, [pc, #64]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e2a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e32:	490d      	ldr	r1, [pc, #52]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00b      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e46:	4b08      	ldr	r3, [pc, #32]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e4c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e56:	4904      	ldr	r1, [pc, #16]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003e5e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3718      	adds	r7, #24
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	40021000 	.word	0x40021000

08003e6c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e76:	2300      	movs	r3, #0
 8003e78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e7a:	4b75      	ldr	r3, [pc, #468]	; (8004050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	f003 0303 	and.w	r3, r3, #3
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d018      	beq.n	8003eb8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003e86:	4b72      	ldr	r3, [pc, #456]	; (8004050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	f003 0203 	and.w	r2, r3, #3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d10d      	bne.n	8003eb2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
       ||
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d009      	beq.n	8003eb2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003e9e:	4b6c      	ldr	r3, [pc, #432]	; (8004050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	091b      	lsrs	r3, r3, #4
 8003ea4:	f003 0307 	and.w	r3, r3, #7
 8003ea8:	1c5a      	adds	r2, r3, #1
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
       ||
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d047      	beq.n	8003f42 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	73fb      	strb	r3, [r7, #15]
 8003eb6:	e044      	b.n	8003f42 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2b03      	cmp	r3, #3
 8003ebe:	d018      	beq.n	8003ef2 <RCCEx_PLLSAI1_Config+0x86>
 8003ec0:	2b03      	cmp	r3, #3
 8003ec2:	d825      	bhi.n	8003f10 <RCCEx_PLLSAI1_Config+0xa4>
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d002      	beq.n	8003ece <RCCEx_PLLSAI1_Config+0x62>
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d009      	beq.n	8003ee0 <RCCEx_PLLSAI1_Config+0x74>
 8003ecc:	e020      	b.n	8003f10 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ece:	4b60      	ldr	r3, [pc, #384]	; (8004050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d11d      	bne.n	8003f16 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ede:	e01a      	b.n	8003f16 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ee0:	4b5b      	ldr	r3, [pc, #364]	; (8004050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d116      	bne.n	8003f1a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ef0:	e013      	b.n	8003f1a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ef2:	4b57      	ldr	r3, [pc, #348]	; (8004050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d10f      	bne.n	8003f1e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003efe:	4b54      	ldr	r3, [pc, #336]	; (8004050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d109      	bne.n	8003f1e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f0e:	e006      	b.n	8003f1e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	73fb      	strb	r3, [r7, #15]
      break;
 8003f14:	e004      	b.n	8003f20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f16:	bf00      	nop
 8003f18:	e002      	b.n	8003f20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f1a:	bf00      	nop
 8003f1c:	e000      	b.n	8003f20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f1e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f20:	7bfb      	ldrb	r3, [r7, #15]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10d      	bne.n	8003f42 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f26:	4b4a      	ldr	r3, [pc, #296]	; (8004050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6819      	ldr	r1, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	3b01      	subs	r3, #1
 8003f38:	011b      	lsls	r3, r3, #4
 8003f3a:	430b      	orrs	r3, r1
 8003f3c:	4944      	ldr	r1, [pc, #272]	; (8004050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f42:	7bfb      	ldrb	r3, [r7, #15]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d17d      	bne.n	8004044 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003f48:	4b41      	ldr	r3, [pc, #260]	; (8004050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a40      	ldr	r2, [pc, #256]	; (8004050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f4e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f54:	f7fd fe18 	bl	8001b88 <HAL_GetTick>
 8003f58:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f5a:	e009      	b.n	8003f70 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f5c:	f7fd fe14 	bl	8001b88 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d902      	bls.n	8003f70 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	73fb      	strb	r3, [r7, #15]
        break;
 8003f6e:	e005      	b.n	8003f7c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f70:	4b37      	ldr	r3, [pc, #220]	; (8004050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1ef      	bne.n	8003f5c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003f7c:	7bfb      	ldrb	r3, [r7, #15]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d160      	bne.n	8004044 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d111      	bne.n	8003fac <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f88:	4b31      	ldr	r3, [pc, #196]	; (8004050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003f90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	6892      	ldr	r2, [r2, #8]
 8003f98:	0211      	lsls	r1, r2, #8
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	68d2      	ldr	r2, [r2, #12]
 8003f9e:	0912      	lsrs	r2, r2, #4
 8003fa0:	0452      	lsls	r2, r2, #17
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	492a      	ldr	r1, [pc, #168]	; (8004050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	610b      	str	r3, [r1, #16]
 8003faa:	e027      	b.n	8003ffc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d112      	bne.n	8003fd8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fb2:	4b27      	ldr	r3, [pc, #156]	; (8004050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003fba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	6892      	ldr	r2, [r2, #8]
 8003fc2:	0211      	lsls	r1, r2, #8
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	6912      	ldr	r2, [r2, #16]
 8003fc8:	0852      	lsrs	r2, r2, #1
 8003fca:	3a01      	subs	r2, #1
 8003fcc:	0552      	lsls	r2, r2, #21
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	491f      	ldr	r1, [pc, #124]	; (8004050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	610b      	str	r3, [r1, #16]
 8003fd6:	e011      	b.n	8003ffc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fd8:	4b1d      	ldr	r3, [pc, #116]	; (8004050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003fe0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	6892      	ldr	r2, [r2, #8]
 8003fe8:	0211      	lsls	r1, r2, #8
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	6952      	ldr	r2, [r2, #20]
 8003fee:	0852      	lsrs	r2, r2, #1
 8003ff0:	3a01      	subs	r2, #1
 8003ff2:	0652      	lsls	r2, r2, #25
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	4916      	ldr	r1, [pc, #88]	; (8004050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003ffc:	4b14      	ldr	r3, [pc, #80]	; (8004050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a13      	ldr	r2, [pc, #76]	; (8004050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004002:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004006:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004008:	f7fd fdbe 	bl	8001b88 <HAL_GetTick>
 800400c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800400e:	e009      	b.n	8004024 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004010:	f7fd fdba 	bl	8001b88 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b02      	cmp	r3, #2
 800401c:	d902      	bls.n	8004024 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	73fb      	strb	r3, [r7, #15]
          break;
 8004022:	e005      	b.n	8004030 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004024:	4b0a      	ldr	r3, [pc, #40]	; (8004050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d0ef      	beq.n	8004010 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004030:	7bfb      	ldrb	r3, [r7, #15]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d106      	bne.n	8004044 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004036:	4b06      	ldr	r3, [pc, #24]	; (8004050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004038:	691a      	ldr	r2, [r3, #16]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	4904      	ldr	r1, [pc, #16]	; (8004050 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004040:	4313      	orrs	r3, r2
 8004042:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004044:	7bfb      	ldrb	r3, [r7, #15]
}
 8004046:	4618      	mov	r0, r3
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	40021000 	.word	0x40021000

08004054 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800405e:	2300      	movs	r3, #0
 8004060:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004062:	4b6a      	ldr	r3, [pc, #424]	; (800420c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	f003 0303 	and.w	r3, r3, #3
 800406a:	2b00      	cmp	r3, #0
 800406c:	d018      	beq.n	80040a0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800406e:	4b67      	ldr	r3, [pc, #412]	; (800420c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	f003 0203 	and.w	r2, r3, #3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	429a      	cmp	r2, r3
 800407c:	d10d      	bne.n	800409a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
       ||
 8004082:	2b00      	cmp	r3, #0
 8004084:	d009      	beq.n	800409a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004086:	4b61      	ldr	r3, [pc, #388]	; (800420c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	091b      	lsrs	r3, r3, #4
 800408c:	f003 0307 	and.w	r3, r3, #7
 8004090:	1c5a      	adds	r2, r3, #1
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
       ||
 8004096:	429a      	cmp	r2, r3
 8004098:	d047      	beq.n	800412a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	73fb      	strb	r3, [r7, #15]
 800409e:	e044      	b.n	800412a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2b03      	cmp	r3, #3
 80040a6:	d018      	beq.n	80040da <RCCEx_PLLSAI2_Config+0x86>
 80040a8:	2b03      	cmp	r3, #3
 80040aa:	d825      	bhi.n	80040f8 <RCCEx_PLLSAI2_Config+0xa4>
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d002      	beq.n	80040b6 <RCCEx_PLLSAI2_Config+0x62>
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d009      	beq.n	80040c8 <RCCEx_PLLSAI2_Config+0x74>
 80040b4:	e020      	b.n	80040f8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80040b6:	4b55      	ldr	r3, [pc, #340]	; (800420c <RCCEx_PLLSAI2_Config+0x1b8>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d11d      	bne.n	80040fe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040c6:	e01a      	b.n	80040fe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80040c8:	4b50      	ldr	r3, [pc, #320]	; (800420c <RCCEx_PLLSAI2_Config+0x1b8>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d116      	bne.n	8004102 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040d8:	e013      	b.n	8004102 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80040da:	4b4c      	ldr	r3, [pc, #304]	; (800420c <RCCEx_PLLSAI2_Config+0x1b8>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d10f      	bne.n	8004106 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80040e6:	4b49      	ldr	r3, [pc, #292]	; (800420c <RCCEx_PLLSAI2_Config+0x1b8>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d109      	bne.n	8004106 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80040f6:	e006      	b.n	8004106 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	73fb      	strb	r3, [r7, #15]
      break;
 80040fc:	e004      	b.n	8004108 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80040fe:	bf00      	nop
 8004100:	e002      	b.n	8004108 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004102:	bf00      	nop
 8004104:	e000      	b.n	8004108 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004106:	bf00      	nop
    }

    if(status == HAL_OK)
 8004108:	7bfb      	ldrb	r3, [r7, #15]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d10d      	bne.n	800412a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800410e:	4b3f      	ldr	r3, [pc, #252]	; (800420c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6819      	ldr	r1, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	3b01      	subs	r3, #1
 8004120:	011b      	lsls	r3, r3, #4
 8004122:	430b      	orrs	r3, r1
 8004124:	4939      	ldr	r1, [pc, #228]	; (800420c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004126:	4313      	orrs	r3, r2
 8004128:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800412a:	7bfb      	ldrb	r3, [r7, #15]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d167      	bne.n	8004200 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004130:	4b36      	ldr	r3, [pc, #216]	; (800420c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a35      	ldr	r2, [pc, #212]	; (800420c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004136:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800413a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800413c:	f7fd fd24 	bl	8001b88 <HAL_GetTick>
 8004140:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004142:	e009      	b.n	8004158 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004144:	f7fd fd20 	bl	8001b88 <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b02      	cmp	r3, #2
 8004150:	d902      	bls.n	8004158 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	73fb      	strb	r3, [r7, #15]
        break;
 8004156:	e005      	b.n	8004164 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004158:	4b2c      	ldr	r3, [pc, #176]	; (800420c <RCCEx_PLLSAI2_Config+0x1b8>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1ef      	bne.n	8004144 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004164:	7bfb      	ldrb	r3, [r7, #15]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d14a      	bne.n	8004200 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d111      	bne.n	8004194 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004170:	4b26      	ldr	r3, [pc, #152]	; (800420c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004178:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	6892      	ldr	r2, [r2, #8]
 8004180:	0211      	lsls	r1, r2, #8
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	68d2      	ldr	r2, [r2, #12]
 8004186:	0912      	lsrs	r2, r2, #4
 8004188:	0452      	lsls	r2, r2, #17
 800418a:	430a      	orrs	r2, r1
 800418c:	491f      	ldr	r1, [pc, #124]	; (800420c <RCCEx_PLLSAI2_Config+0x1b8>)
 800418e:	4313      	orrs	r3, r2
 8004190:	614b      	str	r3, [r1, #20]
 8004192:	e011      	b.n	80041b8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004194:	4b1d      	ldr	r3, [pc, #116]	; (800420c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004196:	695b      	ldr	r3, [r3, #20]
 8004198:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800419c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	6892      	ldr	r2, [r2, #8]
 80041a4:	0211      	lsls	r1, r2, #8
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	6912      	ldr	r2, [r2, #16]
 80041aa:	0852      	lsrs	r2, r2, #1
 80041ac:	3a01      	subs	r2, #1
 80041ae:	0652      	lsls	r2, r2, #25
 80041b0:	430a      	orrs	r2, r1
 80041b2:	4916      	ldr	r1, [pc, #88]	; (800420c <RCCEx_PLLSAI2_Config+0x1b8>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80041b8:	4b14      	ldr	r3, [pc, #80]	; (800420c <RCCEx_PLLSAI2_Config+0x1b8>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a13      	ldr	r2, [pc, #76]	; (800420c <RCCEx_PLLSAI2_Config+0x1b8>)
 80041be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c4:	f7fd fce0 	bl	8001b88 <HAL_GetTick>
 80041c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80041ca:	e009      	b.n	80041e0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80041cc:	f7fd fcdc 	bl	8001b88 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d902      	bls.n	80041e0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	73fb      	strb	r3, [r7, #15]
          break;
 80041de:	e005      	b.n	80041ec <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80041e0:	4b0a      	ldr	r3, [pc, #40]	; (800420c <RCCEx_PLLSAI2_Config+0x1b8>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d0ef      	beq.n	80041cc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80041ec:	7bfb      	ldrb	r3, [r7, #15]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d106      	bne.n	8004200 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80041f2:	4b06      	ldr	r3, [pc, #24]	; (800420c <RCCEx_PLLSAI2_Config+0x1b8>)
 80041f4:	695a      	ldr	r2, [r3, #20]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	4904      	ldr	r1, [pc, #16]	; (800420c <RCCEx_PLLSAI2_Config+0x1b8>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004200:	7bfb      	ldrb	r3, [r7, #15]
}
 8004202:	4618      	mov	r0, r3
 8004204:	3710      	adds	r7, #16
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	40021000 	.word	0x40021000

08004210 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d101      	bne.n	8004222 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e040      	b.n	80042a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004226:	2b00      	cmp	r3, #0
 8004228:	d106      	bne.n	8004238 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f7fd fbcc 	bl	80019d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2224      	movs	r2, #36	; 0x24
 800423c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f022 0201 	bic.w	r2, r2, #1
 800424c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 f8c0 	bl	80043d4 <UART_SetConfig>
 8004254:	4603      	mov	r3, r0
 8004256:	2b01      	cmp	r3, #1
 8004258:	d101      	bne.n	800425e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e022      	b.n	80042a4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004262:	2b00      	cmp	r3, #0
 8004264:	d002      	beq.n	800426c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 fb3e 	bl	80048e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	685a      	ldr	r2, [r3, #4]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800427a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	689a      	ldr	r2, [r3, #8]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800428a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f042 0201 	orr.w	r2, r2, #1
 800429a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f000 fbc5 	bl	8004a2c <UART_CheckIdleState>
 80042a2:	4603      	mov	r3, r0
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3708      	adds	r7, #8
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b08a      	sub	sp, #40	; 0x28
 80042b0:	af02      	add	r7, sp, #8
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	603b      	str	r3, [r7, #0]
 80042b8:	4613      	mov	r3, r2
 80042ba:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042c0:	2b20      	cmp	r3, #32
 80042c2:	f040 8082 	bne.w	80043ca <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d002      	beq.n	80042d2 <HAL_UART_Transmit+0x26>
 80042cc:	88fb      	ldrh	r3, [r7, #6]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e07a      	b.n	80043cc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d101      	bne.n	80042e4 <HAL_UART_Transmit+0x38>
 80042e0:	2302      	movs	r3, #2
 80042e2:	e073      	b.n	80043cc <HAL_UART_Transmit+0x120>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2221      	movs	r2, #33	; 0x21
 80042f8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042fa:	f7fd fc45 	bl	8001b88 <HAL_GetTick>
 80042fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	88fa      	ldrh	r2, [r7, #6]
 8004304:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	88fa      	ldrh	r2, [r7, #6]
 800430c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004318:	d108      	bne.n	800432c <HAL_UART_Transmit+0x80>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d104      	bne.n	800432c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004322:	2300      	movs	r3, #0
 8004324:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	61bb      	str	r3, [r7, #24]
 800432a:	e003      	b.n	8004334 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004330:	2300      	movs	r3, #0
 8004332:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800433c:	e02d      	b.n	800439a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	9300      	str	r3, [sp, #0]
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	2200      	movs	r2, #0
 8004346:	2180      	movs	r1, #128	; 0x80
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f000 fbb8 	bl	8004abe <UART_WaitOnFlagUntilTimeout>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d001      	beq.n	8004358 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e039      	b.n	80043cc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d10b      	bne.n	8004376 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	881a      	ldrh	r2, [r3, #0]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800436a:	b292      	uxth	r2, r2
 800436c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	3302      	adds	r3, #2
 8004372:	61bb      	str	r3, [r7, #24]
 8004374:	e008      	b.n	8004388 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	781a      	ldrb	r2, [r3, #0]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	b292      	uxth	r2, r2
 8004380:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	3301      	adds	r3, #1
 8004386:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800438e:	b29b      	uxth	r3, r3
 8004390:	3b01      	subs	r3, #1
 8004392:	b29a      	uxth	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1cb      	bne.n	800433e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	9300      	str	r3, [sp, #0]
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	2200      	movs	r2, #0
 80043ae:	2140      	movs	r1, #64	; 0x40
 80043b0:	68f8      	ldr	r0, [r7, #12]
 80043b2:	f000 fb84 	bl	8004abe <UART_WaitOnFlagUntilTimeout>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d001      	beq.n	80043c0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e005      	b.n	80043cc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2220      	movs	r2, #32
 80043c4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80043c6:	2300      	movs	r3, #0
 80043c8:	e000      	b.n	80043cc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80043ca:	2302      	movs	r3, #2
  }
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3720      	adds	r7, #32
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043d4:	b5b0      	push	{r4, r5, r7, lr}
 80043d6:	b088      	sub	sp, #32
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80043dc:	2300      	movs	r3, #0
 80043de:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	689a      	ldr	r2, [r3, #8]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	691b      	ldr	r3, [r3, #16]
 80043e8:	431a      	orrs	r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	431a      	orrs	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	69db      	ldr	r3, [r3, #28]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	4bad      	ldr	r3, [pc, #692]	; (80046b4 <UART_SetConfig+0x2e0>)
 8004400:	4013      	ands	r3, r2
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	6812      	ldr	r2, [r2, #0]
 8004406:	69f9      	ldr	r1, [r7, #28]
 8004408:	430b      	orrs	r3, r1
 800440a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68da      	ldr	r2, [r3, #12]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	430a      	orrs	r2, r1
 8004420:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4aa2      	ldr	r2, [pc, #648]	; (80046b8 <UART_SetConfig+0x2e4>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d004      	beq.n	800443c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a1b      	ldr	r3, [r3, #32]
 8004436:	69fa      	ldr	r2, [r7, #28]
 8004438:	4313      	orrs	r3, r2
 800443a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	69fa      	ldr	r2, [r7, #28]
 800444c:	430a      	orrs	r2, r1
 800444e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a99      	ldr	r2, [pc, #612]	; (80046bc <UART_SetConfig+0x2e8>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d121      	bne.n	800449e <UART_SetConfig+0xca>
 800445a:	4b99      	ldr	r3, [pc, #612]	; (80046c0 <UART_SetConfig+0x2ec>)
 800445c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004460:	f003 0303 	and.w	r3, r3, #3
 8004464:	2b03      	cmp	r3, #3
 8004466:	d817      	bhi.n	8004498 <UART_SetConfig+0xc4>
 8004468:	a201      	add	r2, pc, #4	; (adr r2, 8004470 <UART_SetConfig+0x9c>)
 800446a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800446e:	bf00      	nop
 8004470:	08004481 	.word	0x08004481
 8004474:	0800448d 	.word	0x0800448d
 8004478:	08004487 	.word	0x08004487
 800447c:	08004493 	.word	0x08004493
 8004480:	2301      	movs	r3, #1
 8004482:	76fb      	strb	r3, [r7, #27]
 8004484:	e0e7      	b.n	8004656 <UART_SetConfig+0x282>
 8004486:	2302      	movs	r3, #2
 8004488:	76fb      	strb	r3, [r7, #27]
 800448a:	e0e4      	b.n	8004656 <UART_SetConfig+0x282>
 800448c:	2304      	movs	r3, #4
 800448e:	76fb      	strb	r3, [r7, #27]
 8004490:	e0e1      	b.n	8004656 <UART_SetConfig+0x282>
 8004492:	2308      	movs	r3, #8
 8004494:	76fb      	strb	r3, [r7, #27]
 8004496:	e0de      	b.n	8004656 <UART_SetConfig+0x282>
 8004498:	2310      	movs	r3, #16
 800449a:	76fb      	strb	r3, [r7, #27]
 800449c:	e0db      	b.n	8004656 <UART_SetConfig+0x282>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a88      	ldr	r2, [pc, #544]	; (80046c4 <UART_SetConfig+0x2f0>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d132      	bne.n	800450e <UART_SetConfig+0x13a>
 80044a8:	4b85      	ldr	r3, [pc, #532]	; (80046c0 <UART_SetConfig+0x2ec>)
 80044aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ae:	f003 030c 	and.w	r3, r3, #12
 80044b2:	2b0c      	cmp	r3, #12
 80044b4:	d828      	bhi.n	8004508 <UART_SetConfig+0x134>
 80044b6:	a201      	add	r2, pc, #4	; (adr r2, 80044bc <UART_SetConfig+0xe8>)
 80044b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044bc:	080044f1 	.word	0x080044f1
 80044c0:	08004509 	.word	0x08004509
 80044c4:	08004509 	.word	0x08004509
 80044c8:	08004509 	.word	0x08004509
 80044cc:	080044fd 	.word	0x080044fd
 80044d0:	08004509 	.word	0x08004509
 80044d4:	08004509 	.word	0x08004509
 80044d8:	08004509 	.word	0x08004509
 80044dc:	080044f7 	.word	0x080044f7
 80044e0:	08004509 	.word	0x08004509
 80044e4:	08004509 	.word	0x08004509
 80044e8:	08004509 	.word	0x08004509
 80044ec:	08004503 	.word	0x08004503
 80044f0:	2300      	movs	r3, #0
 80044f2:	76fb      	strb	r3, [r7, #27]
 80044f4:	e0af      	b.n	8004656 <UART_SetConfig+0x282>
 80044f6:	2302      	movs	r3, #2
 80044f8:	76fb      	strb	r3, [r7, #27]
 80044fa:	e0ac      	b.n	8004656 <UART_SetConfig+0x282>
 80044fc:	2304      	movs	r3, #4
 80044fe:	76fb      	strb	r3, [r7, #27]
 8004500:	e0a9      	b.n	8004656 <UART_SetConfig+0x282>
 8004502:	2308      	movs	r3, #8
 8004504:	76fb      	strb	r3, [r7, #27]
 8004506:	e0a6      	b.n	8004656 <UART_SetConfig+0x282>
 8004508:	2310      	movs	r3, #16
 800450a:	76fb      	strb	r3, [r7, #27]
 800450c:	e0a3      	b.n	8004656 <UART_SetConfig+0x282>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a6d      	ldr	r2, [pc, #436]	; (80046c8 <UART_SetConfig+0x2f4>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d120      	bne.n	800455a <UART_SetConfig+0x186>
 8004518:	4b69      	ldr	r3, [pc, #420]	; (80046c0 <UART_SetConfig+0x2ec>)
 800451a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800451e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004522:	2b30      	cmp	r3, #48	; 0x30
 8004524:	d013      	beq.n	800454e <UART_SetConfig+0x17a>
 8004526:	2b30      	cmp	r3, #48	; 0x30
 8004528:	d814      	bhi.n	8004554 <UART_SetConfig+0x180>
 800452a:	2b20      	cmp	r3, #32
 800452c:	d009      	beq.n	8004542 <UART_SetConfig+0x16e>
 800452e:	2b20      	cmp	r3, #32
 8004530:	d810      	bhi.n	8004554 <UART_SetConfig+0x180>
 8004532:	2b00      	cmp	r3, #0
 8004534:	d002      	beq.n	800453c <UART_SetConfig+0x168>
 8004536:	2b10      	cmp	r3, #16
 8004538:	d006      	beq.n	8004548 <UART_SetConfig+0x174>
 800453a:	e00b      	b.n	8004554 <UART_SetConfig+0x180>
 800453c:	2300      	movs	r3, #0
 800453e:	76fb      	strb	r3, [r7, #27]
 8004540:	e089      	b.n	8004656 <UART_SetConfig+0x282>
 8004542:	2302      	movs	r3, #2
 8004544:	76fb      	strb	r3, [r7, #27]
 8004546:	e086      	b.n	8004656 <UART_SetConfig+0x282>
 8004548:	2304      	movs	r3, #4
 800454a:	76fb      	strb	r3, [r7, #27]
 800454c:	e083      	b.n	8004656 <UART_SetConfig+0x282>
 800454e:	2308      	movs	r3, #8
 8004550:	76fb      	strb	r3, [r7, #27]
 8004552:	e080      	b.n	8004656 <UART_SetConfig+0x282>
 8004554:	2310      	movs	r3, #16
 8004556:	76fb      	strb	r3, [r7, #27]
 8004558:	e07d      	b.n	8004656 <UART_SetConfig+0x282>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a5b      	ldr	r2, [pc, #364]	; (80046cc <UART_SetConfig+0x2f8>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d120      	bne.n	80045a6 <UART_SetConfig+0x1d2>
 8004564:	4b56      	ldr	r3, [pc, #344]	; (80046c0 <UART_SetConfig+0x2ec>)
 8004566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800456a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800456e:	2bc0      	cmp	r3, #192	; 0xc0
 8004570:	d013      	beq.n	800459a <UART_SetConfig+0x1c6>
 8004572:	2bc0      	cmp	r3, #192	; 0xc0
 8004574:	d814      	bhi.n	80045a0 <UART_SetConfig+0x1cc>
 8004576:	2b80      	cmp	r3, #128	; 0x80
 8004578:	d009      	beq.n	800458e <UART_SetConfig+0x1ba>
 800457a:	2b80      	cmp	r3, #128	; 0x80
 800457c:	d810      	bhi.n	80045a0 <UART_SetConfig+0x1cc>
 800457e:	2b00      	cmp	r3, #0
 8004580:	d002      	beq.n	8004588 <UART_SetConfig+0x1b4>
 8004582:	2b40      	cmp	r3, #64	; 0x40
 8004584:	d006      	beq.n	8004594 <UART_SetConfig+0x1c0>
 8004586:	e00b      	b.n	80045a0 <UART_SetConfig+0x1cc>
 8004588:	2300      	movs	r3, #0
 800458a:	76fb      	strb	r3, [r7, #27]
 800458c:	e063      	b.n	8004656 <UART_SetConfig+0x282>
 800458e:	2302      	movs	r3, #2
 8004590:	76fb      	strb	r3, [r7, #27]
 8004592:	e060      	b.n	8004656 <UART_SetConfig+0x282>
 8004594:	2304      	movs	r3, #4
 8004596:	76fb      	strb	r3, [r7, #27]
 8004598:	e05d      	b.n	8004656 <UART_SetConfig+0x282>
 800459a:	2308      	movs	r3, #8
 800459c:	76fb      	strb	r3, [r7, #27]
 800459e:	e05a      	b.n	8004656 <UART_SetConfig+0x282>
 80045a0:	2310      	movs	r3, #16
 80045a2:	76fb      	strb	r3, [r7, #27]
 80045a4:	e057      	b.n	8004656 <UART_SetConfig+0x282>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a49      	ldr	r2, [pc, #292]	; (80046d0 <UART_SetConfig+0x2fc>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d125      	bne.n	80045fc <UART_SetConfig+0x228>
 80045b0:	4b43      	ldr	r3, [pc, #268]	; (80046c0 <UART_SetConfig+0x2ec>)
 80045b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045be:	d017      	beq.n	80045f0 <UART_SetConfig+0x21c>
 80045c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045c4:	d817      	bhi.n	80045f6 <UART_SetConfig+0x222>
 80045c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045ca:	d00b      	beq.n	80045e4 <UART_SetConfig+0x210>
 80045cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045d0:	d811      	bhi.n	80045f6 <UART_SetConfig+0x222>
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d003      	beq.n	80045de <UART_SetConfig+0x20a>
 80045d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045da:	d006      	beq.n	80045ea <UART_SetConfig+0x216>
 80045dc:	e00b      	b.n	80045f6 <UART_SetConfig+0x222>
 80045de:	2300      	movs	r3, #0
 80045e0:	76fb      	strb	r3, [r7, #27]
 80045e2:	e038      	b.n	8004656 <UART_SetConfig+0x282>
 80045e4:	2302      	movs	r3, #2
 80045e6:	76fb      	strb	r3, [r7, #27]
 80045e8:	e035      	b.n	8004656 <UART_SetConfig+0x282>
 80045ea:	2304      	movs	r3, #4
 80045ec:	76fb      	strb	r3, [r7, #27]
 80045ee:	e032      	b.n	8004656 <UART_SetConfig+0x282>
 80045f0:	2308      	movs	r3, #8
 80045f2:	76fb      	strb	r3, [r7, #27]
 80045f4:	e02f      	b.n	8004656 <UART_SetConfig+0x282>
 80045f6:	2310      	movs	r3, #16
 80045f8:	76fb      	strb	r3, [r7, #27]
 80045fa:	e02c      	b.n	8004656 <UART_SetConfig+0x282>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a2d      	ldr	r2, [pc, #180]	; (80046b8 <UART_SetConfig+0x2e4>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d125      	bne.n	8004652 <UART_SetConfig+0x27e>
 8004606:	4b2e      	ldr	r3, [pc, #184]	; (80046c0 <UART_SetConfig+0x2ec>)
 8004608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800460c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004610:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004614:	d017      	beq.n	8004646 <UART_SetConfig+0x272>
 8004616:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800461a:	d817      	bhi.n	800464c <UART_SetConfig+0x278>
 800461c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004620:	d00b      	beq.n	800463a <UART_SetConfig+0x266>
 8004622:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004626:	d811      	bhi.n	800464c <UART_SetConfig+0x278>
 8004628:	2b00      	cmp	r3, #0
 800462a:	d003      	beq.n	8004634 <UART_SetConfig+0x260>
 800462c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004630:	d006      	beq.n	8004640 <UART_SetConfig+0x26c>
 8004632:	e00b      	b.n	800464c <UART_SetConfig+0x278>
 8004634:	2300      	movs	r3, #0
 8004636:	76fb      	strb	r3, [r7, #27]
 8004638:	e00d      	b.n	8004656 <UART_SetConfig+0x282>
 800463a:	2302      	movs	r3, #2
 800463c:	76fb      	strb	r3, [r7, #27]
 800463e:	e00a      	b.n	8004656 <UART_SetConfig+0x282>
 8004640:	2304      	movs	r3, #4
 8004642:	76fb      	strb	r3, [r7, #27]
 8004644:	e007      	b.n	8004656 <UART_SetConfig+0x282>
 8004646:	2308      	movs	r3, #8
 8004648:	76fb      	strb	r3, [r7, #27]
 800464a:	e004      	b.n	8004656 <UART_SetConfig+0x282>
 800464c:	2310      	movs	r3, #16
 800464e:	76fb      	strb	r3, [r7, #27]
 8004650:	e001      	b.n	8004656 <UART_SetConfig+0x282>
 8004652:	2310      	movs	r3, #16
 8004654:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a17      	ldr	r2, [pc, #92]	; (80046b8 <UART_SetConfig+0x2e4>)
 800465c:	4293      	cmp	r3, r2
 800465e:	f040 8087 	bne.w	8004770 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004662:	7efb      	ldrb	r3, [r7, #27]
 8004664:	2b08      	cmp	r3, #8
 8004666:	d837      	bhi.n	80046d8 <UART_SetConfig+0x304>
 8004668:	a201      	add	r2, pc, #4	; (adr r2, 8004670 <UART_SetConfig+0x29c>)
 800466a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800466e:	bf00      	nop
 8004670:	08004695 	.word	0x08004695
 8004674:	080046d9 	.word	0x080046d9
 8004678:	0800469d 	.word	0x0800469d
 800467c:	080046d9 	.word	0x080046d9
 8004680:	080046a3 	.word	0x080046a3
 8004684:	080046d9 	.word	0x080046d9
 8004688:	080046d9 	.word	0x080046d9
 800468c:	080046d9 	.word	0x080046d9
 8004690:	080046ab 	.word	0x080046ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004694:	f7ff f874 	bl	8003780 <HAL_RCC_GetPCLK1Freq>
 8004698:	6178      	str	r0, [r7, #20]
        break;
 800469a:	e022      	b.n	80046e2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800469c:	4b0d      	ldr	r3, [pc, #52]	; (80046d4 <UART_SetConfig+0x300>)
 800469e:	617b      	str	r3, [r7, #20]
        break;
 80046a0:	e01f      	b.n	80046e2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046a2:	f7fe ffd5 	bl	8003650 <HAL_RCC_GetSysClockFreq>
 80046a6:	6178      	str	r0, [r7, #20]
        break;
 80046a8:	e01b      	b.n	80046e2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046ae:	617b      	str	r3, [r7, #20]
        break;
 80046b0:	e017      	b.n	80046e2 <UART_SetConfig+0x30e>
 80046b2:	bf00      	nop
 80046b4:	efff69f3 	.word	0xefff69f3
 80046b8:	40008000 	.word	0x40008000
 80046bc:	40013800 	.word	0x40013800
 80046c0:	40021000 	.word	0x40021000
 80046c4:	40004400 	.word	0x40004400
 80046c8:	40004800 	.word	0x40004800
 80046cc:	40004c00 	.word	0x40004c00
 80046d0:	40005000 	.word	0x40005000
 80046d4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80046d8:	2300      	movs	r3, #0
 80046da:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	76bb      	strb	r3, [r7, #26]
        break;
 80046e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f000 80f1 	beq.w	80048cc <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685a      	ldr	r2, [r3, #4]
 80046ee:	4613      	mov	r3, r2
 80046f0:	005b      	lsls	r3, r3, #1
 80046f2:	4413      	add	r3, r2
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d305      	bcc.n	8004706 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004700:	697a      	ldr	r2, [r7, #20]
 8004702:	429a      	cmp	r2, r3
 8004704:	d902      	bls.n	800470c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	76bb      	strb	r3, [r7, #26]
 800470a:	e0df      	b.n	80048cc <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	4618      	mov	r0, r3
 8004710:	f04f 0100 	mov.w	r1, #0
 8004714:	f04f 0200 	mov.w	r2, #0
 8004718:	f04f 0300 	mov.w	r3, #0
 800471c:	020b      	lsls	r3, r1, #8
 800471e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004722:	0202      	lsls	r2, r0, #8
 8004724:	6879      	ldr	r1, [r7, #4]
 8004726:	6849      	ldr	r1, [r1, #4]
 8004728:	0849      	lsrs	r1, r1, #1
 800472a:	4608      	mov	r0, r1
 800472c:	f04f 0100 	mov.w	r1, #0
 8004730:	1814      	adds	r4, r2, r0
 8004732:	eb43 0501 	adc.w	r5, r3, r1
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	461a      	mov	r2, r3
 800473c:	f04f 0300 	mov.w	r3, #0
 8004740:	4620      	mov	r0, r4
 8004742:	4629      	mov	r1, r5
 8004744:	f7fc fa30 	bl	8000ba8 <__aeabi_uldivmod>
 8004748:	4602      	mov	r2, r0
 800474a:	460b      	mov	r3, r1
 800474c:	4613      	mov	r3, r2
 800474e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004756:	d308      	bcc.n	800476a <UART_SetConfig+0x396>
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800475e:	d204      	bcs.n	800476a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	693a      	ldr	r2, [r7, #16]
 8004766:	60da      	str	r2, [r3, #12]
 8004768:	e0b0      	b.n	80048cc <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	76bb      	strb	r3, [r7, #26]
 800476e:	e0ad      	b.n	80048cc <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	69db      	ldr	r3, [r3, #28]
 8004774:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004778:	d15c      	bne.n	8004834 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800477a:	7efb      	ldrb	r3, [r7, #27]
 800477c:	2b08      	cmp	r3, #8
 800477e:	d828      	bhi.n	80047d2 <UART_SetConfig+0x3fe>
 8004780:	a201      	add	r2, pc, #4	; (adr r2, 8004788 <UART_SetConfig+0x3b4>)
 8004782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004786:	bf00      	nop
 8004788:	080047ad 	.word	0x080047ad
 800478c:	080047b5 	.word	0x080047b5
 8004790:	080047bd 	.word	0x080047bd
 8004794:	080047d3 	.word	0x080047d3
 8004798:	080047c3 	.word	0x080047c3
 800479c:	080047d3 	.word	0x080047d3
 80047a0:	080047d3 	.word	0x080047d3
 80047a4:	080047d3 	.word	0x080047d3
 80047a8:	080047cb 	.word	0x080047cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047ac:	f7fe ffe8 	bl	8003780 <HAL_RCC_GetPCLK1Freq>
 80047b0:	6178      	str	r0, [r7, #20]
        break;
 80047b2:	e013      	b.n	80047dc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047b4:	f7fe fffa 	bl	80037ac <HAL_RCC_GetPCLK2Freq>
 80047b8:	6178      	str	r0, [r7, #20]
        break;
 80047ba:	e00f      	b.n	80047dc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047bc:	4b49      	ldr	r3, [pc, #292]	; (80048e4 <UART_SetConfig+0x510>)
 80047be:	617b      	str	r3, [r7, #20]
        break;
 80047c0:	e00c      	b.n	80047dc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047c2:	f7fe ff45 	bl	8003650 <HAL_RCC_GetSysClockFreq>
 80047c6:	6178      	str	r0, [r7, #20]
        break;
 80047c8:	e008      	b.n	80047dc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047ce:	617b      	str	r3, [r7, #20]
        break;
 80047d0:	e004      	b.n	80047dc <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80047d2:	2300      	movs	r3, #0
 80047d4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	76bb      	strb	r3, [r7, #26]
        break;
 80047da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d074      	beq.n	80048cc <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	005a      	lsls	r2, r3, #1
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	085b      	lsrs	r3, r3, #1
 80047ec:	441a      	add	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	2b0f      	cmp	r3, #15
 80047fe:	d916      	bls.n	800482e <UART_SetConfig+0x45a>
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004806:	d212      	bcs.n	800482e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	b29b      	uxth	r3, r3
 800480c:	f023 030f 	bic.w	r3, r3, #15
 8004810:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	085b      	lsrs	r3, r3, #1
 8004816:	b29b      	uxth	r3, r3
 8004818:	f003 0307 	and.w	r3, r3, #7
 800481c:	b29a      	uxth	r2, r3
 800481e:	89fb      	ldrh	r3, [r7, #14]
 8004820:	4313      	orrs	r3, r2
 8004822:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	89fa      	ldrh	r2, [r7, #14]
 800482a:	60da      	str	r2, [r3, #12]
 800482c:	e04e      	b.n	80048cc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	76bb      	strb	r3, [r7, #26]
 8004832:	e04b      	b.n	80048cc <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004834:	7efb      	ldrb	r3, [r7, #27]
 8004836:	2b08      	cmp	r3, #8
 8004838:	d827      	bhi.n	800488a <UART_SetConfig+0x4b6>
 800483a:	a201      	add	r2, pc, #4	; (adr r2, 8004840 <UART_SetConfig+0x46c>)
 800483c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004840:	08004865 	.word	0x08004865
 8004844:	0800486d 	.word	0x0800486d
 8004848:	08004875 	.word	0x08004875
 800484c:	0800488b 	.word	0x0800488b
 8004850:	0800487b 	.word	0x0800487b
 8004854:	0800488b 	.word	0x0800488b
 8004858:	0800488b 	.word	0x0800488b
 800485c:	0800488b 	.word	0x0800488b
 8004860:	08004883 	.word	0x08004883
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004864:	f7fe ff8c 	bl	8003780 <HAL_RCC_GetPCLK1Freq>
 8004868:	6178      	str	r0, [r7, #20]
        break;
 800486a:	e013      	b.n	8004894 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800486c:	f7fe ff9e 	bl	80037ac <HAL_RCC_GetPCLK2Freq>
 8004870:	6178      	str	r0, [r7, #20]
        break;
 8004872:	e00f      	b.n	8004894 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004874:	4b1b      	ldr	r3, [pc, #108]	; (80048e4 <UART_SetConfig+0x510>)
 8004876:	617b      	str	r3, [r7, #20]
        break;
 8004878:	e00c      	b.n	8004894 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800487a:	f7fe fee9 	bl	8003650 <HAL_RCC_GetSysClockFreq>
 800487e:	6178      	str	r0, [r7, #20]
        break;
 8004880:	e008      	b.n	8004894 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004882:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004886:	617b      	str	r3, [r7, #20]
        break;
 8004888:	e004      	b.n	8004894 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800488a:	2300      	movs	r3, #0
 800488c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	76bb      	strb	r3, [r7, #26]
        break;
 8004892:	bf00      	nop
    }

    if (pclk != 0U)
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d018      	beq.n	80048cc <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	085a      	lsrs	r2, r3, #1
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	441a      	add	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	2b0f      	cmp	r3, #15
 80048b4:	d908      	bls.n	80048c8 <UART_SetConfig+0x4f4>
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048bc:	d204      	bcs.n	80048c8 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	693a      	ldr	r2, [r7, #16]
 80048c4:	60da      	str	r2, [r3, #12]
 80048c6:	e001      	b.n	80048cc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80048d8:	7ebb      	ldrb	r3, [r7, #26]
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3720      	adds	r7, #32
 80048de:	46bd      	mov	sp, r7
 80048e0:	bdb0      	pop	{r4, r5, r7, pc}
 80048e2:	bf00      	nop
 80048e4:	00f42400 	.word	0x00f42400

080048e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f4:	f003 0301 	and.w	r3, r3, #1
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d00a      	beq.n	8004912 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	430a      	orrs	r2, r1
 8004910:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00a      	beq.n	8004934 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	430a      	orrs	r2, r1
 8004932:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004938:	f003 0304 	and.w	r3, r3, #4
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00a      	beq.n	8004956 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	430a      	orrs	r2, r1
 8004954:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495a:	f003 0308 	and.w	r3, r3, #8
 800495e:	2b00      	cmp	r3, #0
 8004960:	d00a      	beq.n	8004978 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	430a      	orrs	r2, r1
 8004976:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497c:	f003 0310 	and.w	r3, r3, #16
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00a      	beq.n	800499a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	430a      	orrs	r2, r1
 8004998:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499e:	f003 0320 	and.w	r3, r3, #32
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00a      	beq.n	80049bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	430a      	orrs	r2, r1
 80049ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d01a      	beq.n	80049fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	430a      	orrs	r2, r1
 80049dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049e6:	d10a      	bne.n	80049fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	430a      	orrs	r2, r1
 80049fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00a      	beq.n	8004a20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	430a      	orrs	r2, r1
 8004a1e:	605a      	str	r2, [r3, #4]
  }
}
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b086      	sub	sp, #24
 8004a30:	af02      	add	r7, sp, #8
 8004a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a3c:	f7fd f8a4 	bl	8001b88 <HAL_GetTick>
 8004a40:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0308 	and.w	r3, r3, #8
 8004a4c:	2b08      	cmp	r3, #8
 8004a4e:	d10e      	bne.n	8004a6e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a54:	9300      	str	r3, [sp, #0]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f82d 	bl	8004abe <UART_WaitOnFlagUntilTimeout>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d001      	beq.n	8004a6e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e023      	b.n	8004ab6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0304 	and.w	r3, r3, #4
 8004a78:	2b04      	cmp	r3, #4
 8004a7a:	d10e      	bne.n	8004a9a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a80:	9300      	str	r3, [sp, #0]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 f817 	bl	8004abe <UART_WaitOnFlagUntilTimeout>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d001      	beq.n	8004a9a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e00d      	b.n	8004ab6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2220      	movs	r2, #32
 8004a9e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2220      	movs	r2, #32
 8004aa4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3710      	adds	r7, #16
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}

08004abe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b084      	sub	sp, #16
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	60f8      	str	r0, [r7, #12]
 8004ac6:	60b9      	str	r1, [r7, #8]
 8004ac8:	603b      	str	r3, [r7, #0]
 8004aca:	4613      	mov	r3, r2
 8004acc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ace:	e05e      	b.n	8004b8e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad6:	d05a      	beq.n	8004b8e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ad8:	f7fd f856 	bl	8001b88 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	69ba      	ldr	r2, [r7, #24]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d302      	bcc.n	8004aee <UART_WaitOnFlagUntilTimeout+0x30>
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d11b      	bne.n	8004b26 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004afc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	689a      	ldr	r2, [r3, #8]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f022 0201 	bic.w	r2, r2, #1
 8004b0c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2220      	movs	r2, #32
 8004b12:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2220      	movs	r2, #32
 8004b18:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e043      	b.n	8004bae <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0304 	and.w	r3, r3, #4
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d02c      	beq.n	8004b8e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	69db      	ldr	r3, [r3, #28]
 8004b3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b42:	d124      	bne.n	8004b8e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b4c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b5c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	689a      	ldr	r2, [r3, #8]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f022 0201 	bic.w	r2, r2, #1
 8004b6c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2220      	movs	r2, #32
 8004b72:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2220      	movs	r2, #32
 8004b78:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2220      	movs	r2, #32
 8004b7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e00f      	b.n	8004bae <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	69da      	ldr	r2, [r3, #28]
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	4013      	ands	r3, r2
 8004b98:	68ba      	ldr	r2, [r7, #8]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	bf0c      	ite	eq
 8004b9e:	2301      	moveq	r3, #1
 8004ba0:	2300      	movne	r3, #0
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	79fb      	ldrb	r3, [r7, #7]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d091      	beq.n	8004ad0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3710      	adds	r7, #16
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
	...

08004bb8 <log10f>:
 8004bb8:	b508      	push	{r3, lr}
 8004bba:	ed2d 8b02 	vpush	{d8}
 8004bbe:	eeb0 8a40 	vmov.f32	s16, s0
 8004bc2:	f000 f82f 	bl	8004c24 <__ieee754_log10f>
 8004bc6:	4b14      	ldr	r3, [pc, #80]	; (8004c18 <log10f+0x60>)
 8004bc8:	f993 3000 	ldrsb.w	r3, [r3]
 8004bcc:	3301      	adds	r3, #1
 8004bce:	d014      	beq.n	8004bfa <log10f+0x42>
 8004bd0:	eeb4 8a48 	vcmp.f32	s16, s16
 8004bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bd8:	d60f      	bvs.n	8004bfa <log10f+0x42>
 8004bda:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8004bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004be2:	d80a      	bhi.n	8004bfa <log10f+0x42>
 8004be4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8004be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bec:	d108      	bne.n	8004c00 <log10f+0x48>
 8004bee:	f001 fbe7 	bl	80063c0 <__errno>
 8004bf2:	2322      	movs	r3, #34	; 0x22
 8004bf4:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8004c1c <log10f+0x64>
 8004bf8:	6003      	str	r3, [r0, #0]
 8004bfa:	ecbd 8b02 	vpop	{d8}
 8004bfe:	bd08      	pop	{r3, pc}
 8004c00:	f001 fbde 	bl	80063c0 <__errno>
 8004c04:	ecbd 8b02 	vpop	{d8}
 8004c08:	2321      	movs	r3, #33	; 0x21
 8004c0a:	6003      	str	r3, [r0, #0]
 8004c0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004c10:	4803      	ldr	r0, [pc, #12]	; (8004c20 <log10f+0x68>)
 8004c12:	f000 b85f 	b.w	8004cd4 <nanf>
 8004c16:	bf00      	nop
 8004c18:	2000000d 	.word	0x2000000d
 8004c1c:	ff800000 	.word	0xff800000
 8004c20:	0801ca40 	.word	0x0801ca40

08004c24 <__ieee754_log10f>:
 8004c24:	b508      	push	{r3, lr}
 8004c26:	ee10 2a10 	vmov	r2, s0
 8004c2a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8004c2e:	ed2d 8b02 	vpush	{d8}
 8004c32:	d108      	bne.n	8004c46 <__ieee754_log10f+0x22>
 8004c34:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004cbc <__ieee754_log10f+0x98>
 8004c38:	eddf 7a21 	vldr	s15, [pc, #132]	; 8004cc0 <__ieee754_log10f+0x9c>
 8004c3c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8004c40:	ecbd 8b02 	vpop	{d8}
 8004c44:	bd08      	pop	{r3, pc}
 8004c46:	2a00      	cmp	r2, #0
 8004c48:	da02      	bge.n	8004c50 <__ieee754_log10f+0x2c>
 8004c4a:	ee30 7a40 	vsub.f32	s14, s0, s0
 8004c4e:	e7f3      	b.n	8004c38 <__ieee754_log10f+0x14>
 8004c50:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8004c54:	db02      	blt.n	8004c5c <__ieee754_log10f+0x38>
 8004c56:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004c5a:	e7f1      	b.n	8004c40 <__ieee754_log10f+0x1c>
 8004c5c:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8004c60:	bfbf      	itttt	lt
 8004c62:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 8004cc4 <__ieee754_log10f+0xa0>
 8004c66:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8004c6a:	f06f 0118 	mvnlt.w	r1, #24
 8004c6e:	ee17 2a90 	vmovlt	r2, s15
 8004c72:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8004c76:	bfa8      	it	ge
 8004c78:	2100      	movge	r1, #0
 8004c7a:	3b7f      	subs	r3, #127	; 0x7f
 8004c7c:	440b      	add	r3, r1
 8004c7e:	0fd9      	lsrs	r1, r3, #31
 8004c80:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8004c84:	ee07 3a90 	vmov	s15, r3
 8004c88:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8004c8c:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 8004c90:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8004c94:	ee00 3a10 	vmov	s0, r3
 8004c98:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8004c9c:	f000 f820 	bl	8004ce0 <__ieee754_logf>
 8004ca0:	eddf 7a09 	vldr	s15, [pc, #36]	; 8004cc8 <__ieee754_log10f+0xa4>
 8004ca4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004ca8:	eddf 7a08 	vldr	s15, [pc, #32]	; 8004ccc <__ieee754_log10f+0xa8>
 8004cac:	eea8 0a27 	vfma.f32	s0, s16, s15
 8004cb0:	eddf 7a07 	vldr	s15, [pc, #28]	; 8004cd0 <__ieee754_log10f+0xac>
 8004cb4:	eea8 0a27 	vfma.f32	s0, s16, s15
 8004cb8:	e7c2      	b.n	8004c40 <__ieee754_log10f+0x1c>
 8004cba:	bf00      	nop
 8004cbc:	cc000000 	.word	0xcc000000
 8004cc0:	00000000 	.word	0x00000000
 8004cc4:	4c000000 	.word	0x4c000000
 8004cc8:	3ede5bd9 	.word	0x3ede5bd9
 8004ccc:	355427db 	.word	0x355427db
 8004cd0:	3e9a2080 	.word	0x3e9a2080

08004cd4 <nanf>:
 8004cd4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004cdc <nanf+0x8>
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	7fc00000 	.word	0x7fc00000

08004ce0 <__ieee754_logf>:
 8004ce0:	ee10 3a10 	vmov	r3, s0
 8004ce4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8004ce8:	d106      	bne.n	8004cf8 <__ieee754_logf+0x18>
 8004cea:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8004e80 <__ieee754_logf+0x1a0>
 8004cee:	eddf 7a65 	vldr	s15, [pc, #404]	; 8004e84 <__ieee754_logf+0x1a4>
 8004cf2:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8004cf6:	4770      	bx	lr
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	da02      	bge.n	8004d02 <__ieee754_logf+0x22>
 8004cfc:	ee30 7a40 	vsub.f32	s14, s0, s0
 8004d00:	e7f5      	b.n	8004cee <__ieee754_logf+0xe>
 8004d02:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004d06:	db02      	blt.n	8004d0e <__ieee754_logf+0x2e>
 8004d08:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004d0c:	4770      	bx	lr
 8004d0e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d12:	bfb8      	it	lt
 8004d14:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 8004e88 <__ieee754_logf+0x1a8>
 8004d18:	485c      	ldr	r0, [pc, #368]	; (8004e8c <__ieee754_logf+0x1ac>)
 8004d1a:	bfbe      	ittt	lt
 8004d1c:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8004d20:	f06f 0118 	mvnlt.w	r1, #24
 8004d24:	ee17 3a90 	vmovlt	r3, s15
 8004d28:	ea4f 52e3 	mov.w	r2, r3, asr #23
 8004d2c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004d30:	4418      	add	r0, r3
 8004d32:	bfa8      	it	ge
 8004d34:	2100      	movge	r1, #0
 8004d36:	3a7f      	subs	r2, #127	; 0x7f
 8004d38:	440a      	add	r2, r1
 8004d3a:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 8004d3e:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 8004d42:	4319      	orrs	r1, r3
 8004d44:	ee00 1a10 	vmov	s0, r1
 8004d48:	4951      	ldr	r1, [pc, #324]	; (8004e90 <__ieee754_logf+0x1b0>)
 8004d4a:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 8004d4e:	f103 000f 	add.w	r0, r3, #15
 8004d52:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004d56:	4001      	ands	r1, r0
 8004d58:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004d5c:	bb89      	cbnz	r1, 8004dc2 <__ieee754_logf+0xe2>
 8004d5e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d66:	d10f      	bne.n	8004d88 <__ieee754_logf+0xa8>
 8004d68:	2a00      	cmp	r2, #0
 8004d6a:	f000 8085 	beq.w	8004e78 <__ieee754_logf+0x198>
 8004d6e:	ee07 2a90 	vmov	s15, r2
 8004d72:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8004e94 <__ieee754_logf+0x1b4>
 8004d76:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8004e98 <__ieee754_logf+0x1b8>
 8004d7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d7e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8004d82:	eea7 0a87 	vfma.f32	s0, s15, s14
 8004d86:	4770      	bx	lr
 8004d88:	eddf 6a44 	vldr	s13, [pc, #272]	; 8004e9c <__ieee754_logf+0x1bc>
 8004d8c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004d90:	eee0 7a66 	vfms.f32	s15, s0, s13
 8004d94:	ee20 7a00 	vmul.f32	s14, s0, s0
 8004d98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d9c:	b912      	cbnz	r2, 8004da4 <__ieee754_logf+0xc4>
 8004d9e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8004da2:	4770      	bx	lr
 8004da4:	ee07 2a90 	vmov	s15, r2
 8004da8:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8004e94 <__ieee754_logf+0x1b4>
 8004dac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004db0:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8004db4:	ee37 0a40 	vsub.f32	s0, s14, s0
 8004db8:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8004e98 <__ieee754_logf+0x1b8>
 8004dbc:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8004dc0:	4770      	bx	lr
 8004dc2:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8004dc6:	ee70 7a27 	vadd.f32	s15, s0, s15
 8004dca:	eddf 5a35 	vldr	s11, [pc, #212]	; 8004ea0 <__ieee754_logf+0x1c0>
 8004dce:	eddf 4a35 	vldr	s9, [pc, #212]	; 8004ea4 <__ieee754_logf+0x1c4>
 8004dd2:	4935      	ldr	r1, [pc, #212]	; (8004ea8 <__ieee754_logf+0x1c8>)
 8004dd4:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8004dd8:	4419      	add	r1, r3
 8004dda:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 8004dde:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004de2:	430b      	orrs	r3, r1
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	ee07 2a90 	vmov	s15, r2
 8004dea:	ee26 5a06 	vmul.f32	s10, s12, s12
 8004dee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004df2:	ee25 7a05 	vmul.f32	s14, s10, s10
 8004df6:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8004eac <__ieee754_logf+0x1cc>
 8004dfa:	eee7 7a25 	vfma.f32	s15, s14, s11
 8004dfe:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8004eb0 <__ieee754_logf+0x1d0>
 8004e02:	eee7 5a87 	vfma.f32	s11, s15, s14
 8004e06:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8004eb4 <__ieee754_logf+0x1d4>
 8004e0a:	eee7 7a24 	vfma.f32	s15, s14, s9
 8004e0e:	eddf 4a2a 	vldr	s9, [pc, #168]	; 8004eb8 <__ieee754_logf+0x1d8>
 8004e12:	eee7 4a87 	vfma.f32	s9, s15, s14
 8004e16:	eddf 7a29 	vldr	s15, [pc, #164]	; 8004ebc <__ieee754_logf+0x1dc>
 8004e1a:	eee4 7a87 	vfma.f32	s15, s9, s14
 8004e1e:	ee67 7a85 	vmul.f32	s15, s15, s10
 8004e22:	eee5 7a87 	vfma.f32	s15, s11, s14
 8004e26:	dd1c      	ble.n	8004e62 <__ieee754_logf+0x182>
 8004e28:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004e2c:	ee20 7a07 	vmul.f32	s14, s0, s14
 8004e30:	ee27 7a00 	vmul.f32	s14, s14, s0
 8004e34:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004e38:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004e3c:	b922      	cbnz	r2, 8004e48 <__ieee754_logf+0x168>
 8004e3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e42:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004e46:	4770      	bx	lr
 8004e48:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8004e94 <__ieee754_logf+0x1b4>
 8004e4c:	eee6 7a86 	vfma.f32	s15, s13, s12
 8004e50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e54:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8004e58:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8004e98 <__ieee754_logf+0x1b8>
 8004e5c:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8004e60:	4770      	bx	lr
 8004e62:	ee70 7a67 	vsub.f32	s15, s0, s15
 8004e66:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004e6a:	2a00      	cmp	r2, #0
 8004e6c:	d0e9      	beq.n	8004e42 <__ieee754_logf+0x162>
 8004e6e:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8004e94 <__ieee754_logf+0x1b4>
 8004e72:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8004e76:	e7ed      	b.n	8004e54 <__ieee754_logf+0x174>
 8004e78:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8004e84 <__ieee754_logf+0x1a4>
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	cc000000 	.word	0xcc000000
 8004e84:	00000000 	.word	0x00000000
 8004e88:	4c000000 	.word	0x4c000000
 8004e8c:	004afb20 	.word	0x004afb20
 8004e90:	007ffff0 	.word	0x007ffff0
 8004e94:	3717f7d1 	.word	0x3717f7d1
 8004e98:	3f317180 	.word	0x3f317180
 8004e9c:	3eaaaaab 	.word	0x3eaaaaab
 8004ea0:	3e1cd04f 	.word	0x3e1cd04f
 8004ea4:	3e178897 	.word	0x3e178897
 8004ea8:	ffcf5c30 	.word	0xffcf5c30
 8004eac:	3e638e29 	.word	0x3e638e29
 8004eb0:	3ecccccd 	.word	0x3ecccccd
 8004eb4:	3e3a3325 	.word	0x3e3a3325
 8004eb8:	3e924925 	.word	0x3e924925
 8004ebc:	3f2aaaab 	.word	0x3f2aaaab

08004ec0 <arm_rfft_32_fast_init_f32>:
 8004ec0:	b178      	cbz	r0, 8004ee2 <arm_rfft_32_fast_init_f32+0x22>
 8004ec2:	b430      	push	{r4, r5}
 8004ec4:	4908      	ldr	r1, [pc, #32]	; (8004ee8 <arm_rfft_32_fast_init_f32+0x28>)
 8004ec6:	4a09      	ldr	r2, [pc, #36]	; (8004eec <arm_rfft_32_fast_init_f32+0x2c>)
 8004ec8:	2310      	movs	r3, #16
 8004eca:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8004ece:	8003      	strh	r3, [r0, #0]
 8004ed0:	2520      	movs	r5, #32
 8004ed2:	2414      	movs	r4, #20
 8004ed4:	4b06      	ldr	r3, [pc, #24]	; (8004ef0 <arm_rfft_32_fast_init_f32+0x30>)
 8004ed6:	8205      	strh	r5, [r0, #16]
 8004ed8:	8184      	strh	r4, [r0, #12]
 8004eda:	6143      	str	r3, [r0, #20]
 8004edc:	bc30      	pop	{r4, r5}
 8004ede:	2000      	movs	r0, #0
 8004ee0:	4770      	bx	lr
 8004ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ee6:	4770      	bx	lr
 8004ee8:	08009f30 	.word	0x08009f30
 8004eec:	0800f06c 	.word	0x0800f06c
 8004ef0:	08017dec 	.word	0x08017dec

08004ef4 <arm_rfft_64_fast_init_f32>:
 8004ef4:	b178      	cbz	r0, 8004f16 <arm_rfft_64_fast_init_f32+0x22>
 8004ef6:	b430      	push	{r4, r5}
 8004ef8:	4908      	ldr	r1, [pc, #32]	; (8004f1c <arm_rfft_64_fast_init_f32+0x28>)
 8004efa:	4a09      	ldr	r2, [pc, #36]	; (8004f20 <arm_rfft_64_fast_init_f32+0x2c>)
 8004efc:	2320      	movs	r3, #32
 8004efe:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8004f02:	8003      	strh	r3, [r0, #0]
 8004f04:	2540      	movs	r5, #64	; 0x40
 8004f06:	2430      	movs	r4, #48	; 0x30
 8004f08:	4b06      	ldr	r3, [pc, #24]	; (8004f24 <arm_rfft_64_fast_init_f32+0x30>)
 8004f0a:	8205      	strh	r5, [r0, #16]
 8004f0c:	8184      	strh	r4, [r0, #12]
 8004f0e:	6143      	str	r3, [r0, #20]
 8004f10:	bc30      	pop	{r4, r5}
 8004f12:	2000      	movs	r0, #0
 8004f14:	4770      	bx	lr
 8004f16:	f04f 30ff 	mov.w	r0, #4294967295
 8004f1a:	4770      	bx	lr
 8004f1c:	0800c088 	.word	0x0800c088
 8004f20:	080138ec 	.word	0x080138ec
 8004f24:	0801c66c 	.word	0x0801c66c

08004f28 <arm_rfft_256_fast_init_f32>:
 8004f28:	b180      	cbz	r0, 8004f4c <arm_rfft_256_fast_init_f32+0x24>
 8004f2a:	b430      	push	{r4, r5}
 8004f2c:	4909      	ldr	r1, [pc, #36]	; (8004f54 <arm_rfft_256_fast_init_f32+0x2c>)
 8004f2e:	4a0a      	ldr	r2, [pc, #40]	; (8004f58 <arm_rfft_256_fast_init_f32+0x30>)
 8004f30:	2380      	movs	r3, #128	; 0x80
 8004f32:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8004f36:	8003      	strh	r3, [r0, #0]
 8004f38:	f44f 7580 	mov.w	r5, #256	; 0x100
 8004f3c:	24d0      	movs	r4, #208	; 0xd0
 8004f3e:	4b07      	ldr	r3, [pc, #28]	; (8004f5c <arm_rfft_256_fast_init_f32+0x34>)
 8004f40:	8205      	strh	r5, [r0, #16]
 8004f42:	8184      	strh	r4, [r0, #12]
 8004f44:	6143      	str	r3, [r0, #20]
 8004f46:	bc30      	pop	{r4, r5}
 8004f48:	2000      	movs	r0, #0
 8004f4a:	4770      	bx	lr
 8004f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	08009d90 	.word	0x08009d90
 8004f58:	0800ec6c 	.word	0x0800ec6c
 8004f5c:	080179ec 	.word	0x080179ec

08004f60 <arm_rfft_512_fast_init_f32>:
 8004f60:	b190      	cbz	r0, 8004f88 <arm_rfft_512_fast_init_f32+0x28>
 8004f62:	b430      	push	{r4, r5}
 8004f64:	490a      	ldr	r1, [pc, #40]	; (8004f90 <arm_rfft_512_fast_init_f32+0x30>)
 8004f66:	4a0b      	ldr	r2, [pc, #44]	; (8004f94 <arm_rfft_512_fast_init_f32+0x34>)
 8004f68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f6c:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8004f70:	8003      	strh	r3, [r0, #0]
 8004f72:	f44f 7500 	mov.w	r5, #512	; 0x200
 8004f76:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 8004f7a:	4b07      	ldr	r3, [pc, #28]	; (8004f98 <arm_rfft_512_fast_init_f32+0x38>)
 8004f7c:	8205      	strh	r5, [r0, #16]
 8004f7e:	8184      	strh	r4, [r0, #12]
 8004f80:	6143      	str	r3, [r0, #20]
 8004f82:	bc30      	pop	{r4, r5}
 8004f84:	2000      	movs	r0, #0
 8004f86:	4770      	bx	lr
 8004f88:	f04f 30ff 	mov.w	r0, #4294967295
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	0800bd18 	.word	0x0800bd18
 8004f94:	080130ec 	.word	0x080130ec
 8004f98:	0801be6c 	.word	0x0801be6c

08004f9c <arm_rfft_1024_fast_init_f32>:
 8004f9c:	b190      	cbz	r0, 8004fc4 <arm_rfft_1024_fast_init_f32+0x28>
 8004f9e:	b430      	push	{r4, r5}
 8004fa0:	490a      	ldr	r1, [pc, #40]	; (8004fcc <arm_rfft_1024_fast_init_f32+0x30>)
 8004fa2:	4a0b      	ldr	r2, [pc, #44]	; (8004fd0 <arm_rfft_1024_fast_init_f32+0x34>)
 8004fa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fa8:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8004fac:	8003      	strh	r3, [r0, #0]
 8004fae:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8004fb2:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 8004fb6:	4b07      	ldr	r3, [pc, #28]	; (8004fd4 <arm_rfft_1024_fast_init_f32+0x38>)
 8004fb8:	8205      	strh	r5, [r0, #16]
 8004fba:	8184      	strh	r4, [r0, #12]
 8004fbc:	6143      	str	r3, [r0, #20]
 8004fbe:	bc30      	pop	{r4, r5}
 8004fc0:	2000      	movs	r0, #0
 8004fc2:	4770      	bx	lr
 8004fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	0800c0e8 	.word	0x0800c0e8
 8004fd0:	080139ec 	.word	0x080139ec
 8004fd4:	080149ec 	.word	0x080149ec

08004fd8 <arm_rfft_2048_fast_init_f32>:
 8004fd8:	b190      	cbz	r0, 8005000 <arm_rfft_2048_fast_init_f32+0x28>
 8004fda:	b430      	push	{r4, r5}
 8004fdc:	490a      	ldr	r1, [pc, #40]	; (8005008 <arm_rfft_2048_fast_init_f32+0x30>)
 8004fde:	4a0b      	ldr	r2, [pc, #44]	; (800500c <arm_rfft_2048_fast_init_f32+0x34>)
 8004fe0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fe4:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8004fe8:	8003      	strh	r3, [r0, #0]
 8004fea:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8004fee:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 8004ff2:	4b07      	ldr	r3, [pc, #28]	; (8005010 <arm_rfft_2048_fast_init_f32+0x38>)
 8004ff4:	8205      	strh	r5, [r0, #16]
 8004ff6:	8184      	strh	r4, [r0, #12]
 8004ff8:	6143      	str	r3, [r0, #20]
 8004ffa:	bc30      	pop	{r4, r5}
 8004ffc:	2000      	movs	r0, #0
 8004ffe:	4770      	bx	lr
 8005000:	f04f 30ff 	mov.w	r0, #4294967295
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	08008f80 	.word	0x08008f80
 800500c:	0800cc6c 	.word	0x0800cc6c
 8005010:	080159ec 	.word	0x080159ec

08005014 <arm_rfft_4096_fast_init_f32>:
 8005014:	b190      	cbz	r0, 800503c <arm_rfft_4096_fast_init_f32+0x28>
 8005016:	b430      	push	{r4, r5}
 8005018:	490a      	ldr	r1, [pc, #40]	; (8005044 <arm_rfft_4096_fast_init_f32+0x30>)
 800501a:	4a0b      	ldr	r2, [pc, #44]	; (8005048 <arm_rfft_4096_fast_init_f32+0x34>)
 800501c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005020:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8005024:	8003      	strh	r3, [r0, #0]
 8005026:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 800502a:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 800502e:	4b07      	ldr	r3, [pc, #28]	; (800504c <arm_rfft_4096_fast_init_f32+0x38>)
 8005030:	8205      	strh	r5, [r0, #16]
 8005032:	8184      	strh	r4, [r0, #12]
 8005034:	6143      	str	r3, [r0, #20]
 8005036:	bc30      	pop	{r4, r5}
 8005038:	2000      	movs	r0, #0
 800503a:	4770      	bx	lr
 800503c:	f04f 30ff 	mov.w	r0, #4294967295
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	08009f58 	.word	0x08009f58
 8005048:	0800f0ec 	.word	0x0800f0ec
 800504c:	08017e6c 	.word	0x08017e6c

08005050 <arm_rfft_fast_init_f32>:
 8005050:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005054:	d01f      	beq.n	8005096 <arm_rfft_fast_init_f32+0x46>
 8005056:	d90b      	bls.n	8005070 <arm_rfft_fast_init_f32+0x20>
 8005058:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800505c:	d019      	beq.n	8005092 <arm_rfft_fast_init_f32+0x42>
 800505e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8005062:	d012      	beq.n	800508a <arm_rfft_fast_init_f32+0x3a>
 8005064:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005068:	d00d      	beq.n	8005086 <arm_rfft_fast_init_f32+0x36>
 800506a:	f04f 30ff 	mov.w	r0, #4294967295
 800506e:	4770      	bx	lr
 8005070:	2940      	cmp	r1, #64	; 0x40
 8005072:	d00c      	beq.n	800508e <arm_rfft_fast_init_f32+0x3e>
 8005074:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8005078:	d003      	beq.n	8005082 <arm_rfft_fast_init_f32+0x32>
 800507a:	2920      	cmp	r1, #32
 800507c:	d1f5      	bne.n	800506a <arm_rfft_fast_init_f32+0x1a>
 800507e:	4b07      	ldr	r3, [pc, #28]	; (800509c <arm_rfft_fast_init_f32+0x4c>)
 8005080:	4718      	bx	r3
 8005082:	4b07      	ldr	r3, [pc, #28]	; (80050a0 <arm_rfft_fast_init_f32+0x50>)
 8005084:	4718      	bx	r3
 8005086:	4b07      	ldr	r3, [pc, #28]	; (80050a4 <arm_rfft_fast_init_f32+0x54>)
 8005088:	4718      	bx	r3
 800508a:	4b07      	ldr	r3, [pc, #28]	; (80050a8 <arm_rfft_fast_init_f32+0x58>)
 800508c:	4718      	bx	r3
 800508e:	4b07      	ldr	r3, [pc, #28]	; (80050ac <arm_rfft_fast_init_f32+0x5c>)
 8005090:	e7f6      	b.n	8005080 <arm_rfft_fast_init_f32+0x30>
 8005092:	4b07      	ldr	r3, [pc, #28]	; (80050b0 <arm_rfft_fast_init_f32+0x60>)
 8005094:	e7f4      	b.n	8005080 <arm_rfft_fast_init_f32+0x30>
 8005096:	4b07      	ldr	r3, [pc, #28]	; (80050b4 <arm_rfft_fast_init_f32+0x64>)
 8005098:	e7f2      	b.n	8005080 <arm_rfft_fast_init_f32+0x30>
 800509a:	bf00      	nop
 800509c:	08004ec1 	.word	0x08004ec1
 80050a0:	08004f29 	.word	0x08004f29
 80050a4:	08004f9d 	.word	0x08004f9d
 80050a8:	08005015 	.word	0x08005015
 80050ac:	08004ef5 	.word	0x08004ef5
 80050b0:	08004fd9 	.word	0x08004fd9
 80050b4:	08004f61 	.word	0x08004f61

080050b8 <stage_rfft_f32>:
 80050b8:	b410      	push	{r4}
 80050ba:	edd1 7a00 	vldr	s15, [r1]
 80050be:	ed91 7a01 	vldr	s14, [r1, #4]
 80050c2:	8804      	ldrh	r4, [r0, #0]
 80050c4:	6940      	ldr	r0, [r0, #20]
 80050c6:	ee37 7a07 	vadd.f32	s14, s14, s14
 80050ca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80050ce:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 80050d2:	ee77 6a87 	vadd.f32	s13, s15, s14
 80050d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80050da:	3c01      	subs	r4, #1
 80050dc:	ee26 7a84 	vmul.f32	s14, s13, s8
 80050e0:	ee67 7a84 	vmul.f32	s15, s15, s8
 80050e4:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 80050e8:	ed82 7a00 	vstr	s14, [r2]
 80050ec:	edc2 7a01 	vstr	s15, [r2, #4]
 80050f0:	3010      	adds	r0, #16
 80050f2:	3210      	adds	r2, #16
 80050f4:	3b08      	subs	r3, #8
 80050f6:	3110      	adds	r1, #16
 80050f8:	ed11 5a02 	vldr	s10, [r1, #-8]
 80050fc:	ed93 7a02 	vldr	s14, [r3, #8]
 8005100:	ed50 6a02 	vldr	s13, [r0, #-8]
 8005104:	edd3 4a03 	vldr	s9, [r3, #12]
 8005108:	ed51 7a01 	vldr	s15, [r1, #-4]
 800510c:	ed10 6a01 	vldr	s12, [r0, #-4]
 8005110:	ee77 5a45 	vsub.f32	s11, s14, s10
 8005114:	ee37 7a05 	vadd.f32	s14, s14, s10
 8005118:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800511c:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8005120:	ee66 5a25 	vmul.f32	s11, s12, s11
 8005124:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8005128:	ee37 7a23 	vadd.f32	s14, s14, s7
 800512c:	ee66 6a85 	vmul.f32	s13, s13, s10
 8005130:	ee26 6a05 	vmul.f32	s12, s12, s10
 8005134:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8005138:	ee37 7a06 	vadd.f32	s14, s14, s12
 800513c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005140:	ee27 7a04 	vmul.f32	s14, s14, s8
 8005144:	ee67 7a84 	vmul.f32	s15, s15, s8
 8005148:	3c01      	subs	r4, #1
 800514a:	ed02 7a02 	vstr	s14, [r2, #-8]
 800514e:	ed42 7a01 	vstr	s15, [r2, #-4]
 8005152:	f1a3 0308 	sub.w	r3, r3, #8
 8005156:	f101 0108 	add.w	r1, r1, #8
 800515a:	f100 0008 	add.w	r0, r0, #8
 800515e:	f102 0208 	add.w	r2, r2, #8
 8005162:	d1c9      	bne.n	80050f8 <stage_rfft_f32+0x40>
 8005164:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop

0800516c <merge_rfft_f32>:
 800516c:	b410      	push	{r4}
 800516e:	edd1 7a00 	vldr	s15, [r1]
 8005172:	edd1 6a01 	vldr	s13, [r1, #4]
 8005176:	8804      	ldrh	r4, [r0, #0]
 8005178:	6940      	ldr	r0, [r0, #20]
 800517a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800517e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005182:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 8005186:	ee27 7a04 	vmul.f32	s14, s14, s8
 800518a:	ee67 7a84 	vmul.f32	s15, s15, s8
 800518e:	3c01      	subs	r4, #1
 8005190:	ed82 7a00 	vstr	s14, [r2]
 8005194:	edc2 7a01 	vstr	s15, [r2, #4]
 8005198:	b3dc      	cbz	r4, 8005212 <merge_rfft_f32+0xa6>
 800519a:	00e3      	lsls	r3, r4, #3
 800519c:	3b08      	subs	r3, #8
 800519e:	440b      	add	r3, r1
 80051a0:	3010      	adds	r0, #16
 80051a2:	3210      	adds	r2, #16
 80051a4:	3110      	adds	r1, #16
 80051a6:	ed11 5a02 	vldr	s10, [r1, #-8]
 80051aa:	ed93 7a02 	vldr	s14, [r3, #8]
 80051ae:	ed50 6a02 	vldr	s13, [r0, #-8]
 80051b2:	edd3 4a03 	vldr	s9, [r3, #12]
 80051b6:	ed51 7a01 	vldr	s15, [r1, #-4]
 80051ba:	ed10 6a01 	vldr	s12, [r0, #-4]
 80051be:	ee75 5a47 	vsub.f32	s11, s10, s14
 80051c2:	ee37 7a05 	vadd.f32	s14, s14, s10
 80051c6:	ee66 3aa5 	vmul.f32	s7, s13, s11
 80051ca:	ee34 5aa7 	vadd.f32	s10, s9, s15
 80051ce:	ee66 5a25 	vmul.f32	s11, s12, s11
 80051d2:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80051d6:	ee37 7a63 	vsub.f32	s14, s14, s7
 80051da:	ee66 6a85 	vmul.f32	s13, s13, s10
 80051de:	ee26 6a05 	vmul.f32	s12, s12, s10
 80051e2:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80051e6:	ee37 7a46 	vsub.f32	s14, s14, s12
 80051ea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80051ee:	ee27 7a04 	vmul.f32	s14, s14, s8
 80051f2:	ee67 7a84 	vmul.f32	s15, s15, s8
 80051f6:	3c01      	subs	r4, #1
 80051f8:	ed02 7a02 	vstr	s14, [r2, #-8]
 80051fc:	ed42 7a01 	vstr	s15, [r2, #-4]
 8005200:	f1a3 0308 	sub.w	r3, r3, #8
 8005204:	f101 0108 	add.w	r1, r1, #8
 8005208:	f100 0008 	add.w	r0, r0, #8
 800520c:	f102 0208 	add.w	r2, r2, #8
 8005210:	d1c9      	bne.n	80051a6 <merge_rfft_f32+0x3a>
 8005212:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005216:	4770      	bx	lr

08005218 <arm_rfft_fast_f32>:
 8005218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800521c:	8a05      	ldrh	r5, [r0, #16]
 800521e:	086d      	lsrs	r5, r5, #1
 8005220:	8005      	strh	r5, [r0, #0]
 8005222:	4604      	mov	r4, r0
 8005224:	4616      	mov	r6, r2
 8005226:	461d      	mov	r5, r3
 8005228:	b14b      	cbz	r3, 800523e <arm_rfft_fast_f32+0x26>
 800522a:	f7ff ff9f 	bl	800516c <merge_rfft_f32>
 800522e:	462a      	mov	r2, r5
 8005230:	4631      	mov	r1, r6
 8005232:	4620      	mov	r0, r4
 8005234:	2301      	movs	r3, #1
 8005236:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800523a:	f000 bb33 	b.w	80058a4 <arm_cfft_f32>
 800523e:	460f      	mov	r7, r1
 8005240:	461a      	mov	r2, r3
 8005242:	2301      	movs	r3, #1
 8005244:	f000 fb2e 	bl	80058a4 <arm_cfft_f32>
 8005248:	4632      	mov	r2, r6
 800524a:	4639      	mov	r1, r7
 800524c:	4620      	mov	r0, r4
 800524e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005252:	f7ff bf31 	b.w	80050b8 <stage_rfft_f32>
 8005256:	bf00      	nop

08005258 <arm_cfft_radix8by2_f32>:
 8005258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800525c:	ed2d 8b08 	vpush	{d8-d11}
 8005260:	4607      	mov	r7, r0
 8005262:	4608      	mov	r0, r1
 8005264:	f8b7 c000 	ldrh.w	ip, [r7]
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800526e:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 8005272:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8005276:	f000 80b0 	beq.w	80053da <arm_cfft_radix8by2_f32+0x182>
 800527a:	008c      	lsls	r4, r1, #2
 800527c:	3410      	adds	r4, #16
 800527e:	f100 0310 	add.w	r3, r0, #16
 8005282:	1906      	adds	r6, r0, r4
 8005284:	3210      	adds	r2, #16
 8005286:	4444      	add	r4, r8
 8005288:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800528c:	f108 0510 	add.w	r5, r8, #16
 8005290:	ed15 2a04 	vldr	s4, [r5, #-16]
 8005294:	ed55 2a03 	vldr	s5, [r5, #-12]
 8005298:	ed54 4a04 	vldr	s9, [r4, #-16]
 800529c:	ed14 4a03 	vldr	s8, [r4, #-12]
 80052a0:	ed14 6a02 	vldr	s12, [r4, #-8]
 80052a4:	ed54 5a01 	vldr	s11, [r4, #-4]
 80052a8:	ed53 3a04 	vldr	s7, [r3, #-16]
 80052ac:	ed15 0a02 	vldr	s0, [r5, #-8]
 80052b0:	ed55 0a01 	vldr	s1, [r5, #-4]
 80052b4:	ed56 6a04 	vldr	s13, [r6, #-16]
 80052b8:	ed16 3a03 	vldr	s6, [r6, #-12]
 80052bc:	ed13 7a03 	vldr	s14, [r3, #-12]
 80052c0:	ed13 5a02 	vldr	s10, [r3, #-8]
 80052c4:	ed53 7a01 	vldr	s15, [r3, #-4]
 80052c8:	ed16 1a02 	vldr	s2, [r6, #-8]
 80052cc:	ed56 1a01 	vldr	s3, [r6, #-4]
 80052d0:	ee73 ba82 	vadd.f32	s23, s7, s4
 80052d4:	ee37 ba22 	vadd.f32	s22, s14, s5
 80052d8:	ee76 9aa4 	vadd.f32	s19, s13, s9
 80052dc:	ee33 9a04 	vadd.f32	s18, s6, s8
 80052e0:	ee31 8aa5 	vadd.f32	s16, s3, s11
 80052e4:	ee75 aa00 	vadd.f32	s21, s10, s0
 80052e8:	ee37 aaa0 	vadd.f32	s20, s15, s1
 80052ec:	ee71 8a06 	vadd.f32	s17, s2, s12
 80052f0:	ed43 ba04 	vstr	s23, [r3, #-16]
 80052f4:	ed03 ba03 	vstr	s22, [r3, #-12]
 80052f8:	ed43 aa02 	vstr	s21, [r3, #-8]
 80052fc:	ed03 aa01 	vstr	s20, [r3, #-4]
 8005300:	ed06 8a01 	vstr	s16, [r6, #-4]
 8005304:	ed46 9a04 	vstr	s19, [r6, #-16]
 8005308:	ed06 9a03 	vstr	s18, [r6, #-12]
 800530c:	ed46 8a02 	vstr	s17, [r6, #-8]
 8005310:	ee37 7a62 	vsub.f32	s14, s14, s5
 8005314:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8005318:	ee34 4a43 	vsub.f32	s8, s8, s6
 800531c:	ed52 6a03 	vldr	s13, [r2, #-12]
 8005320:	ed12 3a04 	vldr	s6, [r2, #-16]
 8005324:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8005328:	ee27 8a26 	vmul.f32	s16, s14, s13
 800532c:	ee64 2aa6 	vmul.f32	s5, s9, s13
 8005330:	ee23 2a83 	vmul.f32	s4, s7, s6
 8005334:	ee64 4a83 	vmul.f32	s9, s9, s6
 8005338:	ee63 3aa6 	vmul.f32	s7, s7, s13
 800533c:	ee27 7a03 	vmul.f32	s14, s14, s6
 8005340:	ee64 6a26 	vmul.f32	s13, s8, s13
 8005344:	ee24 4a03 	vmul.f32	s8, s8, s6
 8005348:	ee37 7a63 	vsub.f32	s14, s14, s7
 800534c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8005350:	ee32 4ac4 	vsub.f32	s8, s5, s8
 8005354:	ee32 3a08 	vadd.f32	s6, s4, s16
 8005358:	ed05 7a03 	vstr	s14, [r5, #-12]
 800535c:	ed05 3a04 	vstr	s6, [r5, #-16]
 8005360:	ed04 4a04 	vstr	s8, [r4, #-16]
 8005364:	ed44 6a03 	vstr	s13, [r4, #-12]
 8005368:	ed12 7a01 	vldr	s14, [r2, #-4]
 800536c:	ee76 6a41 	vsub.f32	s13, s12, s2
 8005370:	ee35 5a40 	vsub.f32	s10, s10, s0
 8005374:	ee35 6ae1 	vsub.f32	s12, s11, s3
 8005378:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800537c:	ed52 5a02 	vldr	s11, [r2, #-8]
 8005380:	ee67 3a87 	vmul.f32	s7, s15, s14
 8005384:	ee66 4a87 	vmul.f32	s9, s13, s14
 8005388:	ee25 4a25 	vmul.f32	s8, s10, s11
 800538c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005390:	ee25 5a07 	vmul.f32	s10, s10, s14
 8005394:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8005398:	ee26 7a07 	vmul.f32	s14, s12, s14
 800539c:	ee26 6a25 	vmul.f32	s12, s12, s11
 80053a0:	ee77 7ac5 	vsub.f32	s15, s15, s10
 80053a4:	ee74 5a23 	vadd.f32	s11, s8, s7
 80053a8:	ee34 6ac6 	vsub.f32	s12, s9, s12
 80053ac:	ee37 7a26 	vadd.f32	s14, s14, s13
 80053b0:	3310      	adds	r3, #16
 80053b2:	4563      	cmp	r3, ip
 80053b4:	ed45 5a02 	vstr	s11, [r5, #-8]
 80053b8:	f106 0610 	add.w	r6, r6, #16
 80053bc:	ed45 7a01 	vstr	s15, [r5, #-4]
 80053c0:	f102 0210 	add.w	r2, r2, #16
 80053c4:	ed04 6a02 	vstr	s12, [r4, #-8]
 80053c8:	ed04 7a01 	vstr	s14, [r4, #-4]
 80053cc:	f105 0510 	add.w	r5, r5, #16
 80053d0:	f104 0410 	add.w	r4, r4, #16
 80053d4:	f47f af5c 	bne.w	8005290 <arm_cfft_radix8by2_f32+0x38>
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	b28c      	uxth	r4, r1
 80053dc:	4621      	mov	r1, r4
 80053de:	2302      	movs	r3, #2
 80053e0:	f000 fd04 	bl	8005dec <arm_radix8_butterfly_f32>
 80053e4:	ecbd 8b08 	vpop	{d8-d11}
 80053e8:	4621      	mov	r1, r4
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	4640      	mov	r0, r8
 80053ee:	2302      	movs	r3, #2
 80053f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053f4:	f000 bcfa 	b.w	8005dec <arm_radix8_butterfly_f32>

080053f8 <arm_cfft_radix8by4_f32>:
 80053f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053fc:	ed2d 8b0a 	vpush	{d8-d12}
 8005400:	b08d      	sub	sp, #52	; 0x34
 8005402:	460d      	mov	r5, r1
 8005404:	910b      	str	r1, [sp, #44]	; 0x2c
 8005406:	8801      	ldrh	r1, [r0, #0]
 8005408:	6842      	ldr	r2, [r0, #4]
 800540a:	900a      	str	r0, [sp, #40]	; 0x28
 800540c:	0849      	lsrs	r1, r1, #1
 800540e:	008b      	lsls	r3, r1, #2
 8005410:	18ee      	adds	r6, r5, r3
 8005412:	18f0      	adds	r0, r6, r3
 8005414:	edd0 5a00 	vldr	s11, [r0]
 8005418:	edd5 7a00 	vldr	s15, [r5]
 800541c:	ed96 7a00 	vldr	s14, [r6]
 8005420:	edd0 3a01 	vldr	s7, [r0, #4]
 8005424:	ed96 4a01 	vldr	s8, [r6, #4]
 8005428:	ed95 5a01 	vldr	s10, [r5, #4]
 800542c:	9008      	str	r0, [sp, #32]
 800542e:	ee37 6aa5 	vadd.f32	s12, s15, s11
 8005432:	18c7      	adds	r7, r0, r3
 8005434:	edd7 4a00 	vldr	s9, [r7]
 8005438:	ed97 3a01 	vldr	s6, [r7, #4]
 800543c:	9701      	str	r7, [sp, #4]
 800543e:	ee77 6a06 	vadd.f32	s13, s14, s12
 8005442:	462c      	mov	r4, r5
 8005444:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8005448:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800544c:	ee16 ca90 	vmov	ip, s13
 8005450:	f844 cb08 	str.w	ip, [r4], #8
 8005454:	ee75 6a23 	vadd.f32	s13, s10, s7
 8005458:	edd6 5a01 	vldr	s11, [r6, #4]
 800545c:	edd7 2a01 	vldr	s5, [r7, #4]
 8005460:	9404      	str	r4, [sp, #16]
 8005462:	ee35 5a63 	vsub.f32	s10, s10, s7
 8005466:	ee74 3a27 	vadd.f32	s7, s8, s15
 800546a:	ee36 6a47 	vsub.f32	s12, s12, s14
 800546e:	ee76 5aa5 	vadd.f32	s11, s13, s11
 8005472:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8005476:	0849      	lsrs	r1, r1, #1
 8005478:	f102 0e08 	add.w	lr, r2, #8
 800547c:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8005480:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8005484:	9109      	str	r1, [sp, #36]	; 0x24
 8005486:	ee35 4a47 	vsub.f32	s8, s10, s14
 800548a:	f1a1 0902 	sub.w	r9, r1, #2
 800548e:	f8cd e00c 	str.w	lr, [sp, #12]
 8005492:	4631      	mov	r1, r6
 8005494:	ee13 ea90 	vmov	lr, s7
 8005498:	ee36 6a64 	vsub.f32	s12, s12, s9
 800549c:	ee75 5aa2 	vadd.f32	s11, s11, s5
 80054a0:	4604      	mov	r4, r0
 80054a2:	edc5 5a01 	vstr	s11, [r5, #4]
 80054a6:	ee37 7a05 	vadd.f32	s14, s14, s10
 80054aa:	f841 eb08 	str.w	lr, [r1], #8
 80054ae:	ee34 5a24 	vadd.f32	s10, s8, s9
 80054b2:	ee16 ea10 	vmov	lr, s12
 80054b6:	ed86 5a01 	vstr	s10, [r6, #4]
 80054ba:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80054be:	f844 eb08 	str.w	lr, [r4], #8
 80054c2:	ee77 7a83 	vadd.f32	s15, s15, s6
 80054c6:	edc0 6a01 	vstr	s13, [r0, #4]
 80054ca:	9405      	str	r4, [sp, #20]
 80054cc:	4604      	mov	r4, r0
 80054ce:	ee17 0a90 	vmov	r0, s15
 80054d2:	9106      	str	r1, [sp, #24]
 80054d4:	ee37 7a64 	vsub.f32	s14, s14, s9
 80054d8:	f102 0110 	add.w	r1, r2, #16
 80054dc:	46bc      	mov	ip, r7
 80054de:	9100      	str	r1, [sp, #0]
 80054e0:	f847 0b08 	str.w	r0, [r7], #8
 80054e4:	f102 0118 	add.w	r1, r2, #24
 80054e8:	ea5f 0059 	movs.w	r0, r9, lsr #1
 80054ec:	9102      	str	r1, [sp, #8]
 80054ee:	ed8c 7a01 	vstr	s14, [ip, #4]
 80054f2:	9007      	str	r0, [sp, #28]
 80054f4:	f000 8134 	beq.w	8005760 <arm_cfft_radix8by4_f32+0x368>
 80054f8:	f102 0920 	add.w	r9, r2, #32
 80054fc:	f102 0830 	add.w	r8, r2, #48	; 0x30
 8005500:	9a01      	ldr	r2, [sp, #4]
 8005502:	f8dd a000 	ldr.w	sl, [sp]
 8005506:	3b0c      	subs	r3, #12
 8005508:	4683      	mov	fp, r0
 800550a:	4463      	add	r3, ip
 800550c:	f105 0e10 	add.w	lr, r5, #16
 8005510:	f1a4 010c 	sub.w	r1, r4, #12
 8005514:	f104 0510 	add.w	r5, r4, #16
 8005518:	f1a6 0c0c 	sub.w	ip, r6, #12
 800551c:	f1a2 040c 	sub.w	r4, r2, #12
 8005520:	f106 0010 	add.w	r0, r6, #16
 8005524:	3210      	adds	r2, #16
 8005526:	ed1e 5a02 	vldr	s10, [lr, #-8]
 800552a:	ed55 5a02 	vldr	s11, [r5, #-8]
 800552e:	ed50 7a02 	vldr	s15, [r0, #-8]
 8005532:	ed52 1a02 	vldr	s3, [r2, #-8]
 8005536:	ed55 6a01 	vldr	s13, [r5, #-4]
 800553a:	ed1e 0a01 	vldr	s0, [lr, #-4]
 800553e:	ed12 1a01 	vldr	s2, [r2, #-4]
 8005542:	ed10 8a01 	vldr	s16, [r0, #-4]
 8005546:	ee35 4a25 	vadd.f32	s8, s10, s11
 800554a:	ee30 6a26 	vadd.f32	s12, s0, s13
 800554e:	ee37 7a84 	vadd.f32	s14, s15, s8
 8005552:	ee30 0a66 	vsub.f32	s0, s0, s13
 8005556:	ee37 7a21 	vadd.f32	s14, s14, s3
 800555a:	ee75 5a65 	vsub.f32	s11, s10, s11
 800555e:	ed0e 7a02 	vstr	s14, [lr, #-8]
 8005562:	ed10 7a01 	vldr	s14, [r0, #-4]
 8005566:	ed52 6a01 	vldr	s13, [r2, #-4]
 800556a:	ee36 7a07 	vadd.f32	s14, s12, s14
 800556e:	ee78 aa25 	vadd.f32	s21, s16, s11
 8005572:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005576:	ee70 3a67 	vsub.f32	s7, s0, s15
 800557a:	ed0e 7a01 	vstr	s14, [lr, #-4]
 800557e:	ed94 7a02 	vldr	s14, [r4, #8]
 8005582:	ed9c 2a02 	vldr	s4, [ip, #8]
 8005586:	ed91 ba02 	vldr	s22, [r1, #8]
 800558a:	edd3 9a02 	vldr	s19, [r3, #8]
 800558e:	edd4 2a01 	vldr	s5, [r4, #4]
 8005592:	ed9c 9a01 	vldr	s18, [ip, #4]
 8005596:	ed93 5a01 	vldr	s10, [r3, #4]
 800559a:	edd1 0a01 	vldr	s1, [r1, #4]
 800559e:	ee72 6a07 	vadd.f32	s13, s4, s14
 80055a2:	ee32 2a47 	vsub.f32	s4, s4, s14
 80055a6:	ee7b 8a26 	vadd.f32	s17, s22, s13
 80055aa:	ee79 4a22 	vadd.f32	s9, s18, s5
 80055ae:	ee38 7aa9 	vadd.f32	s14, s17, s19
 80055b2:	ee79 2a62 	vsub.f32	s5, s18, s5
 80055b6:	ed8c 7a02 	vstr	s14, [ip, #8]
 80055ba:	ed91 7a01 	vldr	s14, [r1, #4]
 80055be:	edd3 8a01 	vldr	s17, [r3, #4]
 80055c2:	ee34 7a87 	vadd.f32	s14, s9, s14
 80055c6:	ee3b 3a69 	vsub.f32	s6, s22, s19
 80055ca:	ee37 7a28 	vadd.f32	s14, s14, s17
 80055ce:	ee32 9a60 	vsub.f32	s18, s4, s1
 80055d2:	ed8c 7a01 	vstr	s14, [ip, #4]
 80055d6:	ed1a 7a01 	vldr	s14, [sl, #-4]
 80055da:	ed1a aa02 	vldr	s20, [sl, #-8]
 80055de:	ee73 8a22 	vadd.f32	s17, s6, s5
 80055e2:	ee39 9a05 	vadd.f32	s18, s18, s10
 80055e6:	ee7a aac1 	vsub.f32	s21, s21, s2
 80055ea:	ee73 3aa1 	vadd.f32	s7, s7, s3
 80055ee:	ee2a ca8a 	vmul.f32	s24, s21, s20
 80055f2:	ee69 ba07 	vmul.f32	s23, s18, s14
 80055f6:	ee6a aa87 	vmul.f32	s21, s21, s14
 80055fa:	ee29 9a0a 	vmul.f32	s18, s18, s20
 80055fe:	ee63 ca87 	vmul.f32	s25, s7, s14
 8005602:	ee63 3a8a 	vmul.f32	s7, s7, s20
 8005606:	ee28 aa8a 	vmul.f32	s20, s17, s20
 800560a:	ee68 8a87 	vmul.f32	s17, s17, s14
 800560e:	ee73 3aea 	vsub.f32	s7, s7, s21
 8005612:	ee78 8a89 	vadd.f32	s17, s17, s18
 8005616:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 800561a:	ee3b aaca 	vsub.f32	s20, s23, s20
 800561e:	ee34 4a67 	vsub.f32	s8, s8, s15
 8005622:	ee76 6acb 	vsub.f32	s13, s13, s22
 8005626:	ee36 6a48 	vsub.f32	s12, s12, s16
 800562a:	ee74 4ae0 	vsub.f32	s9, s9, s1
 800562e:	ed00 7a02 	vstr	s14, [r0, #-8]
 8005632:	ed40 3a01 	vstr	s7, [r0, #-4]
 8005636:	edc1 8a01 	vstr	s17, [r1, #4]
 800563a:	ed81 aa02 	vstr	s20, [r1, #8]
 800563e:	ed59 3a04 	vldr	s7, [r9, #-16]
 8005642:	ee36 7ae9 	vsub.f32	s14, s13, s19
 8005646:	ee74 4ac5 	vsub.f32	s9, s9, s10
 800564a:	ed59 6a03 	vldr	s13, [r9, #-12]
 800564e:	ee34 4a61 	vsub.f32	s8, s8, s3
 8005652:	ee36 6a41 	vsub.f32	s12, s12, s2
 8005656:	ee67 8a63 	vnmul.f32	s17, s14, s7
 800565a:	ee66 9a26 	vmul.f32	s19, s12, s13
 800565e:	ee24 9a23 	vmul.f32	s18, s8, s7
 8005662:	ee26 6a23 	vmul.f32	s12, s12, s7
 8005666:	ee24 4a26 	vmul.f32	s8, s8, s13
 800566a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800566e:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8005672:	ee64 4aa3 	vmul.f32	s9, s9, s7
 8005676:	ee36 6a44 	vsub.f32	s12, s12, s8
 800567a:	ee37 7a64 	vsub.f32	s14, s14, s9
 800567e:	ee38 4ae6 	vsub.f32	s8, s17, s13
 8005682:	ee79 3a29 	vadd.f32	s7, s18, s19
 8005686:	ee75 6a60 	vsub.f32	s13, s10, s1
 800568a:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800568e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8005692:	ed45 3a02 	vstr	s7, [r5, #-8]
 8005696:	ed05 6a01 	vstr	s12, [r5, #-4]
 800569a:	ed84 7a01 	vstr	s14, [r4, #4]
 800569e:	ed84 4a02 	vstr	s8, [r4, #8]
 80056a2:	ee35 6a81 	vadd.f32	s12, s11, s2
 80056a6:	ee36 7ac2 	vsub.f32	s14, s13, s4
 80056aa:	ed58 5a06 	vldr	s11, [r8, #-24]	; 0xffffffe8
 80056ae:	ed58 6a05 	vldr	s13, [r8, #-20]	; 0xffffffec
 80056b2:	ee33 3a62 	vsub.f32	s6, s6, s5
 80056b6:	ee77 7ae1 	vsub.f32	s15, s15, s3
 80056ba:	ee67 2a26 	vmul.f32	s5, s14, s13
 80056be:	ee67 4aa6 	vmul.f32	s9, s15, s13
 80056c2:	ee26 5a25 	vmul.f32	s10, s12, s11
 80056c6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80056ca:	ee26 6a26 	vmul.f32	s12, s12, s13
 80056ce:	ee27 7a25 	vmul.f32	s14, s14, s11
 80056d2:	ee63 6a26 	vmul.f32	s13, s6, s13
 80056d6:	ee23 3a25 	vmul.f32	s6, s6, s11
 80056da:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80056de:	ee75 5a24 	vadd.f32	s11, s10, s9
 80056e2:	ee32 3ac3 	vsub.f32	s6, s5, s6
 80056e6:	ee36 7a87 	vadd.f32	s14, s13, s14
 80056ea:	f1bb 0b01 	subs.w	fp, fp, #1
 80056ee:	ed42 5a02 	vstr	s11, [r2, #-8]
 80056f2:	ed42 7a01 	vstr	s15, [r2, #-4]
 80056f6:	f10e 0e08 	add.w	lr, lr, #8
 80056fa:	ed83 3a02 	vstr	s6, [r3, #8]
 80056fe:	ed83 7a01 	vstr	s14, [r3, #4]
 8005702:	f1ac 0c08 	sub.w	ip, ip, #8
 8005706:	f10a 0a08 	add.w	sl, sl, #8
 800570a:	f100 0008 	add.w	r0, r0, #8
 800570e:	f1a1 0108 	sub.w	r1, r1, #8
 8005712:	f109 0910 	add.w	r9, r9, #16
 8005716:	f105 0508 	add.w	r5, r5, #8
 800571a:	f1a4 0408 	sub.w	r4, r4, #8
 800571e:	f108 0818 	add.w	r8, r8, #24
 8005722:	f102 0208 	add.w	r2, r2, #8
 8005726:	f1a3 0308 	sub.w	r3, r3, #8
 800572a:	f47f aefc 	bne.w	8005526 <arm_cfft_radix8by4_f32+0x12e>
 800572e:	9907      	ldr	r1, [sp, #28]
 8005730:	9800      	ldr	r0, [sp, #0]
 8005732:	00cb      	lsls	r3, r1, #3
 8005734:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8005738:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800573c:	9100      	str	r1, [sp, #0]
 800573e:	9904      	ldr	r1, [sp, #16]
 8005740:	4419      	add	r1, r3
 8005742:	9104      	str	r1, [sp, #16]
 8005744:	9903      	ldr	r1, [sp, #12]
 8005746:	4419      	add	r1, r3
 8005748:	9103      	str	r1, [sp, #12]
 800574a:	9906      	ldr	r1, [sp, #24]
 800574c:	4419      	add	r1, r3
 800574e:	9106      	str	r1, [sp, #24]
 8005750:	9905      	ldr	r1, [sp, #20]
 8005752:	441f      	add	r7, r3
 8005754:	4419      	add	r1, r3
 8005756:	9b02      	ldr	r3, [sp, #8]
 8005758:	9105      	str	r1, [sp, #20]
 800575a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800575e:	9302      	str	r3, [sp, #8]
 8005760:	9904      	ldr	r1, [sp, #16]
 8005762:	9805      	ldr	r0, [sp, #20]
 8005764:	ed91 4a00 	vldr	s8, [r1]
 8005768:	edd0 6a00 	vldr	s13, [r0]
 800576c:	9b06      	ldr	r3, [sp, #24]
 800576e:	ed97 3a00 	vldr	s6, [r7]
 8005772:	edd3 7a00 	vldr	s15, [r3]
 8005776:	edd0 4a01 	vldr	s9, [r0, #4]
 800577a:	edd1 3a01 	vldr	s7, [r1, #4]
 800577e:	ed97 2a01 	vldr	s4, [r7, #4]
 8005782:	ed93 7a01 	vldr	s14, [r3, #4]
 8005786:	9a03      	ldr	r2, [sp, #12]
 8005788:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 800578c:	ee34 6a26 	vadd.f32	s12, s8, s13
 8005790:	ee73 5aa4 	vadd.f32	s11, s7, s9
 8005794:	ee37 5a86 	vadd.f32	s10, s15, s12
 8005798:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800579c:	ee35 5a03 	vadd.f32	s10, s10, s6
 80057a0:	ee74 6a66 	vsub.f32	s13, s8, s13
 80057a4:	ed81 5a00 	vstr	s10, [r1]
 80057a8:	ed93 5a01 	vldr	s10, [r3, #4]
 80057ac:	edd7 4a01 	vldr	s9, [r7, #4]
 80057b0:	ee35 5a85 	vadd.f32	s10, s11, s10
 80057b4:	ee37 4a26 	vadd.f32	s8, s14, s13
 80057b8:	ee35 5a24 	vadd.f32	s10, s10, s9
 80057bc:	ee73 4ae7 	vsub.f32	s9, s7, s15
 80057c0:	ed81 5a01 	vstr	s10, [r1, #4]
 80057c4:	edd2 1a00 	vldr	s3, [r2]
 80057c8:	edd2 2a01 	vldr	s5, [r2, #4]
 80057cc:	ee34 5a83 	vadd.f32	s10, s9, s6
 80057d0:	ee34 4a42 	vsub.f32	s8, s8, s4
 80057d4:	ee36 6a67 	vsub.f32	s12, s12, s15
 80057d8:	ee64 4a21 	vmul.f32	s9, s8, s3
 80057dc:	ee24 4a22 	vmul.f32	s8, s8, s5
 80057e0:	ee65 2a22 	vmul.f32	s5, s10, s5
 80057e4:	ee25 5a21 	vmul.f32	s10, s10, s3
 80057e8:	ee74 2aa2 	vadd.f32	s5, s9, s5
 80057ec:	ee35 5a44 	vsub.f32	s10, s10, s8
 80057f0:	edc3 2a00 	vstr	s5, [r3]
 80057f4:	ed83 5a01 	vstr	s10, [r3, #4]
 80057f8:	ee75 5ac7 	vsub.f32	s11, s11, s14
 80057fc:	9b00      	ldr	r3, [sp, #0]
 80057fe:	ee36 6a43 	vsub.f32	s12, s12, s6
 8005802:	ed93 4a01 	vldr	s8, [r3, #4]
 8005806:	ed93 5a00 	vldr	s10, [r3]
 800580a:	9b02      	ldr	r3, [sp, #8]
 800580c:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8005810:	ee66 4a05 	vmul.f32	s9, s12, s10
 8005814:	ee25 5a85 	vmul.f32	s10, s11, s10
 8005818:	ee26 6a04 	vmul.f32	s12, s12, s8
 800581c:	ee65 5a84 	vmul.f32	s11, s11, s8
 8005820:	ee35 6a46 	vsub.f32	s12, s10, s12
 8005824:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8005828:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800582c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8005830:	ed80 6a01 	vstr	s12, [r0, #4]
 8005834:	edc0 5a00 	vstr	s11, [r0]
 8005838:	edd3 5a01 	vldr	s11, [r3, #4]
 800583c:	edd3 6a00 	vldr	s13, [r3]
 8005840:	ee37 7a02 	vadd.f32	s14, s14, s4
 8005844:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8005848:	ee27 6a26 	vmul.f32	s12, s14, s13
 800584c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005850:	ee27 7a25 	vmul.f32	s14, s14, s11
 8005854:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005858:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800585c:	ee76 7a27 	vadd.f32	s15, s12, s15
 8005860:	ed87 7a01 	vstr	s14, [r7, #4]
 8005864:	edc7 7a00 	vstr	s15, [r7]
 8005868:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	; 0x28
 800586c:	4621      	mov	r1, r4
 800586e:	686a      	ldr	r2, [r5, #4]
 8005870:	2304      	movs	r3, #4
 8005872:	f000 fabb 	bl	8005dec <arm_radix8_butterfly_f32>
 8005876:	4630      	mov	r0, r6
 8005878:	4621      	mov	r1, r4
 800587a:	686a      	ldr	r2, [r5, #4]
 800587c:	2304      	movs	r3, #4
 800587e:	f000 fab5 	bl	8005dec <arm_radix8_butterfly_f32>
 8005882:	9808      	ldr	r0, [sp, #32]
 8005884:	686a      	ldr	r2, [r5, #4]
 8005886:	4621      	mov	r1, r4
 8005888:	2304      	movs	r3, #4
 800588a:	f000 faaf 	bl	8005dec <arm_radix8_butterfly_f32>
 800588e:	686a      	ldr	r2, [r5, #4]
 8005890:	9801      	ldr	r0, [sp, #4]
 8005892:	4621      	mov	r1, r4
 8005894:	2304      	movs	r3, #4
 8005896:	b00d      	add	sp, #52	; 0x34
 8005898:	ecbd 8b0a 	vpop	{d8-d12}
 800589c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058a0:	f000 baa4 	b.w	8005dec <arm_radix8_butterfly_f32>

080058a4 <arm_cfft_f32>:
 80058a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058a8:	2a01      	cmp	r2, #1
 80058aa:	4606      	mov	r6, r0
 80058ac:	4617      	mov	r7, r2
 80058ae:	460c      	mov	r4, r1
 80058b0:	4698      	mov	r8, r3
 80058b2:	8805      	ldrh	r5, [r0, #0]
 80058b4:	d056      	beq.n	8005964 <arm_cfft_f32+0xc0>
 80058b6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80058ba:	d063      	beq.n	8005984 <arm_cfft_f32+0xe0>
 80058bc:	d916      	bls.n	80058ec <arm_cfft_f32+0x48>
 80058be:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80058c2:	d01a      	beq.n	80058fa <arm_cfft_f32+0x56>
 80058c4:	d947      	bls.n	8005956 <arm_cfft_f32+0xb2>
 80058c6:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 80058ca:	d05b      	beq.n	8005984 <arm_cfft_f32+0xe0>
 80058cc:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 80058d0:	d105      	bne.n	80058de <arm_cfft_f32+0x3a>
 80058d2:	2301      	movs	r3, #1
 80058d4:	6872      	ldr	r2, [r6, #4]
 80058d6:	4629      	mov	r1, r5
 80058d8:	4620      	mov	r0, r4
 80058da:	f000 fa87 	bl	8005dec <arm_radix8_butterfly_f32>
 80058de:	f1b8 0f00 	cmp.w	r8, #0
 80058e2:	d111      	bne.n	8005908 <arm_cfft_f32+0x64>
 80058e4:	2f01      	cmp	r7, #1
 80058e6:	d016      	beq.n	8005916 <arm_cfft_f32+0x72>
 80058e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058ec:	2d20      	cmp	r5, #32
 80058ee:	d049      	beq.n	8005984 <arm_cfft_f32+0xe0>
 80058f0:	d935      	bls.n	800595e <arm_cfft_f32+0xba>
 80058f2:	2d40      	cmp	r5, #64	; 0x40
 80058f4:	d0ed      	beq.n	80058d2 <arm_cfft_f32+0x2e>
 80058f6:	2d80      	cmp	r5, #128	; 0x80
 80058f8:	d1f1      	bne.n	80058de <arm_cfft_f32+0x3a>
 80058fa:	4621      	mov	r1, r4
 80058fc:	4630      	mov	r0, r6
 80058fe:	f7ff fcab 	bl	8005258 <arm_cfft_radix8by2_f32>
 8005902:	f1b8 0f00 	cmp.w	r8, #0
 8005906:	d0ed      	beq.n	80058e4 <arm_cfft_f32+0x40>
 8005908:	68b2      	ldr	r2, [r6, #8]
 800590a:	89b1      	ldrh	r1, [r6, #12]
 800590c:	4620      	mov	r0, r4
 800590e:	f000 f841 	bl	8005994 <arm_bitreversal_32>
 8005912:	2f01      	cmp	r7, #1
 8005914:	d1e8      	bne.n	80058e8 <arm_cfft_f32+0x44>
 8005916:	ee07 5a90 	vmov	s15, r5
 800591a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800591e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005922:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005926:	2d00      	cmp	r5, #0
 8005928:	d0de      	beq.n	80058e8 <arm_cfft_f32+0x44>
 800592a:	f104 0108 	add.w	r1, r4, #8
 800592e:	2300      	movs	r3, #0
 8005930:	3301      	adds	r3, #1
 8005932:	429d      	cmp	r5, r3
 8005934:	f101 0108 	add.w	r1, r1, #8
 8005938:	ed11 7a04 	vldr	s14, [r1, #-16]
 800593c:	ed51 7a03 	vldr	s15, [r1, #-12]
 8005940:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005944:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8005948:	ed01 7a04 	vstr	s14, [r1, #-16]
 800594c:	ed41 7a03 	vstr	s15, [r1, #-12]
 8005950:	d1ee      	bne.n	8005930 <arm_cfft_f32+0x8c>
 8005952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005956:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800595a:	d0ba      	beq.n	80058d2 <arm_cfft_f32+0x2e>
 800595c:	e7bf      	b.n	80058de <arm_cfft_f32+0x3a>
 800595e:	2d10      	cmp	r5, #16
 8005960:	d0cb      	beq.n	80058fa <arm_cfft_f32+0x56>
 8005962:	e7bc      	b.n	80058de <arm_cfft_f32+0x3a>
 8005964:	b19d      	cbz	r5, 800598e <arm_cfft_f32+0xea>
 8005966:	f101 030c 	add.w	r3, r1, #12
 800596a:	2200      	movs	r2, #0
 800596c:	ed53 7a02 	vldr	s15, [r3, #-8]
 8005970:	3201      	adds	r2, #1
 8005972:	eef1 7a67 	vneg.f32	s15, s15
 8005976:	4295      	cmp	r5, r2
 8005978:	ed43 7a02 	vstr	s15, [r3, #-8]
 800597c:	f103 0308 	add.w	r3, r3, #8
 8005980:	d1f4      	bne.n	800596c <arm_cfft_f32+0xc8>
 8005982:	e798      	b.n	80058b6 <arm_cfft_f32+0x12>
 8005984:	4621      	mov	r1, r4
 8005986:	4630      	mov	r0, r6
 8005988:	f7ff fd36 	bl	80053f8 <arm_cfft_radix8by4_f32>
 800598c:	e7a7      	b.n	80058de <arm_cfft_f32+0x3a>
 800598e:	2b00      	cmp	r3, #0
 8005990:	d0aa      	beq.n	80058e8 <arm_cfft_f32+0x44>
 8005992:	e7b9      	b.n	8005908 <arm_cfft_f32+0x64>

08005994 <arm_bitreversal_32>:
 8005994:	b1e9      	cbz	r1, 80059d2 <arm_bitreversal_32+0x3e>
 8005996:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005998:	2500      	movs	r5, #0
 800599a:	f102 0e02 	add.w	lr, r2, #2
 800599e:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 80059a2:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 80059a6:	08a4      	lsrs	r4, r4, #2
 80059a8:	089b      	lsrs	r3, r3, #2
 80059aa:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 80059ae:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 80059b2:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 80059b6:	00a6      	lsls	r6, r4, #2
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 80059be:	3304      	adds	r3, #4
 80059c0:	1d34      	adds	r4, r6, #4
 80059c2:	3502      	adds	r5, #2
 80059c4:	58c6      	ldr	r6, [r0, r3]
 80059c6:	5907      	ldr	r7, [r0, r4]
 80059c8:	50c7      	str	r7, [r0, r3]
 80059ca:	428d      	cmp	r5, r1
 80059cc:	5106      	str	r6, [r0, r4]
 80059ce:	d3e6      	bcc.n	800599e <arm_bitreversal_32+0xa>
 80059d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059d2:	4770      	bx	lr

080059d4 <arm_cmplx_mag_f32>:
 80059d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059d8:	ed2d 8b02 	vpush	{d8}
 80059dc:	0897      	lsrs	r7, r2, #2
 80059de:	b084      	sub	sp, #16
 80059e0:	d077      	beq.n	8005ad2 <arm_cmplx_mag_f32+0xfe>
 80059e2:	f04f 0800 	mov.w	r8, #0
 80059e6:	f100 0420 	add.w	r4, r0, #32
 80059ea:	f101 0510 	add.w	r5, r1, #16
 80059ee:	463e      	mov	r6, r7
 80059f0:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 80059f4:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
 80059f8:	ee20 0a00 	vmul.f32	s0, s0, s0
 80059fc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005a00:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005a04:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a0c:	f2c0 80c5 	blt.w	8005b9a <arm_cmplx_mag_f32+0x1c6>
 8005a10:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8005a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a18:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8005a1c:	f100 80cb 	bmi.w	8005bb6 <arm_cmplx_mag_f32+0x1e2>
 8005a20:	ed05 8a04 	vstr	s16, [r5, #-16]
 8005a24:	ed14 0a06 	vldr	s0, [r4, #-24]	; 0xffffffe8
 8005a28:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 8005a2c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8005a30:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005a34:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005a38:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a40:	f2c0 80a8 	blt.w	8005b94 <arm_cmplx_mag_f32+0x1c0>
 8005a44:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8005a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a4c:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8005a50:	f100 80a8 	bmi.w	8005ba4 <arm_cmplx_mag_f32+0x1d0>
 8005a54:	ed05 8a03 	vstr	s16, [r5, #-12]
 8005a58:	ed14 0a04 	vldr	s0, [r4, #-16]
 8005a5c:	ed54 7a03 	vldr	s15, [r4, #-12]
 8005a60:	ee20 0a00 	vmul.f32	s0, s0, s0
 8005a64:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005a68:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005a6c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a74:	f2c0 808b 	blt.w	8005b8e <arm_cmplx_mag_f32+0x1ba>
 8005a78:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8005a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a80:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8005a84:	f100 80a9 	bmi.w	8005bda <arm_cmplx_mag_f32+0x206>
 8005a88:	ed05 8a02 	vstr	s16, [r5, #-8]
 8005a8c:	ed14 0a02 	vldr	s0, [r4, #-8]
 8005a90:	ed54 7a01 	vldr	s15, [r4, #-4]
 8005a94:	ee20 0a00 	vmul.f32	s0, s0, s0
 8005a98:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005a9c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005aa0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aa8:	db6e      	blt.n	8005b88 <arm_cmplx_mag_f32+0x1b4>
 8005aaa:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8005aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ab2:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8005ab6:	f100 8087 	bmi.w	8005bc8 <arm_cmplx_mag_f32+0x1f4>
 8005aba:	ed05 8a01 	vstr	s16, [r5, #-4]
 8005abe:	3e01      	subs	r6, #1
 8005ac0:	f104 0420 	add.w	r4, r4, #32
 8005ac4:	f105 0510 	add.w	r5, r5, #16
 8005ac8:	d192      	bne.n	80059f0 <arm_cmplx_mag_f32+0x1c>
 8005aca:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 8005ace:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 8005ad2:	f012 0203 	ands.w	r2, r2, #3
 8005ad6:	d052      	beq.n	8005b7e <arm_cmplx_mag_f32+0x1aa>
 8005ad8:	ed90 0a00 	vldr	s0, [r0]
 8005adc:	edd0 7a01 	vldr	s15, [r0, #4]
 8005ae0:	ee20 0a00 	vmul.f32	s0, s0, s0
 8005ae4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005ae8:	2300      	movs	r3, #0
 8005aea:	ee37 0a80 	vadd.f32	s0, s15, s0
 8005aee:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005af6:	bfb8      	it	lt
 8005af8:	600b      	strlt	r3, [r1, #0]
 8005afa:	db08      	blt.n	8005b0e <arm_cmplx_mag_f32+0x13a>
 8005afc:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8005b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b04:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8005b08:	d479      	bmi.n	8005bfe <arm_cmplx_mag_f32+0x22a>
 8005b0a:	ed81 8a00 	vstr	s16, [r1]
 8005b0e:	3a01      	subs	r2, #1
 8005b10:	d035      	beq.n	8005b7e <arm_cmplx_mag_f32+0x1aa>
 8005b12:	ed90 0a02 	vldr	s0, [r0, #8]
 8005b16:	edd0 7a03 	vldr	s15, [r0, #12]
 8005b1a:	ee20 0a00 	vmul.f32	s0, s0, s0
 8005b1e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005b22:	2300      	movs	r3, #0
 8005b24:	ee37 0a80 	vadd.f32	s0, s15, s0
 8005b28:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b30:	bfb8      	it	lt
 8005b32:	604b      	strlt	r3, [r1, #4]
 8005b34:	db08      	blt.n	8005b48 <arm_cmplx_mag_f32+0x174>
 8005b36:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8005b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b3e:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8005b42:	d453      	bmi.n	8005bec <arm_cmplx_mag_f32+0x218>
 8005b44:	ed81 8a01 	vstr	s16, [r1, #4]
 8005b48:	2a01      	cmp	r2, #1
 8005b4a:	d018      	beq.n	8005b7e <arm_cmplx_mag_f32+0x1aa>
 8005b4c:	ed90 0a04 	vldr	s0, [r0, #16]
 8005b50:	edd0 7a05 	vldr	s15, [r0, #20]
 8005b54:	ee20 0a00 	vmul.f32	s0, s0, s0
 8005b58:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005b62:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b6a:	db19      	blt.n	8005ba0 <arm_cmplx_mag_f32+0x1cc>
 8005b6c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8005b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b74:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8005b78:	d44a      	bmi.n	8005c10 <arm_cmplx_mag_f32+0x23c>
 8005b7a:	ed81 8a02 	vstr	s16, [r1, #8]
 8005b7e:	b004      	add	sp, #16
 8005b80:	ecbd 8b02 	vpop	{d8}
 8005b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b88:	f845 8c04 	str.w	r8, [r5, #-4]
 8005b8c:	e797      	b.n	8005abe <arm_cmplx_mag_f32+0xea>
 8005b8e:	f845 8c08 	str.w	r8, [r5, #-8]
 8005b92:	e77b      	b.n	8005a8c <arm_cmplx_mag_f32+0xb8>
 8005b94:	f845 8c0c 	str.w	r8, [r5, #-12]
 8005b98:	e75e      	b.n	8005a58 <arm_cmplx_mag_f32+0x84>
 8005b9a:	f845 8c10 	str.w	r8, [r5, #-16]
 8005b9e:	e741      	b.n	8005a24 <arm_cmplx_mag_f32+0x50>
 8005ba0:	608b      	str	r3, [r1, #8]
 8005ba2:	e7ec      	b.n	8005b7e <arm_cmplx_mag_f32+0x1aa>
 8005ba4:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8005ba8:	9001      	str	r0, [sp, #4]
 8005baa:	f000 fbdf 	bl	800636c <sqrtf>
 8005bae:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8005bb2:	9801      	ldr	r0, [sp, #4]
 8005bb4:	e74e      	b.n	8005a54 <arm_cmplx_mag_f32+0x80>
 8005bb6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8005bba:	9001      	str	r0, [sp, #4]
 8005bbc:	f000 fbd6 	bl	800636c <sqrtf>
 8005bc0:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8005bc4:	9801      	ldr	r0, [sp, #4]
 8005bc6:	e72b      	b.n	8005a20 <arm_cmplx_mag_f32+0x4c>
 8005bc8:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8005bcc:	9001      	str	r0, [sp, #4]
 8005bce:	f000 fbcd 	bl	800636c <sqrtf>
 8005bd2:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8005bd6:	9801      	ldr	r0, [sp, #4]
 8005bd8:	e76f      	b.n	8005aba <arm_cmplx_mag_f32+0xe6>
 8005bda:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8005bde:	9001      	str	r0, [sp, #4]
 8005be0:	f000 fbc4 	bl	800636c <sqrtf>
 8005be4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8005be8:	9801      	ldr	r0, [sp, #4]
 8005bea:	e74d      	b.n	8005a88 <arm_cmplx_mag_f32+0xb4>
 8005bec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005bf0:	9201      	str	r2, [sp, #4]
 8005bf2:	f000 fbbb 	bl	800636c <sqrtf>
 8005bf6:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8005bfa:	9903      	ldr	r1, [sp, #12]
 8005bfc:	e7a2      	b.n	8005b44 <arm_cmplx_mag_f32+0x170>
 8005bfe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c02:	9201      	str	r2, [sp, #4]
 8005c04:	f000 fbb2 	bl	800636c <sqrtf>
 8005c08:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8005c0c:	9903      	ldr	r1, [sp, #12]
 8005c0e:	e77c      	b.n	8005b0a <arm_cmplx_mag_f32+0x136>
 8005c10:	9101      	str	r1, [sp, #4]
 8005c12:	f000 fbab 	bl	800636c <sqrtf>
 8005c16:	9901      	ldr	r1, [sp, #4]
 8005c18:	e7af      	b.n	8005b7a <arm_cmplx_mag_f32+0x1a6>
 8005c1a:	bf00      	nop

08005c1c <arm_cos_f32>:
 8005c1c:	eddf 7a21 	vldr	s15, [pc, #132]	; 8005ca4 <arm_cos_f32+0x88>
 8005c20:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005c24:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8005c28:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005c2c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c34:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005c38:	d504      	bpl.n	8005c44 <arm_cos_f32+0x28>
 8005c3a:	ee17 3a90 	vmov	r3, s15
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	ee07 3a90 	vmov	s15, r3
 8005c44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c48:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8005ca8 <arm_cos_f32+0x8c>
 8005c4c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005c50:	ee20 0a07 	vmul.f32	s0, s0, s14
 8005c54:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8005c58:	ee17 3a90 	vmov	r3, s15
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c62:	d21a      	bcs.n	8005c9a <arm_cos_f32+0x7e>
 8005c64:	ee07 3a90 	vmov	s15, r3
 8005c68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c6c:	1c59      	adds	r1, r3, #1
 8005c6e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005c72:	4a0e      	ldr	r2, [pc, #56]	; (8005cac <arm_cos_f32+0x90>)
 8005c74:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005c78:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005c7c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8005c80:	ed93 7a00 	vldr	s14, [r3]
 8005c84:	edd2 6a00 	vldr	s13, [r2]
 8005c88:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8005c8c:	ee20 0a26 	vmul.f32	s0, s0, s13
 8005c90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c94:	ee37 0a80 	vadd.f32	s0, s15, s0
 8005c98:	4770      	bx	lr
 8005c9a:	ee30 0a47 	vsub.f32	s0, s0, s14
 8005c9e:	2101      	movs	r1, #1
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	e7e6      	b.n	8005c72 <arm_cos_f32+0x56>
 8005ca4:	3e22f983 	.word	0x3e22f983
 8005ca8:	44000000 	.word	0x44000000
 8005cac:	0800c468 	.word	0x0800c468

08005cb0 <arm_scale_f32>:
 8005cb0:	b470      	push	{r4, r5, r6}
 8005cb2:	0896      	lsrs	r6, r2, #2
 8005cb4:	d025      	beq.n	8005d02 <arm_scale_f32+0x52>
 8005cb6:	f100 0410 	add.w	r4, r0, #16
 8005cba:	f101 0310 	add.w	r3, r1, #16
 8005cbe:	4635      	mov	r5, r6
 8005cc0:	ed54 7a04 	vldr	s15, [r4, #-16]
 8005cc4:	ee67 7a80 	vmul.f32	s15, s15, s0
 8005cc8:	3d01      	subs	r5, #1
 8005cca:	ed43 7a04 	vstr	s15, [r3, #-16]
 8005cce:	ed54 7a03 	vldr	s15, [r4, #-12]
 8005cd2:	ee67 7a80 	vmul.f32	s15, s15, s0
 8005cd6:	f104 0410 	add.w	r4, r4, #16
 8005cda:	ed43 7a03 	vstr	s15, [r3, #-12]
 8005cde:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 8005ce2:	ee67 7a80 	vmul.f32	s15, s15, s0
 8005ce6:	f103 0310 	add.w	r3, r3, #16
 8005cea:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 8005cee:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 8005cf2:	ee67 7a80 	vmul.f32	s15, s15, s0
 8005cf6:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8005cfa:	d1e1      	bne.n	8005cc0 <arm_scale_f32+0x10>
 8005cfc:	0136      	lsls	r6, r6, #4
 8005cfe:	4430      	add	r0, r6
 8005d00:	4431      	add	r1, r6
 8005d02:	f012 0203 	ands.w	r2, r2, #3
 8005d06:	d015      	beq.n	8005d34 <arm_scale_f32+0x84>
 8005d08:	edd0 7a00 	vldr	s15, [r0]
 8005d0c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8005d10:	3a01      	subs	r2, #1
 8005d12:	edc1 7a00 	vstr	s15, [r1]
 8005d16:	d00d      	beq.n	8005d34 <arm_scale_f32+0x84>
 8005d18:	edd0 7a01 	vldr	s15, [r0, #4]
 8005d1c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8005d20:	2a01      	cmp	r2, #1
 8005d22:	edc1 7a01 	vstr	s15, [r1, #4]
 8005d26:	d005      	beq.n	8005d34 <arm_scale_f32+0x84>
 8005d28:	edd0 7a02 	vldr	s15, [r0, #8]
 8005d2c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8005d30:	ed81 0a02 	vstr	s0, [r1, #8]
 8005d34:	bc70      	pop	{r4, r5, r6}
 8005d36:	4770      	bx	lr

08005d38 <arm_mult_f32>:
 8005d38:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8005d3c:	b4f0      	push	{r4, r5, r6, r7}
 8005d3e:	d033      	beq.n	8005da8 <arm_mult_f32+0x70>
 8005d40:	f100 0610 	add.w	r6, r0, #16
 8005d44:	f101 0510 	add.w	r5, r1, #16
 8005d48:	f102 0410 	add.w	r4, r2, #16
 8005d4c:	4667      	mov	r7, ip
 8005d4e:	ed15 7a04 	vldr	s14, [r5, #-16]
 8005d52:	ed56 7a04 	vldr	s15, [r6, #-16]
 8005d56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d5a:	3f01      	subs	r7, #1
 8005d5c:	ed44 7a04 	vstr	s15, [r4, #-16]
 8005d60:	ed15 7a03 	vldr	s14, [r5, #-12]
 8005d64:	ed56 7a03 	vldr	s15, [r6, #-12]
 8005d68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d6c:	f106 0610 	add.w	r6, r6, #16
 8005d70:	ed44 7a03 	vstr	s15, [r4, #-12]
 8005d74:	ed15 7a02 	vldr	s14, [r5, #-8]
 8005d78:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8005d7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d80:	f105 0510 	add.w	r5, r5, #16
 8005d84:	ed44 7a02 	vstr	s15, [r4, #-8]
 8005d88:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8005d8c:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 8005d90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d94:	f104 0410 	add.w	r4, r4, #16
 8005d98:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8005d9c:	d1d7      	bne.n	8005d4e <arm_mult_f32+0x16>
 8005d9e:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8005da2:	4420      	add	r0, r4
 8005da4:	4421      	add	r1, r4
 8005da6:	4422      	add	r2, r4
 8005da8:	f013 0303 	ands.w	r3, r3, #3
 8005dac:	d01b      	beq.n	8005de6 <arm_mult_f32+0xae>
 8005dae:	edd1 7a00 	vldr	s15, [r1]
 8005db2:	ed90 7a00 	vldr	s14, [r0]
 8005db6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005dba:	3b01      	subs	r3, #1
 8005dbc:	edc2 7a00 	vstr	s15, [r2]
 8005dc0:	d011      	beq.n	8005de6 <arm_mult_f32+0xae>
 8005dc2:	edd0 7a01 	vldr	s15, [r0, #4]
 8005dc6:	ed91 7a01 	vldr	s14, [r1, #4]
 8005dca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	edc2 7a01 	vstr	s15, [r2, #4]
 8005dd4:	d007      	beq.n	8005de6 <arm_mult_f32+0xae>
 8005dd6:	edd0 7a02 	vldr	s15, [r0, #8]
 8005dda:	ed91 7a02 	vldr	s14, [r1, #8]
 8005dde:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005de2:	edc2 7a02 	vstr	s15, [r2, #8]
 8005de6:	bcf0      	pop	{r4, r5, r6, r7}
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop

08005dec <arm_radix8_butterfly_f32>:
 8005dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005df0:	ed2d 8b10 	vpush	{d8-d15}
 8005df4:	b095      	sub	sp, #84	; 0x54
 8005df6:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	3304      	adds	r3, #4
 8005dfe:	ed9f bab9 	vldr	s22, [pc, #740]	; 80060e4 <arm_radix8_butterfly_f32+0x2f8>
 8005e02:	9012      	str	r0, [sp, #72]	; 0x48
 8005e04:	468b      	mov	fp, r1
 8005e06:	9313      	str	r3, [sp, #76]	; 0x4c
 8005e08:	4689      	mov	r9, r1
 8005e0a:	ea4f 06db 	mov.w	r6, fp, lsr #3
 8005e0e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005e10:	960f      	str	r6, [sp, #60]	; 0x3c
 8005e12:	ea4f 1846 	mov.w	r8, r6, lsl #5
 8005e16:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 8005e1a:	eb03 0508 	add.w	r5, r3, r8
 8005e1e:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 8005e22:	eb05 040e 	add.w	r4, r5, lr
 8005e26:	0137      	lsls	r7, r6, #4
 8005e28:	eba6 030a 	sub.w	r3, r6, sl
 8005e2c:	eb04 000e 	add.w	r0, r4, lr
 8005e30:	44b2      	add	sl, r6
 8005e32:	1d3a      	adds	r2, r7, #4
 8005e34:	9702      	str	r7, [sp, #8]
 8005e36:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8005e3a:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 8005e3e:	ebae 0c06 	sub.w	ip, lr, r6
 8005e42:	9703      	str	r7, [sp, #12]
 8005e44:	eb03 0708 	add.w	r7, r3, r8
 8005e48:	9701      	str	r7, [sp, #4]
 8005e4a:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 8005e4e:	9706      	str	r7, [sp, #24]
 8005e50:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8005e52:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8005e56:	f10e 0104 	add.w	r1, lr, #4
 8005e5a:	4439      	add	r1, r7
 8005e5c:	443a      	add	r2, r7
 8005e5e:	0137      	lsls	r7, r6, #4
 8005e60:	00f6      	lsls	r6, r6, #3
 8005e62:	9704      	str	r7, [sp, #16]
 8005e64:	9605      	str	r6, [sp, #20]
 8005e66:	9f01      	ldr	r7, [sp, #4]
 8005e68:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8005e6a:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 8005e6e:	f04f 0c00 	mov.w	ip, #0
 8005e72:	edd4 6a00 	vldr	s13, [r4]
 8005e76:	edd7 1a00 	vldr	s3, [r7]
 8005e7a:	ed16 aa01 	vldr	s20, [r6, #-4]
 8005e7e:	edd5 5a00 	vldr	s11, [r5]
 8005e82:	ed52 9a01 	vldr	s19, [r2, #-4]
 8005e86:	ed90 6a00 	vldr	s12, [r0]
 8005e8a:	ed51 7a01 	vldr	s15, [r1, #-4]
 8005e8e:	ed93 3a00 	vldr	s6, [r3]
 8005e92:	ee39 0a86 	vadd.f32	s0, s19, s12
 8005e96:	ee33 2a21 	vadd.f32	s4, s6, s3
 8005e9a:	ee37 5aa6 	vadd.f32	s10, s15, s13
 8005e9e:	ee7a 4a25 	vadd.f32	s9, s20, s11
 8005ea2:	ee35 7a02 	vadd.f32	s14, s10, s4
 8005ea6:	ee34 4a80 	vadd.f32	s8, s9, s0
 8005eaa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005eae:	ee74 6a07 	vadd.f32	s13, s8, s14
 8005eb2:	ee34 4a47 	vsub.f32	s8, s8, s14
 8005eb6:	ed46 6a01 	vstr	s13, [r6, #-4]
 8005eba:	ed85 4a00 	vstr	s8, [r5]
 8005ebe:	edd1 6a00 	vldr	s13, [r1]
 8005ec2:	ed94 9a01 	vldr	s18, [r4, #4]
 8005ec6:	edd3 2a01 	vldr	s5, [r3, #4]
 8005eca:	edd7 8a01 	vldr	s17, [r7, #4]
 8005ece:	edd6 0a00 	vldr	s1, [r6]
 8005ed2:	edd5 3a01 	vldr	s7, [r5, #4]
 8005ed6:	ed90 8a01 	vldr	s16, [r0, #4]
 8005eda:	ed92 7a00 	vldr	s14, [r2]
 8005ede:	ee33 3a61 	vsub.f32	s6, s6, s3
 8005ee2:	ee36 4ac9 	vsub.f32	s8, s13, s18
 8005ee6:	ee72 aae8 	vsub.f32	s21, s5, s17
 8005eea:	ee77 1ac3 	vsub.f32	s3, s15, s6
 8005eee:	ee34 1a2a 	vadd.f32	s2, s8, s21
 8005ef2:	ee77 7a83 	vadd.f32	s15, s15, s6
 8005ef6:	ee34 4a6a 	vsub.f32	s8, s8, s21
 8005efa:	ee30 3aa3 	vadd.f32	s6, s1, s7
 8005efe:	ee39 6ac6 	vsub.f32	s12, s19, s12
 8005f02:	ee70 3ae3 	vsub.f32	s7, s1, s7
 8005f06:	ee72 2aa8 	vadd.f32	s5, s5, s17
 8005f0a:	ee77 0a08 	vadd.f32	s1, s14, s16
 8005f0e:	ee21 1a0b 	vmul.f32	s2, s2, s22
 8005f12:	ee37 7a48 	vsub.f32	s14, s14, s16
 8005f16:	ee61 1a8b 	vmul.f32	s3, s3, s22
 8005f1a:	ee7a 5a65 	vsub.f32	s11, s20, s11
 8005f1e:	ee76 6a89 	vadd.f32	s13, s13, s18
 8005f22:	ee24 4a0b 	vmul.f32	s8, s8, s22
 8005f26:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8005f2a:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8005f2e:	ee35 5a42 	vsub.f32	s10, s10, s4
 8005f32:	ee36 0aa2 	vadd.f32	s0, s13, s5
 8005f36:	ee33 2a20 	vadd.f32	s4, s6, s1
 8005f3a:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8005f3e:	ee33 3a60 	vsub.f32	s6, s6, s1
 8005f42:	ee75 2aa1 	vadd.f32	s5, s11, s3
 8005f46:	ee77 0a01 	vadd.f32	s1, s14, s2
 8005f4a:	ee75 5ae1 	vsub.f32	s11, s11, s3
 8005f4e:	ee37 7a41 	vsub.f32	s14, s14, s2
 8005f52:	ee73 1a84 	vadd.f32	s3, s7, s8
 8005f56:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8005f5a:	ee76 3a27 	vadd.f32	s7, s12, s15
 8005f5e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005f62:	ee32 8a00 	vadd.f32	s16, s4, s0
 8005f66:	ee33 1a45 	vsub.f32	s2, s6, s10
 8005f6a:	ee32 2a40 	vsub.f32	s4, s4, s0
 8005f6e:	ee35 5a03 	vadd.f32	s10, s10, s6
 8005f72:	ee34 0aa6 	vadd.f32	s0, s9, s13
 8005f76:	ee32 3aa0 	vadd.f32	s6, s5, s1
 8005f7a:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8005f7e:	ee34 6a67 	vsub.f32	s12, s8, s15
 8005f82:	ee75 4a87 	vadd.f32	s9, s11, s14
 8005f86:	ee72 2ae0 	vsub.f32	s5, s5, s1
 8005f8a:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8005f8e:	ee77 7a84 	vadd.f32	s15, s15, s8
 8005f92:	ee71 5ae3 	vsub.f32	s11, s3, s7
 8005f96:	44dc      	add	ip, fp
 8005f98:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8005f9c:	45e1      	cmp	r9, ip
 8005f9e:	ed86 8a00 	vstr	s16, [r6]
 8005fa2:	ed85 2a01 	vstr	s4, [r5, #4]
 8005fa6:	4456      	add	r6, sl
 8005fa8:	ed02 0a01 	vstr	s0, [r2, #-4]
 8005fac:	4455      	add	r5, sl
 8005fae:	edc0 6a00 	vstr	s13, [r0]
 8005fb2:	ed82 1a00 	vstr	s2, [r2]
 8005fb6:	ed80 5a01 	vstr	s10, [r0, #4]
 8005fba:	4452      	add	r2, sl
 8005fbc:	ed01 3a01 	vstr	s6, [r1, #-4]
 8005fc0:	4450      	add	r0, sl
 8005fc2:	edc7 2a00 	vstr	s5, [r7]
 8005fc6:	edc4 4a00 	vstr	s9, [r4]
 8005fca:	ed83 7a00 	vstr	s14, [r3]
 8005fce:	edc1 5a00 	vstr	s11, [r1]
 8005fd2:	edc7 3a01 	vstr	s7, [r7, #4]
 8005fd6:	4451      	add	r1, sl
 8005fd8:	ed84 6a01 	vstr	s12, [r4, #4]
 8005fdc:	4457      	add	r7, sl
 8005fde:	edc3 7a01 	vstr	s15, [r3, #4]
 8005fe2:	4454      	add	r4, sl
 8005fe4:	4453      	add	r3, sl
 8005fe6:	f63f af44 	bhi.w	8005e72 <arm_radix8_butterfly_f32+0x86>
 8005fea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005fec:	2b07      	cmp	r3, #7
 8005fee:	f240 81b7 	bls.w	8006360 <arm_radix8_butterfly_f32+0x574>
 8005ff2:	9b06      	ldr	r3, [sp, #24]
 8005ff4:	9903      	ldr	r1, [sp, #12]
 8005ff6:	9812      	ldr	r0, [sp, #72]	; 0x48
 8005ff8:	9e05      	ldr	r6, [sp, #20]
 8005ffa:	9a04      	ldr	r2, [sp, #16]
 8005ffc:	f103 0c08 	add.w	ip, r3, #8
 8006000:	9b02      	ldr	r3, [sp, #8]
 8006002:	3108      	adds	r1, #8
 8006004:	f108 0808 	add.w	r8, r8, #8
 8006008:	1841      	adds	r1, r0, r1
 800600a:	3608      	adds	r6, #8
 800600c:	330c      	adds	r3, #12
 800600e:	4604      	mov	r4, r0
 8006010:	4444      	add	r4, r8
 8006012:	18c3      	adds	r3, r0, r3
 8006014:	9109      	str	r1, [sp, #36]	; 0x24
 8006016:	1981      	adds	r1, r0, r6
 8006018:	f10e 0e08 	add.w	lr, lr, #8
 800601c:	3208      	adds	r2, #8
 800601e:	940b      	str	r4, [sp, #44]	; 0x2c
 8006020:	9107      	str	r1, [sp, #28]
 8006022:	4604      	mov	r4, r0
 8006024:	4601      	mov	r1, r0
 8006026:	9304      	str	r3, [sp, #16]
 8006028:	f100 030c 	add.w	r3, r0, #12
 800602c:	4474      	add	r4, lr
 800602e:	f04f 0801 	mov.w	r8, #1
 8006032:	1882      	adds	r2, r0, r2
 8006034:	4461      	add	r1, ip
 8006036:	9305      	str	r3, [sp, #20]
 8006038:	464b      	mov	r3, r9
 800603a:	940a      	str	r4, [sp, #40]	; 0x28
 800603c:	46c1      	mov	r9, r8
 800603e:	9208      	str	r2, [sp, #32]
 8006040:	46d8      	mov	r8, fp
 8006042:	9106      	str	r1, [sp, #24]
 8006044:	f04f 0e00 	mov.w	lr, #0
 8006048:	469b      	mov	fp, r3
 800604a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800604c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800604e:	449e      	add	lr, r3
 8006050:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 8006054:	441a      	add	r2, r3
 8006056:	920e      	str	r2, [sp, #56]	; 0x38
 8006058:	441a      	add	r2, r3
 800605a:	18d4      	adds	r4, r2, r3
 800605c:	18e5      	adds	r5, r4, r3
 800605e:	18ee      	adds	r6, r5, r3
 8006060:	18f7      	adds	r7, r6, r3
 8006062:	eb07 0c03 	add.w	ip, r7, r3
 8006066:	920d      	str	r2, [sp, #52]	; 0x34
 8006068:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 800606c:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 8006070:	910c      	str	r1, [sp, #48]	; 0x30
 8006072:	4419      	add	r1, r3
 8006074:	9103      	str	r1, [sp, #12]
 8006076:	4419      	add	r1, r3
 8006078:	18ca      	adds	r2, r1, r3
 800607a:	9202      	str	r2, [sp, #8]
 800607c:	441a      	add	r2, r3
 800607e:	18d0      	adds	r0, r2, r3
 8006080:	ed92 ea01 	vldr	s28, [r2, #4]
 8006084:	9a02      	ldr	r2, [sp, #8]
 8006086:	edd4 7a00 	vldr	s15, [r4]
 800608a:	edd2 da01 	vldr	s27, [r2, #4]
 800608e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006090:	ed91 da01 	vldr	s26, [r1, #4]
 8006094:	ed92 ca01 	vldr	s24, [r2, #4]
 8006098:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800609a:	9903      	ldr	r1, [sp, #12]
 800609c:	edcd 7a03 	vstr	s15, [sp, #12]
 80060a0:	edd2 7a00 	vldr	s15, [r2]
 80060a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80060a6:	edcd 7a02 	vstr	s15, [sp, #8]
 80060aa:	edd2 7a00 	vldr	s15, [r2]
 80060ae:	edd0 ea01 	vldr	s29, [r0, #4]
 80060b2:	edd1 ca01 	vldr	s25, [r1, #4]
 80060b6:	eddc ba00 	vldr	s23, [ip]
 80060ba:	edd7 aa00 	vldr	s21, [r7]
 80060be:	ed96 aa00 	vldr	s20, [r6]
 80060c2:	edd5 9a00 	vldr	s19, [r5]
 80060c6:	edcd 7a01 	vstr	s15, [sp, #4]
 80060ca:	4403      	add	r3, r0
 80060cc:	ed93 fa01 	vldr	s30, [r3, #4]
 80060d0:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 80060d4:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 80060d8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80060dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80060e0:	46cc      	mov	ip, r9
 80060e2:	e001      	b.n	80060e8 <arm_radix8_butterfly_f32+0x2fc>
 80060e4:	3f3504f3 	.word	0x3f3504f3
 80060e8:	ed91 6a00 	vldr	s12, [r1]
 80060ec:	ed93 5a00 	vldr	s10, [r3]
 80060f0:	edd0 fa00 	vldr	s31, [r0]
 80060f4:	edd4 7a00 	vldr	s15, [r4]
 80060f8:	ed95 7a00 	vldr	s14, [r5]
 80060fc:	ed56 3a01 	vldr	s7, [r6, #-4]
 8006100:	ed17 3a01 	vldr	s6, [r7, #-4]
 8006104:	ed92 2a00 	vldr	s4, [r2]
 8006108:	ed96 0a00 	vldr	s0, [r6]
 800610c:	ee33 8a85 	vadd.f32	s16, s7, s10
 8006110:	ee32 1a06 	vadd.f32	s2, s4, s12
 8006114:	ee33 4a2f 	vadd.f32	s8, s6, s31
 8006118:	ee77 4a87 	vadd.f32	s9, s15, s14
 800611c:	ee78 1a04 	vadd.f32	s3, s16, s8
 8006120:	ee71 6a24 	vadd.f32	s13, s2, s9
 8006124:	ee32 2a46 	vsub.f32	s4, s4, s12
 8006128:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800612c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006130:	ed06 6a01 	vstr	s12, [r6, #-4]
 8006134:	edd4 8a01 	vldr	s17, [r4, #4]
 8006138:	ed92 9a01 	vldr	s18, [r2, #4]
 800613c:	edd7 0a00 	vldr	s1, [r7]
 8006140:	edd1 2a01 	vldr	s5, [r1, #4]
 8006144:	ed95 7a01 	vldr	s14, [r5, #4]
 8006148:	ed93 6a01 	vldr	s12, [r3, #4]
 800614c:	edd0 5a01 	vldr	s11, [r0, #4]
 8006150:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8006154:	ee33 3a6f 	vsub.f32	s6, s6, s31
 8006158:	ee39 5a62 	vsub.f32	s10, s18, s5
 800615c:	ee78 fac7 	vsub.f32	s31, s17, s14
 8006160:	ee38 4a44 	vsub.f32	s8, s16, s8
 8006164:	ee38 7a87 	vadd.f32	s14, s17, s14
 8006168:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800616c:	ee79 2a22 	vadd.f32	s5, s18, s5
 8006170:	ee32 9a27 	vadd.f32	s18, s4, s15
 8006174:	ee72 7a67 	vsub.f32	s15, s4, s15
 8006178:	ee30 2a06 	vadd.f32	s4, s0, s12
 800617c:	ee75 8a6f 	vsub.f32	s17, s10, s31
 8006180:	ee71 4a64 	vsub.f32	s9, s2, s9
 8006184:	ee35 5a2f 	vadd.f32	s10, s10, s31
 8006188:	ee32 1a08 	vadd.f32	s2, s4, s16
 800618c:	ee72 fa87 	vadd.f32	s31, s5, s14
 8006190:	ee32 2a48 	vsub.f32	s4, s4, s16
 8006194:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8006198:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800619c:	ee70 5ae5 	vsub.f32	s11, s1, s11
 80061a0:	ee72 2ac7 	vsub.f32	s5, s5, s14
 80061a4:	ee71 6ae6 	vsub.f32	s13, s3, s13
 80061a8:	ee29 9a0b 	vmul.f32	s18, s18, s22
 80061ac:	ee71 1a6f 	vsub.f32	s3, s2, s31
 80061b0:	ee67 7a8b 	vmul.f32	s15, s15, s22
 80061b4:	ee30 6a46 	vsub.f32	s12, s0, s12
 80061b8:	ee74 0a22 	vadd.f32	s1, s8, s5
 80061bc:	ee36 0a28 	vadd.f32	s0, s12, s17
 80061c0:	ee74 2a62 	vsub.f32	s5, s8, s5
 80061c4:	ee36 6a68 	vsub.f32	s12, s12, s17
 80061c8:	ee32 4a64 	vsub.f32	s8, s4, s9
 80061cc:	ee73 8a09 	vadd.f32	s17, s6, s18
 80061d0:	ee74 4a82 	vadd.f32	s9, s9, s4
 80061d4:	ee33 9a49 	vsub.f32	s18, s6, s18
 80061d8:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 80061dc:	ee35 3a85 	vadd.f32	s6, s11, s10
 80061e0:	ee75 5ac5 	vsub.f32	s11, s11, s10
 80061e4:	ee33 5aa7 	vadd.f32	s10, s7, s15
 80061e8:	ee73 7ae7 	vsub.f32	s15, s7, s15
 80061ec:	ee69 3aa6 	vmul.f32	s7, s19, s13
 80061f0:	ee30 7a68 	vsub.f32	s14, s0, s17
 80061f4:	ee35 8a03 	vadd.f32	s16, s10, s6
 80061f8:	ee38 0a80 	vadd.f32	s0, s17, s0
 80061fc:	ee73 3a82 	vadd.f32	s7, s7, s4
 8006200:	ee69 8aa1 	vmul.f32	s17, s19, s3
 8006204:	ed9d 2a01 	vldr	s4, [sp, #4]
 8006208:	eddd 1a02 	vldr	s3, [sp, #8]
 800620c:	ee35 5a43 	vsub.f32	s10, s10, s6
 8006210:	ee71 fa2f 	vadd.f32	s31, s2, s31
 8006214:	ee37 3aa5 	vadd.f32	s6, s15, s11
 8006218:	ee21 1aa0 	vmul.f32	s2, s3, s1
 800621c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8006220:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 8006224:	ee76 5a49 	vsub.f32	s11, s12, s18
 8006228:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 800622c:	ee39 6a06 	vadd.f32	s12, s18, s12
 8006230:	ee2c 9a84 	vmul.f32	s18, s25, s8
 8006234:	ee21 4a84 	vmul.f32	s8, s3, s8
 8006238:	ee6c 1a07 	vmul.f32	s3, s24, s14
 800623c:	ee22 7a07 	vmul.f32	s14, s4, s14
 8006240:	ee22 2a08 	vmul.f32	s4, s4, s16
 8006244:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8006248:	ee78 6ae6 	vsub.f32	s13, s17, s13
 800624c:	ee31 1a09 	vadd.f32	s2, s2, s18
 8006250:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 8006254:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 8006258:	ee74 0a60 	vsub.f32	s1, s8, s1
 800625c:	ee37 7a48 	vsub.f32	s14, s14, s16
 8006260:	ee2f 4a00 	vmul.f32	s8, s30, s0
 8006264:	ee2b 8a85 	vmul.f32	s16, s23, s10
 8006268:	ee72 1a21 	vadd.f32	s3, s4, s3
 800626c:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 8006270:	ee38 2a89 	vadd.f32	s4, s17, s18
 8006274:	ee2f 5a05 	vmul.f32	s10, s30, s10
 8006278:	ee38 8a04 	vadd.f32	s16, s16, s8
 800627c:	ee2e 9a25 	vmul.f32	s18, s28, s11
 8006280:	ee2a 4a25 	vmul.f32	s8, s20, s11
 8006284:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 8006288:	eddd 5a03 	vldr	s11, [sp, #12]
 800628c:	edc6 fa00 	vstr	s31, [r6]
 8006290:	ee2b 0a80 	vmul.f32	s0, s23, s0
 8006294:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8006298:	ee30 0a45 	vsub.f32	s0, s0, s10
 800629c:	ee6a 4a03 	vmul.f32	s9, s20, s6
 80062a0:	ee65 8aa7 	vmul.f32	s17, s11, s15
 80062a4:	ee2d 5a06 	vmul.f32	s10, s26, s12
 80062a8:	ee2e 3a03 	vmul.f32	s6, s28, s6
 80062ac:	ee6d 7a27 	vmul.f32	s15, s26, s15
 80062b0:	ee25 6a86 	vmul.f32	s12, s11, s12
 80062b4:	ee74 4a89 	vadd.f32	s9, s9, s18
 80062b8:	ee34 3a43 	vsub.f32	s6, s8, s6
 80062bc:	ee78 8a85 	vadd.f32	s17, s17, s10
 80062c0:	ee36 6a67 	vsub.f32	s12, s12, s15
 80062c4:	44c4      	add	ip, r8
 80062c6:	45e3      	cmp	fp, ip
 80062c8:	edc3 3a00 	vstr	s7, [r3]
 80062cc:	edc3 6a01 	vstr	s13, [r3, #4]
 80062d0:	4456      	add	r6, sl
 80062d2:	ed07 1a01 	vstr	s2, [r7, #-4]
 80062d6:	edc7 0a00 	vstr	s1, [r7]
 80062da:	4453      	add	r3, sl
 80062dc:	ed80 2a00 	vstr	s4, [r0]
 80062e0:	edc0 2a01 	vstr	s5, [r0, #4]
 80062e4:	4457      	add	r7, sl
 80062e6:	edc2 1a00 	vstr	s3, [r2]
 80062ea:	ed82 7a01 	vstr	s14, [r2, #4]
 80062ee:	4450      	add	r0, sl
 80062f0:	ed85 8a00 	vstr	s16, [r5]
 80062f4:	ed85 0a01 	vstr	s0, [r5, #4]
 80062f8:	4452      	add	r2, sl
 80062fa:	edc1 4a00 	vstr	s9, [r1]
 80062fe:	4455      	add	r5, sl
 8006300:	ed81 3a01 	vstr	s6, [r1, #4]
 8006304:	edc4 8a00 	vstr	s17, [r4]
 8006308:	ed84 6a01 	vstr	s12, [r4, #4]
 800630c:	4451      	add	r1, sl
 800630e:	4454      	add	r4, sl
 8006310:	f63f aeea 	bhi.w	80060e8 <arm_radix8_butterfly_f32+0x2fc>
 8006314:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006316:	3308      	adds	r3, #8
 8006318:	930b      	str	r3, [sp, #44]	; 0x2c
 800631a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800631c:	3308      	adds	r3, #8
 800631e:	930a      	str	r3, [sp, #40]	; 0x28
 8006320:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006322:	3308      	adds	r3, #8
 8006324:	9309      	str	r3, [sp, #36]	; 0x24
 8006326:	9b08      	ldr	r3, [sp, #32]
 8006328:	3308      	adds	r3, #8
 800632a:	9308      	str	r3, [sp, #32]
 800632c:	9b07      	ldr	r3, [sp, #28]
 800632e:	3308      	adds	r3, #8
 8006330:	9307      	str	r3, [sp, #28]
 8006332:	9b06      	ldr	r3, [sp, #24]
 8006334:	3308      	adds	r3, #8
 8006336:	9306      	str	r3, [sp, #24]
 8006338:	9b05      	ldr	r3, [sp, #20]
 800633a:	3308      	adds	r3, #8
 800633c:	9305      	str	r3, [sp, #20]
 800633e:	9b04      	ldr	r3, [sp, #16]
 8006340:	3308      	adds	r3, #8
 8006342:	9304      	str	r3, [sp, #16]
 8006344:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006346:	f109 0901 	add.w	r9, r9, #1
 800634a:	454b      	cmp	r3, r9
 800634c:	f47f ae7d 	bne.w	800604a <arm_radix8_butterfly_f32+0x25e>
 8006350:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006352:	00db      	lsls	r3, r3, #3
 8006354:	b29b      	uxth	r3, r3
 8006356:	46d9      	mov	r9, fp
 8006358:	9310      	str	r3, [sp, #64]	; 0x40
 800635a:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 800635e:	e554      	b.n	8005e0a <arm_radix8_butterfly_f32+0x1e>
 8006360:	b015      	add	sp, #84	; 0x54
 8006362:	ecbd 8b10 	vpop	{d8-d15}
 8006366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800636a:	bf00      	nop

0800636c <sqrtf>:
 800636c:	b508      	push	{r3, lr}
 800636e:	ed2d 8b02 	vpush	{d8}
 8006372:	eeb0 8a40 	vmov.f32	s16, s0
 8006376:	f000 f81f 	bl	80063b8 <__ieee754_sqrtf>
 800637a:	4b0d      	ldr	r3, [pc, #52]	; (80063b0 <sqrtf+0x44>)
 800637c:	f993 3000 	ldrsb.w	r3, [r3]
 8006380:	3301      	adds	r3, #1
 8006382:	d011      	beq.n	80063a8 <sqrtf+0x3c>
 8006384:	eeb4 8a48 	vcmp.f32	s16, s16
 8006388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800638c:	d60c      	bvs.n	80063a8 <sqrtf+0x3c>
 800638e:	eddf 8a09 	vldr	s17, [pc, #36]	; 80063b4 <sqrtf+0x48>
 8006392:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8006396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800639a:	d505      	bpl.n	80063a8 <sqrtf+0x3c>
 800639c:	f000 f810 	bl	80063c0 <__errno>
 80063a0:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80063a4:	2321      	movs	r3, #33	; 0x21
 80063a6:	6003      	str	r3, [r0, #0]
 80063a8:	ecbd 8b02 	vpop	{d8}
 80063ac:	bd08      	pop	{r3, pc}
 80063ae:	bf00      	nop
 80063b0:	2000000d 	.word	0x2000000d
 80063b4:	00000000 	.word	0x00000000

080063b8 <__ieee754_sqrtf>:
 80063b8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80063bc:	4770      	bx	lr
	...

080063c0 <__errno>:
 80063c0:	4b01      	ldr	r3, [pc, #4]	; (80063c8 <__errno+0x8>)
 80063c2:	6818      	ldr	r0, [r3, #0]
 80063c4:	4770      	bx	lr
 80063c6:	bf00      	nop
 80063c8:	20000010 	.word	0x20000010

080063cc <__libc_init_array>:
 80063cc:	b570      	push	{r4, r5, r6, lr}
 80063ce:	4d0d      	ldr	r5, [pc, #52]	; (8006404 <__libc_init_array+0x38>)
 80063d0:	4c0d      	ldr	r4, [pc, #52]	; (8006408 <__libc_init_array+0x3c>)
 80063d2:	1b64      	subs	r4, r4, r5
 80063d4:	10a4      	asrs	r4, r4, #2
 80063d6:	2600      	movs	r6, #0
 80063d8:	42a6      	cmp	r6, r4
 80063da:	d109      	bne.n	80063f0 <__libc_init_array+0x24>
 80063dc:	4d0b      	ldr	r5, [pc, #44]	; (800640c <__libc_init_array+0x40>)
 80063de:	4c0c      	ldr	r4, [pc, #48]	; (8006410 <__libc_init_array+0x44>)
 80063e0:	f002 fd80 	bl	8008ee4 <_init>
 80063e4:	1b64      	subs	r4, r4, r5
 80063e6:	10a4      	asrs	r4, r4, #2
 80063e8:	2600      	movs	r6, #0
 80063ea:	42a6      	cmp	r6, r4
 80063ec:	d105      	bne.n	80063fa <__libc_init_array+0x2e>
 80063ee:	bd70      	pop	{r4, r5, r6, pc}
 80063f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80063f4:	4798      	blx	r3
 80063f6:	3601      	adds	r6, #1
 80063f8:	e7ee      	b.n	80063d8 <__libc_init_array+0xc>
 80063fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80063fe:	4798      	blx	r3
 8006400:	3601      	adds	r6, #1
 8006402:	e7f2      	b.n	80063ea <__libc_init_array+0x1e>
 8006404:	0801cb54 	.word	0x0801cb54
 8006408:	0801cb54 	.word	0x0801cb54
 800640c:	0801cb54 	.word	0x0801cb54
 8006410:	0801cb58 	.word	0x0801cb58

08006414 <memset>:
 8006414:	4402      	add	r2, r0
 8006416:	4603      	mov	r3, r0
 8006418:	4293      	cmp	r3, r2
 800641a:	d100      	bne.n	800641e <memset+0xa>
 800641c:	4770      	bx	lr
 800641e:	f803 1b01 	strb.w	r1, [r3], #1
 8006422:	e7f9      	b.n	8006418 <memset+0x4>

08006424 <__cvt>:
 8006424:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006428:	ec55 4b10 	vmov	r4, r5, d0
 800642c:	2d00      	cmp	r5, #0
 800642e:	460e      	mov	r6, r1
 8006430:	4619      	mov	r1, r3
 8006432:	462b      	mov	r3, r5
 8006434:	bfbb      	ittet	lt
 8006436:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800643a:	461d      	movlt	r5, r3
 800643c:	2300      	movge	r3, #0
 800643e:	232d      	movlt	r3, #45	; 0x2d
 8006440:	700b      	strb	r3, [r1, #0]
 8006442:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006444:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006448:	4691      	mov	r9, r2
 800644a:	f023 0820 	bic.w	r8, r3, #32
 800644e:	bfbc      	itt	lt
 8006450:	4622      	movlt	r2, r4
 8006452:	4614      	movlt	r4, r2
 8006454:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006458:	d005      	beq.n	8006466 <__cvt+0x42>
 800645a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800645e:	d100      	bne.n	8006462 <__cvt+0x3e>
 8006460:	3601      	adds	r6, #1
 8006462:	2102      	movs	r1, #2
 8006464:	e000      	b.n	8006468 <__cvt+0x44>
 8006466:	2103      	movs	r1, #3
 8006468:	ab03      	add	r3, sp, #12
 800646a:	9301      	str	r3, [sp, #4]
 800646c:	ab02      	add	r3, sp, #8
 800646e:	9300      	str	r3, [sp, #0]
 8006470:	ec45 4b10 	vmov	d0, r4, r5
 8006474:	4653      	mov	r3, sl
 8006476:	4632      	mov	r2, r6
 8006478:	f000 fe1a 	bl	80070b0 <_dtoa_r>
 800647c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006480:	4607      	mov	r7, r0
 8006482:	d102      	bne.n	800648a <__cvt+0x66>
 8006484:	f019 0f01 	tst.w	r9, #1
 8006488:	d022      	beq.n	80064d0 <__cvt+0xac>
 800648a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800648e:	eb07 0906 	add.w	r9, r7, r6
 8006492:	d110      	bne.n	80064b6 <__cvt+0x92>
 8006494:	783b      	ldrb	r3, [r7, #0]
 8006496:	2b30      	cmp	r3, #48	; 0x30
 8006498:	d10a      	bne.n	80064b0 <__cvt+0x8c>
 800649a:	2200      	movs	r2, #0
 800649c:	2300      	movs	r3, #0
 800649e:	4620      	mov	r0, r4
 80064a0:	4629      	mov	r1, r5
 80064a2:	f7fa fb11 	bl	8000ac8 <__aeabi_dcmpeq>
 80064a6:	b918      	cbnz	r0, 80064b0 <__cvt+0x8c>
 80064a8:	f1c6 0601 	rsb	r6, r6, #1
 80064ac:	f8ca 6000 	str.w	r6, [sl]
 80064b0:	f8da 3000 	ldr.w	r3, [sl]
 80064b4:	4499      	add	r9, r3
 80064b6:	2200      	movs	r2, #0
 80064b8:	2300      	movs	r3, #0
 80064ba:	4620      	mov	r0, r4
 80064bc:	4629      	mov	r1, r5
 80064be:	f7fa fb03 	bl	8000ac8 <__aeabi_dcmpeq>
 80064c2:	b108      	cbz	r0, 80064c8 <__cvt+0xa4>
 80064c4:	f8cd 900c 	str.w	r9, [sp, #12]
 80064c8:	2230      	movs	r2, #48	; 0x30
 80064ca:	9b03      	ldr	r3, [sp, #12]
 80064cc:	454b      	cmp	r3, r9
 80064ce:	d307      	bcc.n	80064e0 <__cvt+0xbc>
 80064d0:	9b03      	ldr	r3, [sp, #12]
 80064d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80064d4:	1bdb      	subs	r3, r3, r7
 80064d6:	4638      	mov	r0, r7
 80064d8:	6013      	str	r3, [r2, #0]
 80064da:	b004      	add	sp, #16
 80064dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064e0:	1c59      	adds	r1, r3, #1
 80064e2:	9103      	str	r1, [sp, #12]
 80064e4:	701a      	strb	r2, [r3, #0]
 80064e6:	e7f0      	b.n	80064ca <__cvt+0xa6>

080064e8 <__exponent>:
 80064e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064ea:	4603      	mov	r3, r0
 80064ec:	2900      	cmp	r1, #0
 80064ee:	bfb8      	it	lt
 80064f0:	4249      	neglt	r1, r1
 80064f2:	f803 2b02 	strb.w	r2, [r3], #2
 80064f6:	bfb4      	ite	lt
 80064f8:	222d      	movlt	r2, #45	; 0x2d
 80064fa:	222b      	movge	r2, #43	; 0x2b
 80064fc:	2909      	cmp	r1, #9
 80064fe:	7042      	strb	r2, [r0, #1]
 8006500:	dd2a      	ble.n	8006558 <__exponent+0x70>
 8006502:	f10d 0407 	add.w	r4, sp, #7
 8006506:	46a4      	mov	ip, r4
 8006508:	270a      	movs	r7, #10
 800650a:	46a6      	mov	lr, r4
 800650c:	460a      	mov	r2, r1
 800650e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006512:	fb07 1516 	mls	r5, r7, r6, r1
 8006516:	3530      	adds	r5, #48	; 0x30
 8006518:	2a63      	cmp	r2, #99	; 0x63
 800651a:	f104 34ff 	add.w	r4, r4, #4294967295
 800651e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006522:	4631      	mov	r1, r6
 8006524:	dcf1      	bgt.n	800650a <__exponent+0x22>
 8006526:	3130      	adds	r1, #48	; 0x30
 8006528:	f1ae 0502 	sub.w	r5, lr, #2
 800652c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006530:	1c44      	adds	r4, r0, #1
 8006532:	4629      	mov	r1, r5
 8006534:	4561      	cmp	r1, ip
 8006536:	d30a      	bcc.n	800654e <__exponent+0x66>
 8006538:	f10d 0209 	add.w	r2, sp, #9
 800653c:	eba2 020e 	sub.w	r2, r2, lr
 8006540:	4565      	cmp	r5, ip
 8006542:	bf88      	it	hi
 8006544:	2200      	movhi	r2, #0
 8006546:	4413      	add	r3, r2
 8006548:	1a18      	subs	r0, r3, r0
 800654a:	b003      	add	sp, #12
 800654c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800654e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006552:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006556:	e7ed      	b.n	8006534 <__exponent+0x4c>
 8006558:	2330      	movs	r3, #48	; 0x30
 800655a:	3130      	adds	r1, #48	; 0x30
 800655c:	7083      	strb	r3, [r0, #2]
 800655e:	70c1      	strb	r1, [r0, #3]
 8006560:	1d03      	adds	r3, r0, #4
 8006562:	e7f1      	b.n	8006548 <__exponent+0x60>

08006564 <_printf_float>:
 8006564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006568:	ed2d 8b02 	vpush	{d8}
 800656c:	b08d      	sub	sp, #52	; 0x34
 800656e:	460c      	mov	r4, r1
 8006570:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006574:	4616      	mov	r6, r2
 8006576:	461f      	mov	r7, r3
 8006578:	4605      	mov	r5, r0
 800657a:	f001 fd3d 	bl	8007ff8 <_localeconv_r>
 800657e:	f8d0 a000 	ldr.w	sl, [r0]
 8006582:	4650      	mov	r0, sl
 8006584:	f7f9 fe24 	bl	80001d0 <strlen>
 8006588:	2300      	movs	r3, #0
 800658a:	930a      	str	r3, [sp, #40]	; 0x28
 800658c:	6823      	ldr	r3, [r4, #0]
 800658e:	9305      	str	r3, [sp, #20]
 8006590:	f8d8 3000 	ldr.w	r3, [r8]
 8006594:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006598:	3307      	adds	r3, #7
 800659a:	f023 0307 	bic.w	r3, r3, #7
 800659e:	f103 0208 	add.w	r2, r3, #8
 80065a2:	f8c8 2000 	str.w	r2, [r8]
 80065a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065aa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80065ae:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80065b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80065b6:	9307      	str	r3, [sp, #28]
 80065b8:	f8cd 8018 	str.w	r8, [sp, #24]
 80065bc:	ee08 0a10 	vmov	s16, r0
 80065c0:	4b9f      	ldr	r3, [pc, #636]	; (8006840 <_printf_float+0x2dc>)
 80065c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065c6:	f04f 32ff 	mov.w	r2, #4294967295
 80065ca:	f7fa faaf 	bl	8000b2c <__aeabi_dcmpun>
 80065ce:	bb88      	cbnz	r0, 8006634 <_printf_float+0xd0>
 80065d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065d4:	4b9a      	ldr	r3, [pc, #616]	; (8006840 <_printf_float+0x2dc>)
 80065d6:	f04f 32ff 	mov.w	r2, #4294967295
 80065da:	f7fa fa89 	bl	8000af0 <__aeabi_dcmple>
 80065de:	bb48      	cbnz	r0, 8006634 <_printf_float+0xd0>
 80065e0:	2200      	movs	r2, #0
 80065e2:	2300      	movs	r3, #0
 80065e4:	4640      	mov	r0, r8
 80065e6:	4649      	mov	r1, r9
 80065e8:	f7fa fa78 	bl	8000adc <__aeabi_dcmplt>
 80065ec:	b110      	cbz	r0, 80065f4 <_printf_float+0x90>
 80065ee:	232d      	movs	r3, #45	; 0x2d
 80065f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065f4:	4b93      	ldr	r3, [pc, #588]	; (8006844 <_printf_float+0x2e0>)
 80065f6:	4894      	ldr	r0, [pc, #592]	; (8006848 <_printf_float+0x2e4>)
 80065f8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80065fc:	bf94      	ite	ls
 80065fe:	4698      	movls	r8, r3
 8006600:	4680      	movhi	r8, r0
 8006602:	2303      	movs	r3, #3
 8006604:	6123      	str	r3, [r4, #16]
 8006606:	9b05      	ldr	r3, [sp, #20]
 8006608:	f023 0204 	bic.w	r2, r3, #4
 800660c:	6022      	str	r2, [r4, #0]
 800660e:	f04f 0900 	mov.w	r9, #0
 8006612:	9700      	str	r7, [sp, #0]
 8006614:	4633      	mov	r3, r6
 8006616:	aa0b      	add	r2, sp, #44	; 0x2c
 8006618:	4621      	mov	r1, r4
 800661a:	4628      	mov	r0, r5
 800661c:	f000 f9d8 	bl	80069d0 <_printf_common>
 8006620:	3001      	adds	r0, #1
 8006622:	f040 8090 	bne.w	8006746 <_printf_float+0x1e2>
 8006626:	f04f 30ff 	mov.w	r0, #4294967295
 800662a:	b00d      	add	sp, #52	; 0x34
 800662c:	ecbd 8b02 	vpop	{d8}
 8006630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006634:	4642      	mov	r2, r8
 8006636:	464b      	mov	r3, r9
 8006638:	4640      	mov	r0, r8
 800663a:	4649      	mov	r1, r9
 800663c:	f7fa fa76 	bl	8000b2c <__aeabi_dcmpun>
 8006640:	b140      	cbz	r0, 8006654 <_printf_float+0xf0>
 8006642:	464b      	mov	r3, r9
 8006644:	2b00      	cmp	r3, #0
 8006646:	bfbc      	itt	lt
 8006648:	232d      	movlt	r3, #45	; 0x2d
 800664a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800664e:	487f      	ldr	r0, [pc, #508]	; (800684c <_printf_float+0x2e8>)
 8006650:	4b7f      	ldr	r3, [pc, #508]	; (8006850 <_printf_float+0x2ec>)
 8006652:	e7d1      	b.n	80065f8 <_printf_float+0x94>
 8006654:	6863      	ldr	r3, [r4, #4]
 8006656:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800665a:	9206      	str	r2, [sp, #24]
 800665c:	1c5a      	adds	r2, r3, #1
 800665e:	d13f      	bne.n	80066e0 <_printf_float+0x17c>
 8006660:	2306      	movs	r3, #6
 8006662:	6063      	str	r3, [r4, #4]
 8006664:	9b05      	ldr	r3, [sp, #20]
 8006666:	6861      	ldr	r1, [r4, #4]
 8006668:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800666c:	2300      	movs	r3, #0
 800666e:	9303      	str	r3, [sp, #12]
 8006670:	ab0a      	add	r3, sp, #40	; 0x28
 8006672:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006676:	ab09      	add	r3, sp, #36	; 0x24
 8006678:	ec49 8b10 	vmov	d0, r8, r9
 800667c:	9300      	str	r3, [sp, #0]
 800667e:	6022      	str	r2, [r4, #0]
 8006680:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006684:	4628      	mov	r0, r5
 8006686:	f7ff fecd 	bl	8006424 <__cvt>
 800668a:	9b06      	ldr	r3, [sp, #24]
 800668c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800668e:	2b47      	cmp	r3, #71	; 0x47
 8006690:	4680      	mov	r8, r0
 8006692:	d108      	bne.n	80066a6 <_printf_float+0x142>
 8006694:	1cc8      	adds	r0, r1, #3
 8006696:	db02      	blt.n	800669e <_printf_float+0x13a>
 8006698:	6863      	ldr	r3, [r4, #4]
 800669a:	4299      	cmp	r1, r3
 800669c:	dd41      	ble.n	8006722 <_printf_float+0x1be>
 800669e:	f1ab 0b02 	sub.w	fp, fp, #2
 80066a2:	fa5f fb8b 	uxtb.w	fp, fp
 80066a6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80066aa:	d820      	bhi.n	80066ee <_printf_float+0x18a>
 80066ac:	3901      	subs	r1, #1
 80066ae:	465a      	mov	r2, fp
 80066b0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80066b4:	9109      	str	r1, [sp, #36]	; 0x24
 80066b6:	f7ff ff17 	bl	80064e8 <__exponent>
 80066ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066bc:	1813      	adds	r3, r2, r0
 80066be:	2a01      	cmp	r2, #1
 80066c0:	4681      	mov	r9, r0
 80066c2:	6123      	str	r3, [r4, #16]
 80066c4:	dc02      	bgt.n	80066cc <_printf_float+0x168>
 80066c6:	6822      	ldr	r2, [r4, #0]
 80066c8:	07d2      	lsls	r2, r2, #31
 80066ca:	d501      	bpl.n	80066d0 <_printf_float+0x16c>
 80066cc:	3301      	adds	r3, #1
 80066ce:	6123      	str	r3, [r4, #16]
 80066d0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d09c      	beq.n	8006612 <_printf_float+0xae>
 80066d8:	232d      	movs	r3, #45	; 0x2d
 80066da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066de:	e798      	b.n	8006612 <_printf_float+0xae>
 80066e0:	9a06      	ldr	r2, [sp, #24]
 80066e2:	2a47      	cmp	r2, #71	; 0x47
 80066e4:	d1be      	bne.n	8006664 <_printf_float+0x100>
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d1bc      	bne.n	8006664 <_printf_float+0x100>
 80066ea:	2301      	movs	r3, #1
 80066ec:	e7b9      	b.n	8006662 <_printf_float+0xfe>
 80066ee:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80066f2:	d118      	bne.n	8006726 <_printf_float+0x1c2>
 80066f4:	2900      	cmp	r1, #0
 80066f6:	6863      	ldr	r3, [r4, #4]
 80066f8:	dd0b      	ble.n	8006712 <_printf_float+0x1ae>
 80066fa:	6121      	str	r1, [r4, #16]
 80066fc:	b913      	cbnz	r3, 8006704 <_printf_float+0x1a0>
 80066fe:	6822      	ldr	r2, [r4, #0]
 8006700:	07d0      	lsls	r0, r2, #31
 8006702:	d502      	bpl.n	800670a <_printf_float+0x1a6>
 8006704:	3301      	adds	r3, #1
 8006706:	440b      	add	r3, r1
 8006708:	6123      	str	r3, [r4, #16]
 800670a:	65a1      	str	r1, [r4, #88]	; 0x58
 800670c:	f04f 0900 	mov.w	r9, #0
 8006710:	e7de      	b.n	80066d0 <_printf_float+0x16c>
 8006712:	b913      	cbnz	r3, 800671a <_printf_float+0x1b6>
 8006714:	6822      	ldr	r2, [r4, #0]
 8006716:	07d2      	lsls	r2, r2, #31
 8006718:	d501      	bpl.n	800671e <_printf_float+0x1ba>
 800671a:	3302      	adds	r3, #2
 800671c:	e7f4      	b.n	8006708 <_printf_float+0x1a4>
 800671e:	2301      	movs	r3, #1
 8006720:	e7f2      	b.n	8006708 <_printf_float+0x1a4>
 8006722:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006726:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006728:	4299      	cmp	r1, r3
 800672a:	db05      	blt.n	8006738 <_printf_float+0x1d4>
 800672c:	6823      	ldr	r3, [r4, #0]
 800672e:	6121      	str	r1, [r4, #16]
 8006730:	07d8      	lsls	r0, r3, #31
 8006732:	d5ea      	bpl.n	800670a <_printf_float+0x1a6>
 8006734:	1c4b      	adds	r3, r1, #1
 8006736:	e7e7      	b.n	8006708 <_printf_float+0x1a4>
 8006738:	2900      	cmp	r1, #0
 800673a:	bfd4      	ite	le
 800673c:	f1c1 0202 	rsble	r2, r1, #2
 8006740:	2201      	movgt	r2, #1
 8006742:	4413      	add	r3, r2
 8006744:	e7e0      	b.n	8006708 <_printf_float+0x1a4>
 8006746:	6823      	ldr	r3, [r4, #0]
 8006748:	055a      	lsls	r2, r3, #21
 800674a:	d407      	bmi.n	800675c <_printf_float+0x1f8>
 800674c:	6923      	ldr	r3, [r4, #16]
 800674e:	4642      	mov	r2, r8
 8006750:	4631      	mov	r1, r6
 8006752:	4628      	mov	r0, r5
 8006754:	47b8      	blx	r7
 8006756:	3001      	adds	r0, #1
 8006758:	d12c      	bne.n	80067b4 <_printf_float+0x250>
 800675a:	e764      	b.n	8006626 <_printf_float+0xc2>
 800675c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006760:	f240 80e0 	bls.w	8006924 <_printf_float+0x3c0>
 8006764:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006768:	2200      	movs	r2, #0
 800676a:	2300      	movs	r3, #0
 800676c:	f7fa f9ac 	bl	8000ac8 <__aeabi_dcmpeq>
 8006770:	2800      	cmp	r0, #0
 8006772:	d034      	beq.n	80067de <_printf_float+0x27a>
 8006774:	4a37      	ldr	r2, [pc, #220]	; (8006854 <_printf_float+0x2f0>)
 8006776:	2301      	movs	r3, #1
 8006778:	4631      	mov	r1, r6
 800677a:	4628      	mov	r0, r5
 800677c:	47b8      	blx	r7
 800677e:	3001      	adds	r0, #1
 8006780:	f43f af51 	beq.w	8006626 <_printf_float+0xc2>
 8006784:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006788:	429a      	cmp	r2, r3
 800678a:	db02      	blt.n	8006792 <_printf_float+0x22e>
 800678c:	6823      	ldr	r3, [r4, #0]
 800678e:	07d8      	lsls	r0, r3, #31
 8006790:	d510      	bpl.n	80067b4 <_printf_float+0x250>
 8006792:	ee18 3a10 	vmov	r3, s16
 8006796:	4652      	mov	r2, sl
 8006798:	4631      	mov	r1, r6
 800679a:	4628      	mov	r0, r5
 800679c:	47b8      	blx	r7
 800679e:	3001      	adds	r0, #1
 80067a0:	f43f af41 	beq.w	8006626 <_printf_float+0xc2>
 80067a4:	f04f 0800 	mov.w	r8, #0
 80067a8:	f104 091a 	add.w	r9, r4, #26
 80067ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067ae:	3b01      	subs	r3, #1
 80067b0:	4543      	cmp	r3, r8
 80067b2:	dc09      	bgt.n	80067c8 <_printf_float+0x264>
 80067b4:	6823      	ldr	r3, [r4, #0]
 80067b6:	079b      	lsls	r3, r3, #30
 80067b8:	f100 8105 	bmi.w	80069c6 <_printf_float+0x462>
 80067bc:	68e0      	ldr	r0, [r4, #12]
 80067be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067c0:	4298      	cmp	r0, r3
 80067c2:	bfb8      	it	lt
 80067c4:	4618      	movlt	r0, r3
 80067c6:	e730      	b.n	800662a <_printf_float+0xc6>
 80067c8:	2301      	movs	r3, #1
 80067ca:	464a      	mov	r2, r9
 80067cc:	4631      	mov	r1, r6
 80067ce:	4628      	mov	r0, r5
 80067d0:	47b8      	blx	r7
 80067d2:	3001      	adds	r0, #1
 80067d4:	f43f af27 	beq.w	8006626 <_printf_float+0xc2>
 80067d8:	f108 0801 	add.w	r8, r8, #1
 80067dc:	e7e6      	b.n	80067ac <_printf_float+0x248>
 80067de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	dc39      	bgt.n	8006858 <_printf_float+0x2f4>
 80067e4:	4a1b      	ldr	r2, [pc, #108]	; (8006854 <_printf_float+0x2f0>)
 80067e6:	2301      	movs	r3, #1
 80067e8:	4631      	mov	r1, r6
 80067ea:	4628      	mov	r0, r5
 80067ec:	47b8      	blx	r7
 80067ee:	3001      	adds	r0, #1
 80067f0:	f43f af19 	beq.w	8006626 <_printf_float+0xc2>
 80067f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067f8:	4313      	orrs	r3, r2
 80067fa:	d102      	bne.n	8006802 <_printf_float+0x29e>
 80067fc:	6823      	ldr	r3, [r4, #0]
 80067fe:	07d9      	lsls	r1, r3, #31
 8006800:	d5d8      	bpl.n	80067b4 <_printf_float+0x250>
 8006802:	ee18 3a10 	vmov	r3, s16
 8006806:	4652      	mov	r2, sl
 8006808:	4631      	mov	r1, r6
 800680a:	4628      	mov	r0, r5
 800680c:	47b8      	blx	r7
 800680e:	3001      	adds	r0, #1
 8006810:	f43f af09 	beq.w	8006626 <_printf_float+0xc2>
 8006814:	f04f 0900 	mov.w	r9, #0
 8006818:	f104 0a1a 	add.w	sl, r4, #26
 800681c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800681e:	425b      	negs	r3, r3
 8006820:	454b      	cmp	r3, r9
 8006822:	dc01      	bgt.n	8006828 <_printf_float+0x2c4>
 8006824:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006826:	e792      	b.n	800674e <_printf_float+0x1ea>
 8006828:	2301      	movs	r3, #1
 800682a:	4652      	mov	r2, sl
 800682c:	4631      	mov	r1, r6
 800682e:	4628      	mov	r0, r5
 8006830:	47b8      	blx	r7
 8006832:	3001      	adds	r0, #1
 8006834:	f43f aef7 	beq.w	8006626 <_printf_float+0xc2>
 8006838:	f109 0901 	add.w	r9, r9, #1
 800683c:	e7ee      	b.n	800681c <_printf_float+0x2b8>
 800683e:	bf00      	nop
 8006840:	7fefffff 	.word	0x7fefffff
 8006844:	0801c770 	.word	0x0801c770
 8006848:	0801c774 	.word	0x0801c774
 800684c:	0801c77c 	.word	0x0801c77c
 8006850:	0801c778 	.word	0x0801c778
 8006854:	0801c780 	.word	0x0801c780
 8006858:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800685a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800685c:	429a      	cmp	r2, r3
 800685e:	bfa8      	it	ge
 8006860:	461a      	movge	r2, r3
 8006862:	2a00      	cmp	r2, #0
 8006864:	4691      	mov	r9, r2
 8006866:	dc37      	bgt.n	80068d8 <_printf_float+0x374>
 8006868:	f04f 0b00 	mov.w	fp, #0
 800686c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006870:	f104 021a 	add.w	r2, r4, #26
 8006874:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006876:	9305      	str	r3, [sp, #20]
 8006878:	eba3 0309 	sub.w	r3, r3, r9
 800687c:	455b      	cmp	r3, fp
 800687e:	dc33      	bgt.n	80068e8 <_printf_float+0x384>
 8006880:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006884:	429a      	cmp	r2, r3
 8006886:	db3b      	blt.n	8006900 <_printf_float+0x39c>
 8006888:	6823      	ldr	r3, [r4, #0]
 800688a:	07da      	lsls	r2, r3, #31
 800688c:	d438      	bmi.n	8006900 <_printf_float+0x39c>
 800688e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006890:	9b05      	ldr	r3, [sp, #20]
 8006892:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006894:	1ad3      	subs	r3, r2, r3
 8006896:	eba2 0901 	sub.w	r9, r2, r1
 800689a:	4599      	cmp	r9, r3
 800689c:	bfa8      	it	ge
 800689e:	4699      	movge	r9, r3
 80068a0:	f1b9 0f00 	cmp.w	r9, #0
 80068a4:	dc35      	bgt.n	8006912 <_printf_float+0x3ae>
 80068a6:	f04f 0800 	mov.w	r8, #0
 80068aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80068ae:	f104 0a1a 	add.w	sl, r4, #26
 80068b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068b6:	1a9b      	subs	r3, r3, r2
 80068b8:	eba3 0309 	sub.w	r3, r3, r9
 80068bc:	4543      	cmp	r3, r8
 80068be:	f77f af79 	ble.w	80067b4 <_printf_float+0x250>
 80068c2:	2301      	movs	r3, #1
 80068c4:	4652      	mov	r2, sl
 80068c6:	4631      	mov	r1, r6
 80068c8:	4628      	mov	r0, r5
 80068ca:	47b8      	blx	r7
 80068cc:	3001      	adds	r0, #1
 80068ce:	f43f aeaa 	beq.w	8006626 <_printf_float+0xc2>
 80068d2:	f108 0801 	add.w	r8, r8, #1
 80068d6:	e7ec      	b.n	80068b2 <_printf_float+0x34e>
 80068d8:	4613      	mov	r3, r2
 80068da:	4631      	mov	r1, r6
 80068dc:	4642      	mov	r2, r8
 80068de:	4628      	mov	r0, r5
 80068e0:	47b8      	blx	r7
 80068e2:	3001      	adds	r0, #1
 80068e4:	d1c0      	bne.n	8006868 <_printf_float+0x304>
 80068e6:	e69e      	b.n	8006626 <_printf_float+0xc2>
 80068e8:	2301      	movs	r3, #1
 80068ea:	4631      	mov	r1, r6
 80068ec:	4628      	mov	r0, r5
 80068ee:	9205      	str	r2, [sp, #20]
 80068f0:	47b8      	blx	r7
 80068f2:	3001      	adds	r0, #1
 80068f4:	f43f ae97 	beq.w	8006626 <_printf_float+0xc2>
 80068f8:	9a05      	ldr	r2, [sp, #20]
 80068fa:	f10b 0b01 	add.w	fp, fp, #1
 80068fe:	e7b9      	b.n	8006874 <_printf_float+0x310>
 8006900:	ee18 3a10 	vmov	r3, s16
 8006904:	4652      	mov	r2, sl
 8006906:	4631      	mov	r1, r6
 8006908:	4628      	mov	r0, r5
 800690a:	47b8      	blx	r7
 800690c:	3001      	adds	r0, #1
 800690e:	d1be      	bne.n	800688e <_printf_float+0x32a>
 8006910:	e689      	b.n	8006626 <_printf_float+0xc2>
 8006912:	9a05      	ldr	r2, [sp, #20]
 8006914:	464b      	mov	r3, r9
 8006916:	4442      	add	r2, r8
 8006918:	4631      	mov	r1, r6
 800691a:	4628      	mov	r0, r5
 800691c:	47b8      	blx	r7
 800691e:	3001      	adds	r0, #1
 8006920:	d1c1      	bne.n	80068a6 <_printf_float+0x342>
 8006922:	e680      	b.n	8006626 <_printf_float+0xc2>
 8006924:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006926:	2a01      	cmp	r2, #1
 8006928:	dc01      	bgt.n	800692e <_printf_float+0x3ca>
 800692a:	07db      	lsls	r3, r3, #31
 800692c:	d538      	bpl.n	80069a0 <_printf_float+0x43c>
 800692e:	2301      	movs	r3, #1
 8006930:	4642      	mov	r2, r8
 8006932:	4631      	mov	r1, r6
 8006934:	4628      	mov	r0, r5
 8006936:	47b8      	blx	r7
 8006938:	3001      	adds	r0, #1
 800693a:	f43f ae74 	beq.w	8006626 <_printf_float+0xc2>
 800693e:	ee18 3a10 	vmov	r3, s16
 8006942:	4652      	mov	r2, sl
 8006944:	4631      	mov	r1, r6
 8006946:	4628      	mov	r0, r5
 8006948:	47b8      	blx	r7
 800694a:	3001      	adds	r0, #1
 800694c:	f43f ae6b 	beq.w	8006626 <_printf_float+0xc2>
 8006950:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006954:	2200      	movs	r2, #0
 8006956:	2300      	movs	r3, #0
 8006958:	f7fa f8b6 	bl	8000ac8 <__aeabi_dcmpeq>
 800695c:	b9d8      	cbnz	r0, 8006996 <_printf_float+0x432>
 800695e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006960:	f108 0201 	add.w	r2, r8, #1
 8006964:	3b01      	subs	r3, #1
 8006966:	4631      	mov	r1, r6
 8006968:	4628      	mov	r0, r5
 800696a:	47b8      	blx	r7
 800696c:	3001      	adds	r0, #1
 800696e:	d10e      	bne.n	800698e <_printf_float+0x42a>
 8006970:	e659      	b.n	8006626 <_printf_float+0xc2>
 8006972:	2301      	movs	r3, #1
 8006974:	4652      	mov	r2, sl
 8006976:	4631      	mov	r1, r6
 8006978:	4628      	mov	r0, r5
 800697a:	47b8      	blx	r7
 800697c:	3001      	adds	r0, #1
 800697e:	f43f ae52 	beq.w	8006626 <_printf_float+0xc2>
 8006982:	f108 0801 	add.w	r8, r8, #1
 8006986:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006988:	3b01      	subs	r3, #1
 800698a:	4543      	cmp	r3, r8
 800698c:	dcf1      	bgt.n	8006972 <_printf_float+0x40e>
 800698e:	464b      	mov	r3, r9
 8006990:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006994:	e6dc      	b.n	8006750 <_printf_float+0x1ec>
 8006996:	f04f 0800 	mov.w	r8, #0
 800699a:	f104 0a1a 	add.w	sl, r4, #26
 800699e:	e7f2      	b.n	8006986 <_printf_float+0x422>
 80069a0:	2301      	movs	r3, #1
 80069a2:	4642      	mov	r2, r8
 80069a4:	e7df      	b.n	8006966 <_printf_float+0x402>
 80069a6:	2301      	movs	r3, #1
 80069a8:	464a      	mov	r2, r9
 80069aa:	4631      	mov	r1, r6
 80069ac:	4628      	mov	r0, r5
 80069ae:	47b8      	blx	r7
 80069b0:	3001      	adds	r0, #1
 80069b2:	f43f ae38 	beq.w	8006626 <_printf_float+0xc2>
 80069b6:	f108 0801 	add.w	r8, r8, #1
 80069ba:	68e3      	ldr	r3, [r4, #12]
 80069bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80069be:	1a5b      	subs	r3, r3, r1
 80069c0:	4543      	cmp	r3, r8
 80069c2:	dcf0      	bgt.n	80069a6 <_printf_float+0x442>
 80069c4:	e6fa      	b.n	80067bc <_printf_float+0x258>
 80069c6:	f04f 0800 	mov.w	r8, #0
 80069ca:	f104 0919 	add.w	r9, r4, #25
 80069ce:	e7f4      	b.n	80069ba <_printf_float+0x456>

080069d0 <_printf_common>:
 80069d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069d4:	4616      	mov	r6, r2
 80069d6:	4699      	mov	r9, r3
 80069d8:	688a      	ldr	r2, [r1, #8]
 80069da:	690b      	ldr	r3, [r1, #16]
 80069dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80069e0:	4293      	cmp	r3, r2
 80069e2:	bfb8      	it	lt
 80069e4:	4613      	movlt	r3, r2
 80069e6:	6033      	str	r3, [r6, #0]
 80069e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80069ec:	4607      	mov	r7, r0
 80069ee:	460c      	mov	r4, r1
 80069f0:	b10a      	cbz	r2, 80069f6 <_printf_common+0x26>
 80069f2:	3301      	adds	r3, #1
 80069f4:	6033      	str	r3, [r6, #0]
 80069f6:	6823      	ldr	r3, [r4, #0]
 80069f8:	0699      	lsls	r1, r3, #26
 80069fa:	bf42      	ittt	mi
 80069fc:	6833      	ldrmi	r3, [r6, #0]
 80069fe:	3302      	addmi	r3, #2
 8006a00:	6033      	strmi	r3, [r6, #0]
 8006a02:	6825      	ldr	r5, [r4, #0]
 8006a04:	f015 0506 	ands.w	r5, r5, #6
 8006a08:	d106      	bne.n	8006a18 <_printf_common+0x48>
 8006a0a:	f104 0a19 	add.w	sl, r4, #25
 8006a0e:	68e3      	ldr	r3, [r4, #12]
 8006a10:	6832      	ldr	r2, [r6, #0]
 8006a12:	1a9b      	subs	r3, r3, r2
 8006a14:	42ab      	cmp	r3, r5
 8006a16:	dc26      	bgt.n	8006a66 <_printf_common+0x96>
 8006a18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a1c:	1e13      	subs	r3, r2, #0
 8006a1e:	6822      	ldr	r2, [r4, #0]
 8006a20:	bf18      	it	ne
 8006a22:	2301      	movne	r3, #1
 8006a24:	0692      	lsls	r2, r2, #26
 8006a26:	d42b      	bmi.n	8006a80 <_printf_common+0xb0>
 8006a28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a2c:	4649      	mov	r1, r9
 8006a2e:	4638      	mov	r0, r7
 8006a30:	47c0      	blx	r8
 8006a32:	3001      	adds	r0, #1
 8006a34:	d01e      	beq.n	8006a74 <_printf_common+0xa4>
 8006a36:	6823      	ldr	r3, [r4, #0]
 8006a38:	68e5      	ldr	r5, [r4, #12]
 8006a3a:	6832      	ldr	r2, [r6, #0]
 8006a3c:	f003 0306 	and.w	r3, r3, #6
 8006a40:	2b04      	cmp	r3, #4
 8006a42:	bf08      	it	eq
 8006a44:	1aad      	subeq	r5, r5, r2
 8006a46:	68a3      	ldr	r3, [r4, #8]
 8006a48:	6922      	ldr	r2, [r4, #16]
 8006a4a:	bf0c      	ite	eq
 8006a4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a50:	2500      	movne	r5, #0
 8006a52:	4293      	cmp	r3, r2
 8006a54:	bfc4      	itt	gt
 8006a56:	1a9b      	subgt	r3, r3, r2
 8006a58:	18ed      	addgt	r5, r5, r3
 8006a5a:	2600      	movs	r6, #0
 8006a5c:	341a      	adds	r4, #26
 8006a5e:	42b5      	cmp	r5, r6
 8006a60:	d11a      	bne.n	8006a98 <_printf_common+0xc8>
 8006a62:	2000      	movs	r0, #0
 8006a64:	e008      	b.n	8006a78 <_printf_common+0xa8>
 8006a66:	2301      	movs	r3, #1
 8006a68:	4652      	mov	r2, sl
 8006a6a:	4649      	mov	r1, r9
 8006a6c:	4638      	mov	r0, r7
 8006a6e:	47c0      	blx	r8
 8006a70:	3001      	adds	r0, #1
 8006a72:	d103      	bne.n	8006a7c <_printf_common+0xac>
 8006a74:	f04f 30ff 	mov.w	r0, #4294967295
 8006a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a7c:	3501      	adds	r5, #1
 8006a7e:	e7c6      	b.n	8006a0e <_printf_common+0x3e>
 8006a80:	18e1      	adds	r1, r4, r3
 8006a82:	1c5a      	adds	r2, r3, #1
 8006a84:	2030      	movs	r0, #48	; 0x30
 8006a86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a8a:	4422      	add	r2, r4
 8006a8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a94:	3302      	adds	r3, #2
 8006a96:	e7c7      	b.n	8006a28 <_printf_common+0x58>
 8006a98:	2301      	movs	r3, #1
 8006a9a:	4622      	mov	r2, r4
 8006a9c:	4649      	mov	r1, r9
 8006a9e:	4638      	mov	r0, r7
 8006aa0:	47c0      	blx	r8
 8006aa2:	3001      	adds	r0, #1
 8006aa4:	d0e6      	beq.n	8006a74 <_printf_common+0xa4>
 8006aa6:	3601      	adds	r6, #1
 8006aa8:	e7d9      	b.n	8006a5e <_printf_common+0x8e>
	...

08006aac <_printf_i>:
 8006aac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ab0:	460c      	mov	r4, r1
 8006ab2:	4691      	mov	r9, r2
 8006ab4:	7e27      	ldrb	r7, [r4, #24]
 8006ab6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006ab8:	2f78      	cmp	r7, #120	; 0x78
 8006aba:	4680      	mov	r8, r0
 8006abc:	469a      	mov	sl, r3
 8006abe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ac2:	d807      	bhi.n	8006ad4 <_printf_i+0x28>
 8006ac4:	2f62      	cmp	r7, #98	; 0x62
 8006ac6:	d80a      	bhi.n	8006ade <_printf_i+0x32>
 8006ac8:	2f00      	cmp	r7, #0
 8006aca:	f000 80d8 	beq.w	8006c7e <_printf_i+0x1d2>
 8006ace:	2f58      	cmp	r7, #88	; 0x58
 8006ad0:	f000 80a3 	beq.w	8006c1a <_printf_i+0x16e>
 8006ad4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006ad8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006adc:	e03a      	b.n	8006b54 <_printf_i+0xa8>
 8006ade:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006ae2:	2b15      	cmp	r3, #21
 8006ae4:	d8f6      	bhi.n	8006ad4 <_printf_i+0x28>
 8006ae6:	a001      	add	r0, pc, #4	; (adr r0, 8006aec <_printf_i+0x40>)
 8006ae8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006aec:	08006b45 	.word	0x08006b45
 8006af0:	08006b59 	.word	0x08006b59
 8006af4:	08006ad5 	.word	0x08006ad5
 8006af8:	08006ad5 	.word	0x08006ad5
 8006afc:	08006ad5 	.word	0x08006ad5
 8006b00:	08006ad5 	.word	0x08006ad5
 8006b04:	08006b59 	.word	0x08006b59
 8006b08:	08006ad5 	.word	0x08006ad5
 8006b0c:	08006ad5 	.word	0x08006ad5
 8006b10:	08006ad5 	.word	0x08006ad5
 8006b14:	08006ad5 	.word	0x08006ad5
 8006b18:	08006c65 	.word	0x08006c65
 8006b1c:	08006b89 	.word	0x08006b89
 8006b20:	08006c47 	.word	0x08006c47
 8006b24:	08006ad5 	.word	0x08006ad5
 8006b28:	08006ad5 	.word	0x08006ad5
 8006b2c:	08006c87 	.word	0x08006c87
 8006b30:	08006ad5 	.word	0x08006ad5
 8006b34:	08006b89 	.word	0x08006b89
 8006b38:	08006ad5 	.word	0x08006ad5
 8006b3c:	08006ad5 	.word	0x08006ad5
 8006b40:	08006c4f 	.word	0x08006c4f
 8006b44:	680b      	ldr	r3, [r1, #0]
 8006b46:	1d1a      	adds	r2, r3, #4
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	600a      	str	r2, [r1, #0]
 8006b4c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006b50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b54:	2301      	movs	r3, #1
 8006b56:	e0a3      	b.n	8006ca0 <_printf_i+0x1f4>
 8006b58:	6825      	ldr	r5, [r4, #0]
 8006b5a:	6808      	ldr	r0, [r1, #0]
 8006b5c:	062e      	lsls	r6, r5, #24
 8006b5e:	f100 0304 	add.w	r3, r0, #4
 8006b62:	d50a      	bpl.n	8006b7a <_printf_i+0xce>
 8006b64:	6805      	ldr	r5, [r0, #0]
 8006b66:	600b      	str	r3, [r1, #0]
 8006b68:	2d00      	cmp	r5, #0
 8006b6a:	da03      	bge.n	8006b74 <_printf_i+0xc8>
 8006b6c:	232d      	movs	r3, #45	; 0x2d
 8006b6e:	426d      	negs	r5, r5
 8006b70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b74:	485e      	ldr	r0, [pc, #376]	; (8006cf0 <_printf_i+0x244>)
 8006b76:	230a      	movs	r3, #10
 8006b78:	e019      	b.n	8006bae <_printf_i+0x102>
 8006b7a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006b7e:	6805      	ldr	r5, [r0, #0]
 8006b80:	600b      	str	r3, [r1, #0]
 8006b82:	bf18      	it	ne
 8006b84:	b22d      	sxthne	r5, r5
 8006b86:	e7ef      	b.n	8006b68 <_printf_i+0xbc>
 8006b88:	680b      	ldr	r3, [r1, #0]
 8006b8a:	6825      	ldr	r5, [r4, #0]
 8006b8c:	1d18      	adds	r0, r3, #4
 8006b8e:	6008      	str	r0, [r1, #0]
 8006b90:	0628      	lsls	r0, r5, #24
 8006b92:	d501      	bpl.n	8006b98 <_printf_i+0xec>
 8006b94:	681d      	ldr	r5, [r3, #0]
 8006b96:	e002      	b.n	8006b9e <_printf_i+0xf2>
 8006b98:	0669      	lsls	r1, r5, #25
 8006b9a:	d5fb      	bpl.n	8006b94 <_printf_i+0xe8>
 8006b9c:	881d      	ldrh	r5, [r3, #0]
 8006b9e:	4854      	ldr	r0, [pc, #336]	; (8006cf0 <_printf_i+0x244>)
 8006ba0:	2f6f      	cmp	r7, #111	; 0x6f
 8006ba2:	bf0c      	ite	eq
 8006ba4:	2308      	moveq	r3, #8
 8006ba6:	230a      	movne	r3, #10
 8006ba8:	2100      	movs	r1, #0
 8006baa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006bae:	6866      	ldr	r6, [r4, #4]
 8006bb0:	60a6      	str	r6, [r4, #8]
 8006bb2:	2e00      	cmp	r6, #0
 8006bb4:	bfa2      	ittt	ge
 8006bb6:	6821      	ldrge	r1, [r4, #0]
 8006bb8:	f021 0104 	bicge.w	r1, r1, #4
 8006bbc:	6021      	strge	r1, [r4, #0]
 8006bbe:	b90d      	cbnz	r5, 8006bc4 <_printf_i+0x118>
 8006bc0:	2e00      	cmp	r6, #0
 8006bc2:	d04d      	beq.n	8006c60 <_printf_i+0x1b4>
 8006bc4:	4616      	mov	r6, r2
 8006bc6:	fbb5 f1f3 	udiv	r1, r5, r3
 8006bca:	fb03 5711 	mls	r7, r3, r1, r5
 8006bce:	5dc7      	ldrb	r7, [r0, r7]
 8006bd0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006bd4:	462f      	mov	r7, r5
 8006bd6:	42bb      	cmp	r3, r7
 8006bd8:	460d      	mov	r5, r1
 8006bda:	d9f4      	bls.n	8006bc6 <_printf_i+0x11a>
 8006bdc:	2b08      	cmp	r3, #8
 8006bde:	d10b      	bne.n	8006bf8 <_printf_i+0x14c>
 8006be0:	6823      	ldr	r3, [r4, #0]
 8006be2:	07df      	lsls	r7, r3, #31
 8006be4:	d508      	bpl.n	8006bf8 <_printf_i+0x14c>
 8006be6:	6923      	ldr	r3, [r4, #16]
 8006be8:	6861      	ldr	r1, [r4, #4]
 8006bea:	4299      	cmp	r1, r3
 8006bec:	bfde      	ittt	le
 8006bee:	2330      	movle	r3, #48	; 0x30
 8006bf0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006bf4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006bf8:	1b92      	subs	r2, r2, r6
 8006bfa:	6122      	str	r2, [r4, #16]
 8006bfc:	f8cd a000 	str.w	sl, [sp]
 8006c00:	464b      	mov	r3, r9
 8006c02:	aa03      	add	r2, sp, #12
 8006c04:	4621      	mov	r1, r4
 8006c06:	4640      	mov	r0, r8
 8006c08:	f7ff fee2 	bl	80069d0 <_printf_common>
 8006c0c:	3001      	adds	r0, #1
 8006c0e:	d14c      	bne.n	8006caa <_printf_i+0x1fe>
 8006c10:	f04f 30ff 	mov.w	r0, #4294967295
 8006c14:	b004      	add	sp, #16
 8006c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c1a:	4835      	ldr	r0, [pc, #212]	; (8006cf0 <_printf_i+0x244>)
 8006c1c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006c20:	6823      	ldr	r3, [r4, #0]
 8006c22:	680e      	ldr	r6, [r1, #0]
 8006c24:	061f      	lsls	r7, r3, #24
 8006c26:	f856 5b04 	ldr.w	r5, [r6], #4
 8006c2a:	600e      	str	r6, [r1, #0]
 8006c2c:	d514      	bpl.n	8006c58 <_printf_i+0x1ac>
 8006c2e:	07d9      	lsls	r1, r3, #31
 8006c30:	bf44      	itt	mi
 8006c32:	f043 0320 	orrmi.w	r3, r3, #32
 8006c36:	6023      	strmi	r3, [r4, #0]
 8006c38:	b91d      	cbnz	r5, 8006c42 <_printf_i+0x196>
 8006c3a:	6823      	ldr	r3, [r4, #0]
 8006c3c:	f023 0320 	bic.w	r3, r3, #32
 8006c40:	6023      	str	r3, [r4, #0]
 8006c42:	2310      	movs	r3, #16
 8006c44:	e7b0      	b.n	8006ba8 <_printf_i+0xfc>
 8006c46:	6823      	ldr	r3, [r4, #0]
 8006c48:	f043 0320 	orr.w	r3, r3, #32
 8006c4c:	6023      	str	r3, [r4, #0]
 8006c4e:	2378      	movs	r3, #120	; 0x78
 8006c50:	4828      	ldr	r0, [pc, #160]	; (8006cf4 <_printf_i+0x248>)
 8006c52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c56:	e7e3      	b.n	8006c20 <_printf_i+0x174>
 8006c58:	065e      	lsls	r6, r3, #25
 8006c5a:	bf48      	it	mi
 8006c5c:	b2ad      	uxthmi	r5, r5
 8006c5e:	e7e6      	b.n	8006c2e <_printf_i+0x182>
 8006c60:	4616      	mov	r6, r2
 8006c62:	e7bb      	b.n	8006bdc <_printf_i+0x130>
 8006c64:	680b      	ldr	r3, [r1, #0]
 8006c66:	6826      	ldr	r6, [r4, #0]
 8006c68:	6960      	ldr	r0, [r4, #20]
 8006c6a:	1d1d      	adds	r5, r3, #4
 8006c6c:	600d      	str	r5, [r1, #0]
 8006c6e:	0635      	lsls	r5, r6, #24
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	d501      	bpl.n	8006c78 <_printf_i+0x1cc>
 8006c74:	6018      	str	r0, [r3, #0]
 8006c76:	e002      	b.n	8006c7e <_printf_i+0x1d2>
 8006c78:	0671      	lsls	r1, r6, #25
 8006c7a:	d5fb      	bpl.n	8006c74 <_printf_i+0x1c8>
 8006c7c:	8018      	strh	r0, [r3, #0]
 8006c7e:	2300      	movs	r3, #0
 8006c80:	6123      	str	r3, [r4, #16]
 8006c82:	4616      	mov	r6, r2
 8006c84:	e7ba      	b.n	8006bfc <_printf_i+0x150>
 8006c86:	680b      	ldr	r3, [r1, #0]
 8006c88:	1d1a      	adds	r2, r3, #4
 8006c8a:	600a      	str	r2, [r1, #0]
 8006c8c:	681e      	ldr	r6, [r3, #0]
 8006c8e:	6862      	ldr	r2, [r4, #4]
 8006c90:	2100      	movs	r1, #0
 8006c92:	4630      	mov	r0, r6
 8006c94:	f7f9 faa4 	bl	80001e0 <memchr>
 8006c98:	b108      	cbz	r0, 8006c9e <_printf_i+0x1f2>
 8006c9a:	1b80      	subs	r0, r0, r6
 8006c9c:	6060      	str	r0, [r4, #4]
 8006c9e:	6863      	ldr	r3, [r4, #4]
 8006ca0:	6123      	str	r3, [r4, #16]
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ca8:	e7a8      	b.n	8006bfc <_printf_i+0x150>
 8006caa:	6923      	ldr	r3, [r4, #16]
 8006cac:	4632      	mov	r2, r6
 8006cae:	4649      	mov	r1, r9
 8006cb0:	4640      	mov	r0, r8
 8006cb2:	47d0      	blx	sl
 8006cb4:	3001      	adds	r0, #1
 8006cb6:	d0ab      	beq.n	8006c10 <_printf_i+0x164>
 8006cb8:	6823      	ldr	r3, [r4, #0]
 8006cba:	079b      	lsls	r3, r3, #30
 8006cbc:	d413      	bmi.n	8006ce6 <_printf_i+0x23a>
 8006cbe:	68e0      	ldr	r0, [r4, #12]
 8006cc0:	9b03      	ldr	r3, [sp, #12]
 8006cc2:	4298      	cmp	r0, r3
 8006cc4:	bfb8      	it	lt
 8006cc6:	4618      	movlt	r0, r3
 8006cc8:	e7a4      	b.n	8006c14 <_printf_i+0x168>
 8006cca:	2301      	movs	r3, #1
 8006ccc:	4632      	mov	r2, r6
 8006cce:	4649      	mov	r1, r9
 8006cd0:	4640      	mov	r0, r8
 8006cd2:	47d0      	blx	sl
 8006cd4:	3001      	adds	r0, #1
 8006cd6:	d09b      	beq.n	8006c10 <_printf_i+0x164>
 8006cd8:	3501      	adds	r5, #1
 8006cda:	68e3      	ldr	r3, [r4, #12]
 8006cdc:	9903      	ldr	r1, [sp, #12]
 8006cde:	1a5b      	subs	r3, r3, r1
 8006ce0:	42ab      	cmp	r3, r5
 8006ce2:	dcf2      	bgt.n	8006cca <_printf_i+0x21e>
 8006ce4:	e7eb      	b.n	8006cbe <_printf_i+0x212>
 8006ce6:	2500      	movs	r5, #0
 8006ce8:	f104 0619 	add.w	r6, r4, #25
 8006cec:	e7f5      	b.n	8006cda <_printf_i+0x22e>
 8006cee:	bf00      	nop
 8006cf0:	0801c782 	.word	0x0801c782
 8006cf4:	0801c793 	.word	0x0801c793

08006cf8 <iprintf>:
 8006cf8:	b40f      	push	{r0, r1, r2, r3}
 8006cfa:	4b0a      	ldr	r3, [pc, #40]	; (8006d24 <iprintf+0x2c>)
 8006cfc:	b513      	push	{r0, r1, r4, lr}
 8006cfe:	681c      	ldr	r4, [r3, #0]
 8006d00:	b124      	cbz	r4, 8006d0c <iprintf+0x14>
 8006d02:	69a3      	ldr	r3, [r4, #24]
 8006d04:	b913      	cbnz	r3, 8006d0c <iprintf+0x14>
 8006d06:	4620      	mov	r0, r4
 8006d08:	f001 f8d8 	bl	8007ebc <__sinit>
 8006d0c:	ab05      	add	r3, sp, #20
 8006d0e:	9a04      	ldr	r2, [sp, #16]
 8006d10:	68a1      	ldr	r1, [r4, #8]
 8006d12:	9301      	str	r3, [sp, #4]
 8006d14:	4620      	mov	r0, r4
 8006d16:	f001 fe53 	bl	80089c0 <_vfiprintf_r>
 8006d1a:	b002      	add	sp, #8
 8006d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d20:	b004      	add	sp, #16
 8006d22:	4770      	bx	lr
 8006d24:	20000010 	.word	0x20000010

08006d28 <_puts_r>:
 8006d28:	b570      	push	{r4, r5, r6, lr}
 8006d2a:	460e      	mov	r6, r1
 8006d2c:	4605      	mov	r5, r0
 8006d2e:	b118      	cbz	r0, 8006d38 <_puts_r+0x10>
 8006d30:	6983      	ldr	r3, [r0, #24]
 8006d32:	b90b      	cbnz	r3, 8006d38 <_puts_r+0x10>
 8006d34:	f001 f8c2 	bl	8007ebc <__sinit>
 8006d38:	69ab      	ldr	r3, [r5, #24]
 8006d3a:	68ac      	ldr	r4, [r5, #8]
 8006d3c:	b913      	cbnz	r3, 8006d44 <_puts_r+0x1c>
 8006d3e:	4628      	mov	r0, r5
 8006d40:	f001 f8bc 	bl	8007ebc <__sinit>
 8006d44:	4b2c      	ldr	r3, [pc, #176]	; (8006df8 <_puts_r+0xd0>)
 8006d46:	429c      	cmp	r4, r3
 8006d48:	d120      	bne.n	8006d8c <_puts_r+0x64>
 8006d4a:	686c      	ldr	r4, [r5, #4]
 8006d4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d4e:	07db      	lsls	r3, r3, #31
 8006d50:	d405      	bmi.n	8006d5e <_puts_r+0x36>
 8006d52:	89a3      	ldrh	r3, [r4, #12]
 8006d54:	0598      	lsls	r0, r3, #22
 8006d56:	d402      	bmi.n	8006d5e <_puts_r+0x36>
 8006d58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d5a:	f001 f952 	bl	8008002 <__retarget_lock_acquire_recursive>
 8006d5e:	89a3      	ldrh	r3, [r4, #12]
 8006d60:	0719      	lsls	r1, r3, #28
 8006d62:	d51d      	bpl.n	8006da0 <_puts_r+0x78>
 8006d64:	6923      	ldr	r3, [r4, #16]
 8006d66:	b1db      	cbz	r3, 8006da0 <_puts_r+0x78>
 8006d68:	3e01      	subs	r6, #1
 8006d6a:	68a3      	ldr	r3, [r4, #8]
 8006d6c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006d70:	3b01      	subs	r3, #1
 8006d72:	60a3      	str	r3, [r4, #8]
 8006d74:	bb39      	cbnz	r1, 8006dc6 <_puts_r+0x9e>
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	da38      	bge.n	8006dec <_puts_r+0xc4>
 8006d7a:	4622      	mov	r2, r4
 8006d7c:	210a      	movs	r1, #10
 8006d7e:	4628      	mov	r0, r5
 8006d80:	f000 f848 	bl	8006e14 <__swbuf_r>
 8006d84:	3001      	adds	r0, #1
 8006d86:	d011      	beq.n	8006dac <_puts_r+0x84>
 8006d88:	250a      	movs	r5, #10
 8006d8a:	e011      	b.n	8006db0 <_puts_r+0x88>
 8006d8c:	4b1b      	ldr	r3, [pc, #108]	; (8006dfc <_puts_r+0xd4>)
 8006d8e:	429c      	cmp	r4, r3
 8006d90:	d101      	bne.n	8006d96 <_puts_r+0x6e>
 8006d92:	68ac      	ldr	r4, [r5, #8]
 8006d94:	e7da      	b.n	8006d4c <_puts_r+0x24>
 8006d96:	4b1a      	ldr	r3, [pc, #104]	; (8006e00 <_puts_r+0xd8>)
 8006d98:	429c      	cmp	r4, r3
 8006d9a:	bf08      	it	eq
 8006d9c:	68ec      	ldreq	r4, [r5, #12]
 8006d9e:	e7d5      	b.n	8006d4c <_puts_r+0x24>
 8006da0:	4621      	mov	r1, r4
 8006da2:	4628      	mov	r0, r5
 8006da4:	f000 f888 	bl	8006eb8 <__swsetup_r>
 8006da8:	2800      	cmp	r0, #0
 8006daa:	d0dd      	beq.n	8006d68 <_puts_r+0x40>
 8006dac:	f04f 35ff 	mov.w	r5, #4294967295
 8006db0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006db2:	07da      	lsls	r2, r3, #31
 8006db4:	d405      	bmi.n	8006dc2 <_puts_r+0x9a>
 8006db6:	89a3      	ldrh	r3, [r4, #12]
 8006db8:	059b      	lsls	r3, r3, #22
 8006dba:	d402      	bmi.n	8006dc2 <_puts_r+0x9a>
 8006dbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006dbe:	f001 f921 	bl	8008004 <__retarget_lock_release_recursive>
 8006dc2:	4628      	mov	r0, r5
 8006dc4:	bd70      	pop	{r4, r5, r6, pc}
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	da04      	bge.n	8006dd4 <_puts_r+0xac>
 8006dca:	69a2      	ldr	r2, [r4, #24]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	dc06      	bgt.n	8006dde <_puts_r+0xb6>
 8006dd0:	290a      	cmp	r1, #10
 8006dd2:	d004      	beq.n	8006dde <_puts_r+0xb6>
 8006dd4:	6823      	ldr	r3, [r4, #0]
 8006dd6:	1c5a      	adds	r2, r3, #1
 8006dd8:	6022      	str	r2, [r4, #0]
 8006dda:	7019      	strb	r1, [r3, #0]
 8006ddc:	e7c5      	b.n	8006d6a <_puts_r+0x42>
 8006dde:	4622      	mov	r2, r4
 8006de0:	4628      	mov	r0, r5
 8006de2:	f000 f817 	bl	8006e14 <__swbuf_r>
 8006de6:	3001      	adds	r0, #1
 8006de8:	d1bf      	bne.n	8006d6a <_puts_r+0x42>
 8006dea:	e7df      	b.n	8006dac <_puts_r+0x84>
 8006dec:	6823      	ldr	r3, [r4, #0]
 8006dee:	250a      	movs	r5, #10
 8006df0:	1c5a      	adds	r2, r3, #1
 8006df2:	6022      	str	r2, [r4, #0]
 8006df4:	701d      	strb	r5, [r3, #0]
 8006df6:	e7db      	b.n	8006db0 <_puts_r+0x88>
 8006df8:	0801c858 	.word	0x0801c858
 8006dfc:	0801c878 	.word	0x0801c878
 8006e00:	0801c838 	.word	0x0801c838

08006e04 <puts>:
 8006e04:	4b02      	ldr	r3, [pc, #8]	; (8006e10 <puts+0xc>)
 8006e06:	4601      	mov	r1, r0
 8006e08:	6818      	ldr	r0, [r3, #0]
 8006e0a:	f7ff bf8d 	b.w	8006d28 <_puts_r>
 8006e0e:	bf00      	nop
 8006e10:	20000010 	.word	0x20000010

08006e14 <__swbuf_r>:
 8006e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e16:	460e      	mov	r6, r1
 8006e18:	4614      	mov	r4, r2
 8006e1a:	4605      	mov	r5, r0
 8006e1c:	b118      	cbz	r0, 8006e26 <__swbuf_r+0x12>
 8006e1e:	6983      	ldr	r3, [r0, #24]
 8006e20:	b90b      	cbnz	r3, 8006e26 <__swbuf_r+0x12>
 8006e22:	f001 f84b 	bl	8007ebc <__sinit>
 8006e26:	4b21      	ldr	r3, [pc, #132]	; (8006eac <__swbuf_r+0x98>)
 8006e28:	429c      	cmp	r4, r3
 8006e2a:	d12b      	bne.n	8006e84 <__swbuf_r+0x70>
 8006e2c:	686c      	ldr	r4, [r5, #4]
 8006e2e:	69a3      	ldr	r3, [r4, #24]
 8006e30:	60a3      	str	r3, [r4, #8]
 8006e32:	89a3      	ldrh	r3, [r4, #12]
 8006e34:	071a      	lsls	r2, r3, #28
 8006e36:	d52f      	bpl.n	8006e98 <__swbuf_r+0x84>
 8006e38:	6923      	ldr	r3, [r4, #16]
 8006e3a:	b36b      	cbz	r3, 8006e98 <__swbuf_r+0x84>
 8006e3c:	6923      	ldr	r3, [r4, #16]
 8006e3e:	6820      	ldr	r0, [r4, #0]
 8006e40:	1ac0      	subs	r0, r0, r3
 8006e42:	6963      	ldr	r3, [r4, #20]
 8006e44:	b2f6      	uxtb	r6, r6
 8006e46:	4283      	cmp	r3, r0
 8006e48:	4637      	mov	r7, r6
 8006e4a:	dc04      	bgt.n	8006e56 <__swbuf_r+0x42>
 8006e4c:	4621      	mov	r1, r4
 8006e4e:	4628      	mov	r0, r5
 8006e50:	f000 ffa0 	bl	8007d94 <_fflush_r>
 8006e54:	bb30      	cbnz	r0, 8006ea4 <__swbuf_r+0x90>
 8006e56:	68a3      	ldr	r3, [r4, #8]
 8006e58:	3b01      	subs	r3, #1
 8006e5a:	60a3      	str	r3, [r4, #8]
 8006e5c:	6823      	ldr	r3, [r4, #0]
 8006e5e:	1c5a      	adds	r2, r3, #1
 8006e60:	6022      	str	r2, [r4, #0]
 8006e62:	701e      	strb	r6, [r3, #0]
 8006e64:	6963      	ldr	r3, [r4, #20]
 8006e66:	3001      	adds	r0, #1
 8006e68:	4283      	cmp	r3, r0
 8006e6a:	d004      	beq.n	8006e76 <__swbuf_r+0x62>
 8006e6c:	89a3      	ldrh	r3, [r4, #12]
 8006e6e:	07db      	lsls	r3, r3, #31
 8006e70:	d506      	bpl.n	8006e80 <__swbuf_r+0x6c>
 8006e72:	2e0a      	cmp	r6, #10
 8006e74:	d104      	bne.n	8006e80 <__swbuf_r+0x6c>
 8006e76:	4621      	mov	r1, r4
 8006e78:	4628      	mov	r0, r5
 8006e7a:	f000 ff8b 	bl	8007d94 <_fflush_r>
 8006e7e:	b988      	cbnz	r0, 8006ea4 <__swbuf_r+0x90>
 8006e80:	4638      	mov	r0, r7
 8006e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e84:	4b0a      	ldr	r3, [pc, #40]	; (8006eb0 <__swbuf_r+0x9c>)
 8006e86:	429c      	cmp	r4, r3
 8006e88:	d101      	bne.n	8006e8e <__swbuf_r+0x7a>
 8006e8a:	68ac      	ldr	r4, [r5, #8]
 8006e8c:	e7cf      	b.n	8006e2e <__swbuf_r+0x1a>
 8006e8e:	4b09      	ldr	r3, [pc, #36]	; (8006eb4 <__swbuf_r+0xa0>)
 8006e90:	429c      	cmp	r4, r3
 8006e92:	bf08      	it	eq
 8006e94:	68ec      	ldreq	r4, [r5, #12]
 8006e96:	e7ca      	b.n	8006e2e <__swbuf_r+0x1a>
 8006e98:	4621      	mov	r1, r4
 8006e9a:	4628      	mov	r0, r5
 8006e9c:	f000 f80c 	bl	8006eb8 <__swsetup_r>
 8006ea0:	2800      	cmp	r0, #0
 8006ea2:	d0cb      	beq.n	8006e3c <__swbuf_r+0x28>
 8006ea4:	f04f 37ff 	mov.w	r7, #4294967295
 8006ea8:	e7ea      	b.n	8006e80 <__swbuf_r+0x6c>
 8006eaa:	bf00      	nop
 8006eac:	0801c858 	.word	0x0801c858
 8006eb0:	0801c878 	.word	0x0801c878
 8006eb4:	0801c838 	.word	0x0801c838

08006eb8 <__swsetup_r>:
 8006eb8:	4b32      	ldr	r3, [pc, #200]	; (8006f84 <__swsetup_r+0xcc>)
 8006eba:	b570      	push	{r4, r5, r6, lr}
 8006ebc:	681d      	ldr	r5, [r3, #0]
 8006ebe:	4606      	mov	r6, r0
 8006ec0:	460c      	mov	r4, r1
 8006ec2:	b125      	cbz	r5, 8006ece <__swsetup_r+0x16>
 8006ec4:	69ab      	ldr	r3, [r5, #24]
 8006ec6:	b913      	cbnz	r3, 8006ece <__swsetup_r+0x16>
 8006ec8:	4628      	mov	r0, r5
 8006eca:	f000 fff7 	bl	8007ebc <__sinit>
 8006ece:	4b2e      	ldr	r3, [pc, #184]	; (8006f88 <__swsetup_r+0xd0>)
 8006ed0:	429c      	cmp	r4, r3
 8006ed2:	d10f      	bne.n	8006ef4 <__swsetup_r+0x3c>
 8006ed4:	686c      	ldr	r4, [r5, #4]
 8006ed6:	89a3      	ldrh	r3, [r4, #12]
 8006ed8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006edc:	0719      	lsls	r1, r3, #28
 8006ede:	d42c      	bmi.n	8006f3a <__swsetup_r+0x82>
 8006ee0:	06dd      	lsls	r5, r3, #27
 8006ee2:	d411      	bmi.n	8006f08 <__swsetup_r+0x50>
 8006ee4:	2309      	movs	r3, #9
 8006ee6:	6033      	str	r3, [r6, #0]
 8006ee8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006eec:	81a3      	strh	r3, [r4, #12]
 8006eee:	f04f 30ff 	mov.w	r0, #4294967295
 8006ef2:	e03e      	b.n	8006f72 <__swsetup_r+0xba>
 8006ef4:	4b25      	ldr	r3, [pc, #148]	; (8006f8c <__swsetup_r+0xd4>)
 8006ef6:	429c      	cmp	r4, r3
 8006ef8:	d101      	bne.n	8006efe <__swsetup_r+0x46>
 8006efa:	68ac      	ldr	r4, [r5, #8]
 8006efc:	e7eb      	b.n	8006ed6 <__swsetup_r+0x1e>
 8006efe:	4b24      	ldr	r3, [pc, #144]	; (8006f90 <__swsetup_r+0xd8>)
 8006f00:	429c      	cmp	r4, r3
 8006f02:	bf08      	it	eq
 8006f04:	68ec      	ldreq	r4, [r5, #12]
 8006f06:	e7e6      	b.n	8006ed6 <__swsetup_r+0x1e>
 8006f08:	0758      	lsls	r0, r3, #29
 8006f0a:	d512      	bpl.n	8006f32 <__swsetup_r+0x7a>
 8006f0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f0e:	b141      	cbz	r1, 8006f22 <__swsetup_r+0x6a>
 8006f10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f14:	4299      	cmp	r1, r3
 8006f16:	d002      	beq.n	8006f1e <__swsetup_r+0x66>
 8006f18:	4630      	mov	r0, r6
 8006f1a:	f001 fc7d 	bl	8008818 <_free_r>
 8006f1e:	2300      	movs	r3, #0
 8006f20:	6363      	str	r3, [r4, #52]	; 0x34
 8006f22:	89a3      	ldrh	r3, [r4, #12]
 8006f24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006f28:	81a3      	strh	r3, [r4, #12]
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	6063      	str	r3, [r4, #4]
 8006f2e:	6923      	ldr	r3, [r4, #16]
 8006f30:	6023      	str	r3, [r4, #0]
 8006f32:	89a3      	ldrh	r3, [r4, #12]
 8006f34:	f043 0308 	orr.w	r3, r3, #8
 8006f38:	81a3      	strh	r3, [r4, #12]
 8006f3a:	6923      	ldr	r3, [r4, #16]
 8006f3c:	b94b      	cbnz	r3, 8006f52 <__swsetup_r+0x9a>
 8006f3e:	89a3      	ldrh	r3, [r4, #12]
 8006f40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006f44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f48:	d003      	beq.n	8006f52 <__swsetup_r+0x9a>
 8006f4a:	4621      	mov	r1, r4
 8006f4c:	4630      	mov	r0, r6
 8006f4e:	f001 f87f 	bl	8008050 <__smakebuf_r>
 8006f52:	89a0      	ldrh	r0, [r4, #12]
 8006f54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f58:	f010 0301 	ands.w	r3, r0, #1
 8006f5c:	d00a      	beq.n	8006f74 <__swsetup_r+0xbc>
 8006f5e:	2300      	movs	r3, #0
 8006f60:	60a3      	str	r3, [r4, #8]
 8006f62:	6963      	ldr	r3, [r4, #20]
 8006f64:	425b      	negs	r3, r3
 8006f66:	61a3      	str	r3, [r4, #24]
 8006f68:	6923      	ldr	r3, [r4, #16]
 8006f6a:	b943      	cbnz	r3, 8006f7e <__swsetup_r+0xc6>
 8006f6c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006f70:	d1ba      	bne.n	8006ee8 <__swsetup_r+0x30>
 8006f72:	bd70      	pop	{r4, r5, r6, pc}
 8006f74:	0781      	lsls	r1, r0, #30
 8006f76:	bf58      	it	pl
 8006f78:	6963      	ldrpl	r3, [r4, #20]
 8006f7a:	60a3      	str	r3, [r4, #8]
 8006f7c:	e7f4      	b.n	8006f68 <__swsetup_r+0xb0>
 8006f7e:	2000      	movs	r0, #0
 8006f80:	e7f7      	b.n	8006f72 <__swsetup_r+0xba>
 8006f82:	bf00      	nop
 8006f84:	20000010 	.word	0x20000010
 8006f88:	0801c858 	.word	0x0801c858
 8006f8c:	0801c878 	.word	0x0801c878
 8006f90:	0801c838 	.word	0x0801c838

08006f94 <quorem>:
 8006f94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f98:	6903      	ldr	r3, [r0, #16]
 8006f9a:	690c      	ldr	r4, [r1, #16]
 8006f9c:	42a3      	cmp	r3, r4
 8006f9e:	4607      	mov	r7, r0
 8006fa0:	f2c0 8081 	blt.w	80070a6 <quorem+0x112>
 8006fa4:	3c01      	subs	r4, #1
 8006fa6:	f101 0814 	add.w	r8, r1, #20
 8006faa:	f100 0514 	add.w	r5, r0, #20
 8006fae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006fb2:	9301      	str	r3, [sp, #4]
 8006fb4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006fb8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006fc4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006fc8:	fbb2 f6f3 	udiv	r6, r2, r3
 8006fcc:	d331      	bcc.n	8007032 <quorem+0x9e>
 8006fce:	f04f 0e00 	mov.w	lr, #0
 8006fd2:	4640      	mov	r0, r8
 8006fd4:	46ac      	mov	ip, r5
 8006fd6:	46f2      	mov	sl, lr
 8006fd8:	f850 2b04 	ldr.w	r2, [r0], #4
 8006fdc:	b293      	uxth	r3, r2
 8006fde:	fb06 e303 	mla	r3, r6, r3, lr
 8006fe2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	ebaa 0303 	sub.w	r3, sl, r3
 8006fec:	0c12      	lsrs	r2, r2, #16
 8006fee:	f8dc a000 	ldr.w	sl, [ip]
 8006ff2:	fb06 e202 	mla	r2, r6, r2, lr
 8006ff6:	fa13 f38a 	uxtah	r3, r3, sl
 8006ffa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006ffe:	fa1f fa82 	uxth.w	sl, r2
 8007002:	f8dc 2000 	ldr.w	r2, [ip]
 8007006:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800700a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800700e:	b29b      	uxth	r3, r3
 8007010:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007014:	4581      	cmp	r9, r0
 8007016:	f84c 3b04 	str.w	r3, [ip], #4
 800701a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800701e:	d2db      	bcs.n	8006fd8 <quorem+0x44>
 8007020:	f855 300b 	ldr.w	r3, [r5, fp]
 8007024:	b92b      	cbnz	r3, 8007032 <quorem+0x9e>
 8007026:	9b01      	ldr	r3, [sp, #4]
 8007028:	3b04      	subs	r3, #4
 800702a:	429d      	cmp	r5, r3
 800702c:	461a      	mov	r2, r3
 800702e:	d32e      	bcc.n	800708e <quorem+0xfa>
 8007030:	613c      	str	r4, [r7, #16]
 8007032:	4638      	mov	r0, r7
 8007034:	f001 fae0 	bl	80085f8 <__mcmp>
 8007038:	2800      	cmp	r0, #0
 800703a:	db24      	blt.n	8007086 <quorem+0xf2>
 800703c:	3601      	adds	r6, #1
 800703e:	4628      	mov	r0, r5
 8007040:	f04f 0c00 	mov.w	ip, #0
 8007044:	f858 2b04 	ldr.w	r2, [r8], #4
 8007048:	f8d0 e000 	ldr.w	lr, [r0]
 800704c:	b293      	uxth	r3, r2
 800704e:	ebac 0303 	sub.w	r3, ip, r3
 8007052:	0c12      	lsrs	r2, r2, #16
 8007054:	fa13 f38e 	uxtah	r3, r3, lr
 8007058:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800705c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007060:	b29b      	uxth	r3, r3
 8007062:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007066:	45c1      	cmp	r9, r8
 8007068:	f840 3b04 	str.w	r3, [r0], #4
 800706c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007070:	d2e8      	bcs.n	8007044 <quorem+0xb0>
 8007072:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007076:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800707a:	b922      	cbnz	r2, 8007086 <quorem+0xf2>
 800707c:	3b04      	subs	r3, #4
 800707e:	429d      	cmp	r5, r3
 8007080:	461a      	mov	r2, r3
 8007082:	d30a      	bcc.n	800709a <quorem+0x106>
 8007084:	613c      	str	r4, [r7, #16]
 8007086:	4630      	mov	r0, r6
 8007088:	b003      	add	sp, #12
 800708a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800708e:	6812      	ldr	r2, [r2, #0]
 8007090:	3b04      	subs	r3, #4
 8007092:	2a00      	cmp	r2, #0
 8007094:	d1cc      	bne.n	8007030 <quorem+0x9c>
 8007096:	3c01      	subs	r4, #1
 8007098:	e7c7      	b.n	800702a <quorem+0x96>
 800709a:	6812      	ldr	r2, [r2, #0]
 800709c:	3b04      	subs	r3, #4
 800709e:	2a00      	cmp	r2, #0
 80070a0:	d1f0      	bne.n	8007084 <quorem+0xf0>
 80070a2:	3c01      	subs	r4, #1
 80070a4:	e7eb      	b.n	800707e <quorem+0xea>
 80070a6:	2000      	movs	r0, #0
 80070a8:	e7ee      	b.n	8007088 <quorem+0xf4>
 80070aa:	0000      	movs	r0, r0
 80070ac:	0000      	movs	r0, r0
	...

080070b0 <_dtoa_r>:
 80070b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070b4:	ed2d 8b02 	vpush	{d8}
 80070b8:	ec57 6b10 	vmov	r6, r7, d0
 80070bc:	b095      	sub	sp, #84	; 0x54
 80070be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80070c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80070c4:	9105      	str	r1, [sp, #20]
 80070c6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80070ca:	4604      	mov	r4, r0
 80070cc:	9209      	str	r2, [sp, #36]	; 0x24
 80070ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80070d0:	b975      	cbnz	r5, 80070f0 <_dtoa_r+0x40>
 80070d2:	2010      	movs	r0, #16
 80070d4:	f000 fffc 	bl	80080d0 <malloc>
 80070d8:	4602      	mov	r2, r0
 80070da:	6260      	str	r0, [r4, #36]	; 0x24
 80070dc:	b920      	cbnz	r0, 80070e8 <_dtoa_r+0x38>
 80070de:	4bb2      	ldr	r3, [pc, #712]	; (80073a8 <_dtoa_r+0x2f8>)
 80070e0:	21ea      	movs	r1, #234	; 0xea
 80070e2:	48b2      	ldr	r0, [pc, #712]	; (80073ac <_dtoa_r+0x2fc>)
 80070e4:	f001 fe02 	bl	8008cec <__assert_func>
 80070e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80070ec:	6005      	str	r5, [r0, #0]
 80070ee:	60c5      	str	r5, [r0, #12]
 80070f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070f2:	6819      	ldr	r1, [r3, #0]
 80070f4:	b151      	cbz	r1, 800710c <_dtoa_r+0x5c>
 80070f6:	685a      	ldr	r2, [r3, #4]
 80070f8:	604a      	str	r2, [r1, #4]
 80070fa:	2301      	movs	r3, #1
 80070fc:	4093      	lsls	r3, r2
 80070fe:	608b      	str	r3, [r1, #8]
 8007100:	4620      	mov	r0, r4
 8007102:	f001 f83b 	bl	800817c <_Bfree>
 8007106:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007108:	2200      	movs	r2, #0
 800710a:	601a      	str	r2, [r3, #0]
 800710c:	1e3b      	subs	r3, r7, #0
 800710e:	bfb9      	ittee	lt
 8007110:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007114:	9303      	strlt	r3, [sp, #12]
 8007116:	2300      	movge	r3, #0
 8007118:	f8c8 3000 	strge.w	r3, [r8]
 800711c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007120:	4ba3      	ldr	r3, [pc, #652]	; (80073b0 <_dtoa_r+0x300>)
 8007122:	bfbc      	itt	lt
 8007124:	2201      	movlt	r2, #1
 8007126:	f8c8 2000 	strlt.w	r2, [r8]
 800712a:	ea33 0309 	bics.w	r3, r3, r9
 800712e:	d11b      	bne.n	8007168 <_dtoa_r+0xb8>
 8007130:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007132:	f242 730f 	movw	r3, #9999	; 0x270f
 8007136:	6013      	str	r3, [r2, #0]
 8007138:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800713c:	4333      	orrs	r3, r6
 800713e:	f000 857a 	beq.w	8007c36 <_dtoa_r+0xb86>
 8007142:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007144:	b963      	cbnz	r3, 8007160 <_dtoa_r+0xb0>
 8007146:	4b9b      	ldr	r3, [pc, #620]	; (80073b4 <_dtoa_r+0x304>)
 8007148:	e024      	b.n	8007194 <_dtoa_r+0xe4>
 800714a:	4b9b      	ldr	r3, [pc, #620]	; (80073b8 <_dtoa_r+0x308>)
 800714c:	9300      	str	r3, [sp, #0]
 800714e:	3308      	adds	r3, #8
 8007150:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007152:	6013      	str	r3, [r2, #0]
 8007154:	9800      	ldr	r0, [sp, #0]
 8007156:	b015      	add	sp, #84	; 0x54
 8007158:	ecbd 8b02 	vpop	{d8}
 800715c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007160:	4b94      	ldr	r3, [pc, #592]	; (80073b4 <_dtoa_r+0x304>)
 8007162:	9300      	str	r3, [sp, #0]
 8007164:	3303      	adds	r3, #3
 8007166:	e7f3      	b.n	8007150 <_dtoa_r+0xa0>
 8007168:	ed9d 7b02 	vldr	d7, [sp, #8]
 800716c:	2200      	movs	r2, #0
 800716e:	ec51 0b17 	vmov	r0, r1, d7
 8007172:	2300      	movs	r3, #0
 8007174:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007178:	f7f9 fca6 	bl	8000ac8 <__aeabi_dcmpeq>
 800717c:	4680      	mov	r8, r0
 800717e:	b158      	cbz	r0, 8007198 <_dtoa_r+0xe8>
 8007180:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007182:	2301      	movs	r3, #1
 8007184:	6013      	str	r3, [r2, #0]
 8007186:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007188:	2b00      	cmp	r3, #0
 800718a:	f000 8551 	beq.w	8007c30 <_dtoa_r+0xb80>
 800718e:	488b      	ldr	r0, [pc, #556]	; (80073bc <_dtoa_r+0x30c>)
 8007190:	6018      	str	r0, [r3, #0]
 8007192:	1e43      	subs	r3, r0, #1
 8007194:	9300      	str	r3, [sp, #0]
 8007196:	e7dd      	b.n	8007154 <_dtoa_r+0xa4>
 8007198:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800719c:	aa12      	add	r2, sp, #72	; 0x48
 800719e:	a913      	add	r1, sp, #76	; 0x4c
 80071a0:	4620      	mov	r0, r4
 80071a2:	f001 facd 	bl	8008740 <__d2b>
 80071a6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80071aa:	4683      	mov	fp, r0
 80071ac:	2d00      	cmp	r5, #0
 80071ae:	d07c      	beq.n	80072aa <_dtoa_r+0x1fa>
 80071b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071b2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80071b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071ba:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80071be:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80071c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80071c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80071ca:	4b7d      	ldr	r3, [pc, #500]	; (80073c0 <_dtoa_r+0x310>)
 80071cc:	2200      	movs	r2, #0
 80071ce:	4630      	mov	r0, r6
 80071d0:	4639      	mov	r1, r7
 80071d2:	f7f9 f859 	bl	8000288 <__aeabi_dsub>
 80071d6:	a36e      	add	r3, pc, #440	; (adr r3, 8007390 <_dtoa_r+0x2e0>)
 80071d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071dc:	f7f9 fa0c 	bl	80005f8 <__aeabi_dmul>
 80071e0:	a36d      	add	r3, pc, #436	; (adr r3, 8007398 <_dtoa_r+0x2e8>)
 80071e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e6:	f7f9 f851 	bl	800028c <__adddf3>
 80071ea:	4606      	mov	r6, r0
 80071ec:	4628      	mov	r0, r5
 80071ee:	460f      	mov	r7, r1
 80071f0:	f7f9 f998 	bl	8000524 <__aeabi_i2d>
 80071f4:	a36a      	add	r3, pc, #424	; (adr r3, 80073a0 <_dtoa_r+0x2f0>)
 80071f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071fa:	f7f9 f9fd 	bl	80005f8 <__aeabi_dmul>
 80071fe:	4602      	mov	r2, r0
 8007200:	460b      	mov	r3, r1
 8007202:	4630      	mov	r0, r6
 8007204:	4639      	mov	r1, r7
 8007206:	f7f9 f841 	bl	800028c <__adddf3>
 800720a:	4606      	mov	r6, r0
 800720c:	460f      	mov	r7, r1
 800720e:	f7f9 fca3 	bl	8000b58 <__aeabi_d2iz>
 8007212:	2200      	movs	r2, #0
 8007214:	4682      	mov	sl, r0
 8007216:	2300      	movs	r3, #0
 8007218:	4630      	mov	r0, r6
 800721a:	4639      	mov	r1, r7
 800721c:	f7f9 fc5e 	bl	8000adc <__aeabi_dcmplt>
 8007220:	b148      	cbz	r0, 8007236 <_dtoa_r+0x186>
 8007222:	4650      	mov	r0, sl
 8007224:	f7f9 f97e 	bl	8000524 <__aeabi_i2d>
 8007228:	4632      	mov	r2, r6
 800722a:	463b      	mov	r3, r7
 800722c:	f7f9 fc4c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007230:	b908      	cbnz	r0, 8007236 <_dtoa_r+0x186>
 8007232:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007236:	f1ba 0f16 	cmp.w	sl, #22
 800723a:	d854      	bhi.n	80072e6 <_dtoa_r+0x236>
 800723c:	4b61      	ldr	r3, [pc, #388]	; (80073c4 <_dtoa_r+0x314>)
 800723e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007246:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800724a:	f7f9 fc47 	bl	8000adc <__aeabi_dcmplt>
 800724e:	2800      	cmp	r0, #0
 8007250:	d04b      	beq.n	80072ea <_dtoa_r+0x23a>
 8007252:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007256:	2300      	movs	r3, #0
 8007258:	930e      	str	r3, [sp, #56]	; 0x38
 800725a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800725c:	1b5d      	subs	r5, r3, r5
 800725e:	1e6b      	subs	r3, r5, #1
 8007260:	9304      	str	r3, [sp, #16]
 8007262:	bf43      	ittte	mi
 8007264:	2300      	movmi	r3, #0
 8007266:	f1c5 0801 	rsbmi	r8, r5, #1
 800726a:	9304      	strmi	r3, [sp, #16]
 800726c:	f04f 0800 	movpl.w	r8, #0
 8007270:	f1ba 0f00 	cmp.w	sl, #0
 8007274:	db3b      	blt.n	80072ee <_dtoa_r+0x23e>
 8007276:	9b04      	ldr	r3, [sp, #16]
 8007278:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800727c:	4453      	add	r3, sl
 800727e:	9304      	str	r3, [sp, #16]
 8007280:	2300      	movs	r3, #0
 8007282:	9306      	str	r3, [sp, #24]
 8007284:	9b05      	ldr	r3, [sp, #20]
 8007286:	2b09      	cmp	r3, #9
 8007288:	d869      	bhi.n	800735e <_dtoa_r+0x2ae>
 800728a:	2b05      	cmp	r3, #5
 800728c:	bfc4      	itt	gt
 800728e:	3b04      	subgt	r3, #4
 8007290:	9305      	strgt	r3, [sp, #20]
 8007292:	9b05      	ldr	r3, [sp, #20]
 8007294:	f1a3 0302 	sub.w	r3, r3, #2
 8007298:	bfcc      	ite	gt
 800729a:	2500      	movgt	r5, #0
 800729c:	2501      	movle	r5, #1
 800729e:	2b03      	cmp	r3, #3
 80072a0:	d869      	bhi.n	8007376 <_dtoa_r+0x2c6>
 80072a2:	e8df f003 	tbb	[pc, r3]
 80072a6:	4e2c      	.short	0x4e2c
 80072a8:	5a4c      	.short	0x5a4c
 80072aa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80072ae:	441d      	add	r5, r3
 80072b0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80072b4:	2b20      	cmp	r3, #32
 80072b6:	bfc1      	itttt	gt
 80072b8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80072bc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80072c0:	fa09 f303 	lslgt.w	r3, r9, r3
 80072c4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80072c8:	bfda      	itte	le
 80072ca:	f1c3 0320 	rsble	r3, r3, #32
 80072ce:	fa06 f003 	lslle.w	r0, r6, r3
 80072d2:	4318      	orrgt	r0, r3
 80072d4:	f7f9 f916 	bl	8000504 <__aeabi_ui2d>
 80072d8:	2301      	movs	r3, #1
 80072da:	4606      	mov	r6, r0
 80072dc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80072e0:	3d01      	subs	r5, #1
 80072e2:	9310      	str	r3, [sp, #64]	; 0x40
 80072e4:	e771      	b.n	80071ca <_dtoa_r+0x11a>
 80072e6:	2301      	movs	r3, #1
 80072e8:	e7b6      	b.n	8007258 <_dtoa_r+0x1a8>
 80072ea:	900e      	str	r0, [sp, #56]	; 0x38
 80072ec:	e7b5      	b.n	800725a <_dtoa_r+0x1aa>
 80072ee:	f1ca 0300 	rsb	r3, sl, #0
 80072f2:	9306      	str	r3, [sp, #24]
 80072f4:	2300      	movs	r3, #0
 80072f6:	eba8 080a 	sub.w	r8, r8, sl
 80072fa:	930d      	str	r3, [sp, #52]	; 0x34
 80072fc:	e7c2      	b.n	8007284 <_dtoa_r+0x1d4>
 80072fe:	2300      	movs	r3, #0
 8007300:	9308      	str	r3, [sp, #32]
 8007302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007304:	2b00      	cmp	r3, #0
 8007306:	dc39      	bgt.n	800737c <_dtoa_r+0x2cc>
 8007308:	f04f 0901 	mov.w	r9, #1
 800730c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007310:	464b      	mov	r3, r9
 8007312:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007316:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007318:	2200      	movs	r2, #0
 800731a:	6042      	str	r2, [r0, #4]
 800731c:	2204      	movs	r2, #4
 800731e:	f102 0614 	add.w	r6, r2, #20
 8007322:	429e      	cmp	r6, r3
 8007324:	6841      	ldr	r1, [r0, #4]
 8007326:	d92f      	bls.n	8007388 <_dtoa_r+0x2d8>
 8007328:	4620      	mov	r0, r4
 800732a:	f000 fee7 	bl	80080fc <_Balloc>
 800732e:	9000      	str	r0, [sp, #0]
 8007330:	2800      	cmp	r0, #0
 8007332:	d14b      	bne.n	80073cc <_dtoa_r+0x31c>
 8007334:	4b24      	ldr	r3, [pc, #144]	; (80073c8 <_dtoa_r+0x318>)
 8007336:	4602      	mov	r2, r0
 8007338:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800733c:	e6d1      	b.n	80070e2 <_dtoa_r+0x32>
 800733e:	2301      	movs	r3, #1
 8007340:	e7de      	b.n	8007300 <_dtoa_r+0x250>
 8007342:	2300      	movs	r3, #0
 8007344:	9308      	str	r3, [sp, #32]
 8007346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007348:	eb0a 0903 	add.w	r9, sl, r3
 800734c:	f109 0301 	add.w	r3, r9, #1
 8007350:	2b01      	cmp	r3, #1
 8007352:	9301      	str	r3, [sp, #4]
 8007354:	bfb8      	it	lt
 8007356:	2301      	movlt	r3, #1
 8007358:	e7dd      	b.n	8007316 <_dtoa_r+0x266>
 800735a:	2301      	movs	r3, #1
 800735c:	e7f2      	b.n	8007344 <_dtoa_r+0x294>
 800735e:	2501      	movs	r5, #1
 8007360:	2300      	movs	r3, #0
 8007362:	9305      	str	r3, [sp, #20]
 8007364:	9508      	str	r5, [sp, #32]
 8007366:	f04f 39ff 	mov.w	r9, #4294967295
 800736a:	2200      	movs	r2, #0
 800736c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007370:	2312      	movs	r3, #18
 8007372:	9209      	str	r2, [sp, #36]	; 0x24
 8007374:	e7cf      	b.n	8007316 <_dtoa_r+0x266>
 8007376:	2301      	movs	r3, #1
 8007378:	9308      	str	r3, [sp, #32]
 800737a:	e7f4      	b.n	8007366 <_dtoa_r+0x2b6>
 800737c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007380:	f8cd 9004 	str.w	r9, [sp, #4]
 8007384:	464b      	mov	r3, r9
 8007386:	e7c6      	b.n	8007316 <_dtoa_r+0x266>
 8007388:	3101      	adds	r1, #1
 800738a:	6041      	str	r1, [r0, #4]
 800738c:	0052      	lsls	r2, r2, #1
 800738e:	e7c6      	b.n	800731e <_dtoa_r+0x26e>
 8007390:	636f4361 	.word	0x636f4361
 8007394:	3fd287a7 	.word	0x3fd287a7
 8007398:	8b60c8b3 	.word	0x8b60c8b3
 800739c:	3fc68a28 	.word	0x3fc68a28
 80073a0:	509f79fb 	.word	0x509f79fb
 80073a4:	3fd34413 	.word	0x3fd34413
 80073a8:	0801c7b1 	.word	0x0801c7b1
 80073ac:	0801c7c8 	.word	0x0801c7c8
 80073b0:	7ff00000 	.word	0x7ff00000
 80073b4:	0801c7ad 	.word	0x0801c7ad
 80073b8:	0801c7a4 	.word	0x0801c7a4
 80073bc:	0801c781 	.word	0x0801c781
 80073c0:	3ff80000 	.word	0x3ff80000
 80073c4:	0801c920 	.word	0x0801c920
 80073c8:	0801c827 	.word	0x0801c827
 80073cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073ce:	9a00      	ldr	r2, [sp, #0]
 80073d0:	601a      	str	r2, [r3, #0]
 80073d2:	9b01      	ldr	r3, [sp, #4]
 80073d4:	2b0e      	cmp	r3, #14
 80073d6:	f200 80ad 	bhi.w	8007534 <_dtoa_r+0x484>
 80073da:	2d00      	cmp	r5, #0
 80073dc:	f000 80aa 	beq.w	8007534 <_dtoa_r+0x484>
 80073e0:	f1ba 0f00 	cmp.w	sl, #0
 80073e4:	dd36      	ble.n	8007454 <_dtoa_r+0x3a4>
 80073e6:	4ac3      	ldr	r2, [pc, #780]	; (80076f4 <_dtoa_r+0x644>)
 80073e8:	f00a 030f 	and.w	r3, sl, #15
 80073ec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80073f0:	ed93 7b00 	vldr	d7, [r3]
 80073f4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80073f8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80073fc:	eeb0 8a47 	vmov.f32	s16, s14
 8007400:	eef0 8a67 	vmov.f32	s17, s15
 8007404:	d016      	beq.n	8007434 <_dtoa_r+0x384>
 8007406:	4bbc      	ldr	r3, [pc, #752]	; (80076f8 <_dtoa_r+0x648>)
 8007408:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800740c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007410:	f7f9 fa1c 	bl	800084c <__aeabi_ddiv>
 8007414:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007418:	f007 070f 	and.w	r7, r7, #15
 800741c:	2503      	movs	r5, #3
 800741e:	4eb6      	ldr	r6, [pc, #728]	; (80076f8 <_dtoa_r+0x648>)
 8007420:	b957      	cbnz	r7, 8007438 <_dtoa_r+0x388>
 8007422:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007426:	ec53 2b18 	vmov	r2, r3, d8
 800742a:	f7f9 fa0f 	bl	800084c <__aeabi_ddiv>
 800742e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007432:	e029      	b.n	8007488 <_dtoa_r+0x3d8>
 8007434:	2502      	movs	r5, #2
 8007436:	e7f2      	b.n	800741e <_dtoa_r+0x36e>
 8007438:	07f9      	lsls	r1, r7, #31
 800743a:	d508      	bpl.n	800744e <_dtoa_r+0x39e>
 800743c:	ec51 0b18 	vmov	r0, r1, d8
 8007440:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007444:	f7f9 f8d8 	bl	80005f8 <__aeabi_dmul>
 8007448:	ec41 0b18 	vmov	d8, r0, r1
 800744c:	3501      	adds	r5, #1
 800744e:	107f      	asrs	r7, r7, #1
 8007450:	3608      	adds	r6, #8
 8007452:	e7e5      	b.n	8007420 <_dtoa_r+0x370>
 8007454:	f000 80a6 	beq.w	80075a4 <_dtoa_r+0x4f4>
 8007458:	f1ca 0600 	rsb	r6, sl, #0
 800745c:	4ba5      	ldr	r3, [pc, #660]	; (80076f4 <_dtoa_r+0x644>)
 800745e:	4fa6      	ldr	r7, [pc, #664]	; (80076f8 <_dtoa_r+0x648>)
 8007460:	f006 020f 	and.w	r2, r6, #15
 8007464:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800746c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007470:	f7f9 f8c2 	bl	80005f8 <__aeabi_dmul>
 8007474:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007478:	1136      	asrs	r6, r6, #4
 800747a:	2300      	movs	r3, #0
 800747c:	2502      	movs	r5, #2
 800747e:	2e00      	cmp	r6, #0
 8007480:	f040 8085 	bne.w	800758e <_dtoa_r+0x4de>
 8007484:	2b00      	cmp	r3, #0
 8007486:	d1d2      	bne.n	800742e <_dtoa_r+0x37e>
 8007488:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800748a:	2b00      	cmp	r3, #0
 800748c:	f000 808c 	beq.w	80075a8 <_dtoa_r+0x4f8>
 8007490:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007494:	4b99      	ldr	r3, [pc, #612]	; (80076fc <_dtoa_r+0x64c>)
 8007496:	2200      	movs	r2, #0
 8007498:	4630      	mov	r0, r6
 800749a:	4639      	mov	r1, r7
 800749c:	f7f9 fb1e 	bl	8000adc <__aeabi_dcmplt>
 80074a0:	2800      	cmp	r0, #0
 80074a2:	f000 8081 	beq.w	80075a8 <_dtoa_r+0x4f8>
 80074a6:	9b01      	ldr	r3, [sp, #4]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d07d      	beq.n	80075a8 <_dtoa_r+0x4f8>
 80074ac:	f1b9 0f00 	cmp.w	r9, #0
 80074b0:	dd3c      	ble.n	800752c <_dtoa_r+0x47c>
 80074b2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80074b6:	9307      	str	r3, [sp, #28]
 80074b8:	2200      	movs	r2, #0
 80074ba:	4b91      	ldr	r3, [pc, #580]	; (8007700 <_dtoa_r+0x650>)
 80074bc:	4630      	mov	r0, r6
 80074be:	4639      	mov	r1, r7
 80074c0:	f7f9 f89a 	bl	80005f8 <__aeabi_dmul>
 80074c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074c8:	3501      	adds	r5, #1
 80074ca:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80074ce:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80074d2:	4628      	mov	r0, r5
 80074d4:	f7f9 f826 	bl	8000524 <__aeabi_i2d>
 80074d8:	4632      	mov	r2, r6
 80074da:	463b      	mov	r3, r7
 80074dc:	f7f9 f88c 	bl	80005f8 <__aeabi_dmul>
 80074e0:	4b88      	ldr	r3, [pc, #544]	; (8007704 <_dtoa_r+0x654>)
 80074e2:	2200      	movs	r2, #0
 80074e4:	f7f8 fed2 	bl	800028c <__adddf3>
 80074e8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80074ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074f0:	9303      	str	r3, [sp, #12]
 80074f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d15c      	bne.n	80075b2 <_dtoa_r+0x502>
 80074f8:	4b83      	ldr	r3, [pc, #524]	; (8007708 <_dtoa_r+0x658>)
 80074fa:	2200      	movs	r2, #0
 80074fc:	4630      	mov	r0, r6
 80074fe:	4639      	mov	r1, r7
 8007500:	f7f8 fec2 	bl	8000288 <__aeabi_dsub>
 8007504:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007508:	4606      	mov	r6, r0
 800750a:	460f      	mov	r7, r1
 800750c:	f7f9 fb04 	bl	8000b18 <__aeabi_dcmpgt>
 8007510:	2800      	cmp	r0, #0
 8007512:	f040 8296 	bne.w	8007a42 <_dtoa_r+0x992>
 8007516:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800751a:	4630      	mov	r0, r6
 800751c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007520:	4639      	mov	r1, r7
 8007522:	f7f9 fadb 	bl	8000adc <__aeabi_dcmplt>
 8007526:	2800      	cmp	r0, #0
 8007528:	f040 8288 	bne.w	8007a3c <_dtoa_r+0x98c>
 800752c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007530:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007534:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007536:	2b00      	cmp	r3, #0
 8007538:	f2c0 8158 	blt.w	80077ec <_dtoa_r+0x73c>
 800753c:	f1ba 0f0e 	cmp.w	sl, #14
 8007540:	f300 8154 	bgt.w	80077ec <_dtoa_r+0x73c>
 8007544:	4b6b      	ldr	r3, [pc, #428]	; (80076f4 <_dtoa_r+0x644>)
 8007546:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800754a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800754e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007550:	2b00      	cmp	r3, #0
 8007552:	f280 80e3 	bge.w	800771c <_dtoa_r+0x66c>
 8007556:	9b01      	ldr	r3, [sp, #4]
 8007558:	2b00      	cmp	r3, #0
 800755a:	f300 80df 	bgt.w	800771c <_dtoa_r+0x66c>
 800755e:	f040 826d 	bne.w	8007a3c <_dtoa_r+0x98c>
 8007562:	4b69      	ldr	r3, [pc, #420]	; (8007708 <_dtoa_r+0x658>)
 8007564:	2200      	movs	r2, #0
 8007566:	4640      	mov	r0, r8
 8007568:	4649      	mov	r1, r9
 800756a:	f7f9 f845 	bl	80005f8 <__aeabi_dmul>
 800756e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007572:	f7f9 fac7 	bl	8000b04 <__aeabi_dcmpge>
 8007576:	9e01      	ldr	r6, [sp, #4]
 8007578:	4637      	mov	r7, r6
 800757a:	2800      	cmp	r0, #0
 800757c:	f040 8243 	bne.w	8007a06 <_dtoa_r+0x956>
 8007580:	9d00      	ldr	r5, [sp, #0]
 8007582:	2331      	movs	r3, #49	; 0x31
 8007584:	f805 3b01 	strb.w	r3, [r5], #1
 8007588:	f10a 0a01 	add.w	sl, sl, #1
 800758c:	e23f      	b.n	8007a0e <_dtoa_r+0x95e>
 800758e:	07f2      	lsls	r2, r6, #31
 8007590:	d505      	bpl.n	800759e <_dtoa_r+0x4ee>
 8007592:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007596:	f7f9 f82f 	bl	80005f8 <__aeabi_dmul>
 800759a:	3501      	adds	r5, #1
 800759c:	2301      	movs	r3, #1
 800759e:	1076      	asrs	r6, r6, #1
 80075a0:	3708      	adds	r7, #8
 80075a2:	e76c      	b.n	800747e <_dtoa_r+0x3ce>
 80075a4:	2502      	movs	r5, #2
 80075a6:	e76f      	b.n	8007488 <_dtoa_r+0x3d8>
 80075a8:	9b01      	ldr	r3, [sp, #4]
 80075aa:	f8cd a01c 	str.w	sl, [sp, #28]
 80075ae:	930c      	str	r3, [sp, #48]	; 0x30
 80075b0:	e78d      	b.n	80074ce <_dtoa_r+0x41e>
 80075b2:	9900      	ldr	r1, [sp, #0]
 80075b4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80075b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80075b8:	4b4e      	ldr	r3, [pc, #312]	; (80076f4 <_dtoa_r+0x644>)
 80075ba:	ed9d 7b02 	vldr	d7, [sp, #8]
 80075be:	4401      	add	r1, r0
 80075c0:	9102      	str	r1, [sp, #8]
 80075c2:	9908      	ldr	r1, [sp, #32]
 80075c4:	eeb0 8a47 	vmov.f32	s16, s14
 80075c8:	eef0 8a67 	vmov.f32	s17, s15
 80075cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075d0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80075d4:	2900      	cmp	r1, #0
 80075d6:	d045      	beq.n	8007664 <_dtoa_r+0x5b4>
 80075d8:	494c      	ldr	r1, [pc, #304]	; (800770c <_dtoa_r+0x65c>)
 80075da:	2000      	movs	r0, #0
 80075dc:	f7f9 f936 	bl	800084c <__aeabi_ddiv>
 80075e0:	ec53 2b18 	vmov	r2, r3, d8
 80075e4:	f7f8 fe50 	bl	8000288 <__aeabi_dsub>
 80075e8:	9d00      	ldr	r5, [sp, #0]
 80075ea:	ec41 0b18 	vmov	d8, r0, r1
 80075ee:	4639      	mov	r1, r7
 80075f0:	4630      	mov	r0, r6
 80075f2:	f7f9 fab1 	bl	8000b58 <__aeabi_d2iz>
 80075f6:	900c      	str	r0, [sp, #48]	; 0x30
 80075f8:	f7f8 ff94 	bl	8000524 <__aeabi_i2d>
 80075fc:	4602      	mov	r2, r0
 80075fe:	460b      	mov	r3, r1
 8007600:	4630      	mov	r0, r6
 8007602:	4639      	mov	r1, r7
 8007604:	f7f8 fe40 	bl	8000288 <__aeabi_dsub>
 8007608:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800760a:	3330      	adds	r3, #48	; 0x30
 800760c:	f805 3b01 	strb.w	r3, [r5], #1
 8007610:	ec53 2b18 	vmov	r2, r3, d8
 8007614:	4606      	mov	r6, r0
 8007616:	460f      	mov	r7, r1
 8007618:	f7f9 fa60 	bl	8000adc <__aeabi_dcmplt>
 800761c:	2800      	cmp	r0, #0
 800761e:	d165      	bne.n	80076ec <_dtoa_r+0x63c>
 8007620:	4632      	mov	r2, r6
 8007622:	463b      	mov	r3, r7
 8007624:	4935      	ldr	r1, [pc, #212]	; (80076fc <_dtoa_r+0x64c>)
 8007626:	2000      	movs	r0, #0
 8007628:	f7f8 fe2e 	bl	8000288 <__aeabi_dsub>
 800762c:	ec53 2b18 	vmov	r2, r3, d8
 8007630:	f7f9 fa54 	bl	8000adc <__aeabi_dcmplt>
 8007634:	2800      	cmp	r0, #0
 8007636:	f040 80b9 	bne.w	80077ac <_dtoa_r+0x6fc>
 800763a:	9b02      	ldr	r3, [sp, #8]
 800763c:	429d      	cmp	r5, r3
 800763e:	f43f af75 	beq.w	800752c <_dtoa_r+0x47c>
 8007642:	4b2f      	ldr	r3, [pc, #188]	; (8007700 <_dtoa_r+0x650>)
 8007644:	ec51 0b18 	vmov	r0, r1, d8
 8007648:	2200      	movs	r2, #0
 800764a:	f7f8 ffd5 	bl	80005f8 <__aeabi_dmul>
 800764e:	4b2c      	ldr	r3, [pc, #176]	; (8007700 <_dtoa_r+0x650>)
 8007650:	ec41 0b18 	vmov	d8, r0, r1
 8007654:	2200      	movs	r2, #0
 8007656:	4630      	mov	r0, r6
 8007658:	4639      	mov	r1, r7
 800765a:	f7f8 ffcd 	bl	80005f8 <__aeabi_dmul>
 800765e:	4606      	mov	r6, r0
 8007660:	460f      	mov	r7, r1
 8007662:	e7c4      	b.n	80075ee <_dtoa_r+0x53e>
 8007664:	ec51 0b17 	vmov	r0, r1, d7
 8007668:	f7f8 ffc6 	bl	80005f8 <__aeabi_dmul>
 800766c:	9b02      	ldr	r3, [sp, #8]
 800766e:	9d00      	ldr	r5, [sp, #0]
 8007670:	930c      	str	r3, [sp, #48]	; 0x30
 8007672:	ec41 0b18 	vmov	d8, r0, r1
 8007676:	4639      	mov	r1, r7
 8007678:	4630      	mov	r0, r6
 800767a:	f7f9 fa6d 	bl	8000b58 <__aeabi_d2iz>
 800767e:	9011      	str	r0, [sp, #68]	; 0x44
 8007680:	f7f8 ff50 	bl	8000524 <__aeabi_i2d>
 8007684:	4602      	mov	r2, r0
 8007686:	460b      	mov	r3, r1
 8007688:	4630      	mov	r0, r6
 800768a:	4639      	mov	r1, r7
 800768c:	f7f8 fdfc 	bl	8000288 <__aeabi_dsub>
 8007690:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007692:	3330      	adds	r3, #48	; 0x30
 8007694:	f805 3b01 	strb.w	r3, [r5], #1
 8007698:	9b02      	ldr	r3, [sp, #8]
 800769a:	429d      	cmp	r5, r3
 800769c:	4606      	mov	r6, r0
 800769e:	460f      	mov	r7, r1
 80076a0:	f04f 0200 	mov.w	r2, #0
 80076a4:	d134      	bne.n	8007710 <_dtoa_r+0x660>
 80076a6:	4b19      	ldr	r3, [pc, #100]	; (800770c <_dtoa_r+0x65c>)
 80076a8:	ec51 0b18 	vmov	r0, r1, d8
 80076ac:	f7f8 fdee 	bl	800028c <__adddf3>
 80076b0:	4602      	mov	r2, r0
 80076b2:	460b      	mov	r3, r1
 80076b4:	4630      	mov	r0, r6
 80076b6:	4639      	mov	r1, r7
 80076b8:	f7f9 fa2e 	bl	8000b18 <__aeabi_dcmpgt>
 80076bc:	2800      	cmp	r0, #0
 80076be:	d175      	bne.n	80077ac <_dtoa_r+0x6fc>
 80076c0:	ec53 2b18 	vmov	r2, r3, d8
 80076c4:	4911      	ldr	r1, [pc, #68]	; (800770c <_dtoa_r+0x65c>)
 80076c6:	2000      	movs	r0, #0
 80076c8:	f7f8 fdde 	bl	8000288 <__aeabi_dsub>
 80076cc:	4602      	mov	r2, r0
 80076ce:	460b      	mov	r3, r1
 80076d0:	4630      	mov	r0, r6
 80076d2:	4639      	mov	r1, r7
 80076d4:	f7f9 fa02 	bl	8000adc <__aeabi_dcmplt>
 80076d8:	2800      	cmp	r0, #0
 80076da:	f43f af27 	beq.w	800752c <_dtoa_r+0x47c>
 80076de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80076e0:	1e6b      	subs	r3, r5, #1
 80076e2:	930c      	str	r3, [sp, #48]	; 0x30
 80076e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80076e8:	2b30      	cmp	r3, #48	; 0x30
 80076ea:	d0f8      	beq.n	80076de <_dtoa_r+0x62e>
 80076ec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80076f0:	e04a      	b.n	8007788 <_dtoa_r+0x6d8>
 80076f2:	bf00      	nop
 80076f4:	0801c920 	.word	0x0801c920
 80076f8:	0801c8f8 	.word	0x0801c8f8
 80076fc:	3ff00000 	.word	0x3ff00000
 8007700:	40240000 	.word	0x40240000
 8007704:	401c0000 	.word	0x401c0000
 8007708:	40140000 	.word	0x40140000
 800770c:	3fe00000 	.word	0x3fe00000
 8007710:	4baf      	ldr	r3, [pc, #700]	; (80079d0 <_dtoa_r+0x920>)
 8007712:	f7f8 ff71 	bl	80005f8 <__aeabi_dmul>
 8007716:	4606      	mov	r6, r0
 8007718:	460f      	mov	r7, r1
 800771a:	e7ac      	b.n	8007676 <_dtoa_r+0x5c6>
 800771c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007720:	9d00      	ldr	r5, [sp, #0]
 8007722:	4642      	mov	r2, r8
 8007724:	464b      	mov	r3, r9
 8007726:	4630      	mov	r0, r6
 8007728:	4639      	mov	r1, r7
 800772a:	f7f9 f88f 	bl	800084c <__aeabi_ddiv>
 800772e:	f7f9 fa13 	bl	8000b58 <__aeabi_d2iz>
 8007732:	9002      	str	r0, [sp, #8]
 8007734:	f7f8 fef6 	bl	8000524 <__aeabi_i2d>
 8007738:	4642      	mov	r2, r8
 800773a:	464b      	mov	r3, r9
 800773c:	f7f8 ff5c 	bl	80005f8 <__aeabi_dmul>
 8007740:	4602      	mov	r2, r0
 8007742:	460b      	mov	r3, r1
 8007744:	4630      	mov	r0, r6
 8007746:	4639      	mov	r1, r7
 8007748:	f7f8 fd9e 	bl	8000288 <__aeabi_dsub>
 800774c:	9e02      	ldr	r6, [sp, #8]
 800774e:	9f01      	ldr	r7, [sp, #4]
 8007750:	3630      	adds	r6, #48	; 0x30
 8007752:	f805 6b01 	strb.w	r6, [r5], #1
 8007756:	9e00      	ldr	r6, [sp, #0]
 8007758:	1bae      	subs	r6, r5, r6
 800775a:	42b7      	cmp	r7, r6
 800775c:	4602      	mov	r2, r0
 800775e:	460b      	mov	r3, r1
 8007760:	d137      	bne.n	80077d2 <_dtoa_r+0x722>
 8007762:	f7f8 fd93 	bl	800028c <__adddf3>
 8007766:	4642      	mov	r2, r8
 8007768:	464b      	mov	r3, r9
 800776a:	4606      	mov	r6, r0
 800776c:	460f      	mov	r7, r1
 800776e:	f7f9 f9d3 	bl	8000b18 <__aeabi_dcmpgt>
 8007772:	b9c8      	cbnz	r0, 80077a8 <_dtoa_r+0x6f8>
 8007774:	4642      	mov	r2, r8
 8007776:	464b      	mov	r3, r9
 8007778:	4630      	mov	r0, r6
 800777a:	4639      	mov	r1, r7
 800777c:	f7f9 f9a4 	bl	8000ac8 <__aeabi_dcmpeq>
 8007780:	b110      	cbz	r0, 8007788 <_dtoa_r+0x6d8>
 8007782:	9b02      	ldr	r3, [sp, #8]
 8007784:	07d9      	lsls	r1, r3, #31
 8007786:	d40f      	bmi.n	80077a8 <_dtoa_r+0x6f8>
 8007788:	4620      	mov	r0, r4
 800778a:	4659      	mov	r1, fp
 800778c:	f000 fcf6 	bl	800817c <_Bfree>
 8007790:	2300      	movs	r3, #0
 8007792:	702b      	strb	r3, [r5, #0]
 8007794:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007796:	f10a 0001 	add.w	r0, sl, #1
 800779a:	6018      	str	r0, [r3, #0]
 800779c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800779e:	2b00      	cmp	r3, #0
 80077a0:	f43f acd8 	beq.w	8007154 <_dtoa_r+0xa4>
 80077a4:	601d      	str	r5, [r3, #0]
 80077a6:	e4d5      	b.n	8007154 <_dtoa_r+0xa4>
 80077a8:	f8cd a01c 	str.w	sl, [sp, #28]
 80077ac:	462b      	mov	r3, r5
 80077ae:	461d      	mov	r5, r3
 80077b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80077b4:	2a39      	cmp	r2, #57	; 0x39
 80077b6:	d108      	bne.n	80077ca <_dtoa_r+0x71a>
 80077b8:	9a00      	ldr	r2, [sp, #0]
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d1f7      	bne.n	80077ae <_dtoa_r+0x6fe>
 80077be:	9a07      	ldr	r2, [sp, #28]
 80077c0:	9900      	ldr	r1, [sp, #0]
 80077c2:	3201      	adds	r2, #1
 80077c4:	9207      	str	r2, [sp, #28]
 80077c6:	2230      	movs	r2, #48	; 0x30
 80077c8:	700a      	strb	r2, [r1, #0]
 80077ca:	781a      	ldrb	r2, [r3, #0]
 80077cc:	3201      	adds	r2, #1
 80077ce:	701a      	strb	r2, [r3, #0]
 80077d0:	e78c      	b.n	80076ec <_dtoa_r+0x63c>
 80077d2:	4b7f      	ldr	r3, [pc, #508]	; (80079d0 <_dtoa_r+0x920>)
 80077d4:	2200      	movs	r2, #0
 80077d6:	f7f8 ff0f 	bl	80005f8 <__aeabi_dmul>
 80077da:	2200      	movs	r2, #0
 80077dc:	2300      	movs	r3, #0
 80077de:	4606      	mov	r6, r0
 80077e0:	460f      	mov	r7, r1
 80077e2:	f7f9 f971 	bl	8000ac8 <__aeabi_dcmpeq>
 80077e6:	2800      	cmp	r0, #0
 80077e8:	d09b      	beq.n	8007722 <_dtoa_r+0x672>
 80077ea:	e7cd      	b.n	8007788 <_dtoa_r+0x6d8>
 80077ec:	9a08      	ldr	r2, [sp, #32]
 80077ee:	2a00      	cmp	r2, #0
 80077f0:	f000 80c4 	beq.w	800797c <_dtoa_r+0x8cc>
 80077f4:	9a05      	ldr	r2, [sp, #20]
 80077f6:	2a01      	cmp	r2, #1
 80077f8:	f300 80a8 	bgt.w	800794c <_dtoa_r+0x89c>
 80077fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80077fe:	2a00      	cmp	r2, #0
 8007800:	f000 80a0 	beq.w	8007944 <_dtoa_r+0x894>
 8007804:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007808:	9e06      	ldr	r6, [sp, #24]
 800780a:	4645      	mov	r5, r8
 800780c:	9a04      	ldr	r2, [sp, #16]
 800780e:	2101      	movs	r1, #1
 8007810:	441a      	add	r2, r3
 8007812:	4620      	mov	r0, r4
 8007814:	4498      	add	r8, r3
 8007816:	9204      	str	r2, [sp, #16]
 8007818:	f000 fd6c 	bl	80082f4 <__i2b>
 800781c:	4607      	mov	r7, r0
 800781e:	2d00      	cmp	r5, #0
 8007820:	dd0b      	ble.n	800783a <_dtoa_r+0x78a>
 8007822:	9b04      	ldr	r3, [sp, #16]
 8007824:	2b00      	cmp	r3, #0
 8007826:	dd08      	ble.n	800783a <_dtoa_r+0x78a>
 8007828:	42ab      	cmp	r3, r5
 800782a:	9a04      	ldr	r2, [sp, #16]
 800782c:	bfa8      	it	ge
 800782e:	462b      	movge	r3, r5
 8007830:	eba8 0803 	sub.w	r8, r8, r3
 8007834:	1aed      	subs	r5, r5, r3
 8007836:	1ad3      	subs	r3, r2, r3
 8007838:	9304      	str	r3, [sp, #16]
 800783a:	9b06      	ldr	r3, [sp, #24]
 800783c:	b1fb      	cbz	r3, 800787e <_dtoa_r+0x7ce>
 800783e:	9b08      	ldr	r3, [sp, #32]
 8007840:	2b00      	cmp	r3, #0
 8007842:	f000 809f 	beq.w	8007984 <_dtoa_r+0x8d4>
 8007846:	2e00      	cmp	r6, #0
 8007848:	dd11      	ble.n	800786e <_dtoa_r+0x7be>
 800784a:	4639      	mov	r1, r7
 800784c:	4632      	mov	r2, r6
 800784e:	4620      	mov	r0, r4
 8007850:	f000 fe0c 	bl	800846c <__pow5mult>
 8007854:	465a      	mov	r2, fp
 8007856:	4601      	mov	r1, r0
 8007858:	4607      	mov	r7, r0
 800785a:	4620      	mov	r0, r4
 800785c:	f000 fd60 	bl	8008320 <__multiply>
 8007860:	4659      	mov	r1, fp
 8007862:	9007      	str	r0, [sp, #28]
 8007864:	4620      	mov	r0, r4
 8007866:	f000 fc89 	bl	800817c <_Bfree>
 800786a:	9b07      	ldr	r3, [sp, #28]
 800786c:	469b      	mov	fp, r3
 800786e:	9b06      	ldr	r3, [sp, #24]
 8007870:	1b9a      	subs	r2, r3, r6
 8007872:	d004      	beq.n	800787e <_dtoa_r+0x7ce>
 8007874:	4659      	mov	r1, fp
 8007876:	4620      	mov	r0, r4
 8007878:	f000 fdf8 	bl	800846c <__pow5mult>
 800787c:	4683      	mov	fp, r0
 800787e:	2101      	movs	r1, #1
 8007880:	4620      	mov	r0, r4
 8007882:	f000 fd37 	bl	80082f4 <__i2b>
 8007886:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007888:	2b00      	cmp	r3, #0
 800788a:	4606      	mov	r6, r0
 800788c:	dd7c      	ble.n	8007988 <_dtoa_r+0x8d8>
 800788e:	461a      	mov	r2, r3
 8007890:	4601      	mov	r1, r0
 8007892:	4620      	mov	r0, r4
 8007894:	f000 fdea 	bl	800846c <__pow5mult>
 8007898:	9b05      	ldr	r3, [sp, #20]
 800789a:	2b01      	cmp	r3, #1
 800789c:	4606      	mov	r6, r0
 800789e:	dd76      	ble.n	800798e <_dtoa_r+0x8de>
 80078a0:	2300      	movs	r3, #0
 80078a2:	9306      	str	r3, [sp, #24]
 80078a4:	6933      	ldr	r3, [r6, #16]
 80078a6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80078aa:	6918      	ldr	r0, [r3, #16]
 80078ac:	f000 fcd2 	bl	8008254 <__hi0bits>
 80078b0:	f1c0 0020 	rsb	r0, r0, #32
 80078b4:	9b04      	ldr	r3, [sp, #16]
 80078b6:	4418      	add	r0, r3
 80078b8:	f010 001f 	ands.w	r0, r0, #31
 80078bc:	f000 8086 	beq.w	80079cc <_dtoa_r+0x91c>
 80078c0:	f1c0 0320 	rsb	r3, r0, #32
 80078c4:	2b04      	cmp	r3, #4
 80078c6:	dd7f      	ble.n	80079c8 <_dtoa_r+0x918>
 80078c8:	f1c0 001c 	rsb	r0, r0, #28
 80078cc:	9b04      	ldr	r3, [sp, #16]
 80078ce:	4403      	add	r3, r0
 80078d0:	4480      	add	r8, r0
 80078d2:	4405      	add	r5, r0
 80078d4:	9304      	str	r3, [sp, #16]
 80078d6:	f1b8 0f00 	cmp.w	r8, #0
 80078da:	dd05      	ble.n	80078e8 <_dtoa_r+0x838>
 80078dc:	4659      	mov	r1, fp
 80078de:	4642      	mov	r2, r8
 80078e0:	4620      	mov	r0, r4
 80078e2:	f000 fe1d 	bl	8008520 <__lshift>
 80078e6:	4683      	mov	fp, r0
 80078e8:	9b04      	ldr	r3, [sp, #16]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	dd05      	ble.n	80078fa <_dtoa_r+0x84a>
 80078ee:	4631      	mov	r1, r6
 80078f0:	461a      	mov	r2, r3
 80078f2:	4620      	mov	r0, r4
 80078f4:	f000 fe14 	bl	8008520 <__lshift>
 80078f8:	4606      	mov	r6, r0
 80078fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d069      	beq.n	80079d4 <_dtoa_r+0x924>
 8007900:	4631      	mov	r1, r6
 8007902:	4658      	mov	r0, fp
 8007904:	f000 fe78 	bl	80085f8 <__mcmp>
 8007908:	2800      	cmp	r0, #0
 800790a:	da63      	bge.n	80079d4 <_dtoa_r+0x924>
 800790c:	2300      	movs	r3, #0
 800790e:	4659      	mov	r1, fp
 8007910:	220a      	movs	r2, #10
 8007912:	4620      	mov	r0, r4
 8007914:	f000 fc54 	bl	80081c0 <__multadd>
 8007918:	9b08      	ldr	r3, [sp, #32]
 800791a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800791e:	4683      	mov	fp, r0
 8007920:	2b00      	cmp	r3, #0
 8007922:	f000 818f 	beq.w	8007c44 <_dtoa_r+0xb94>
 8007926:	4639      	mov	r1, r7
 8007928:	2300      	movs	r3, #0
 800792a:	220a      	movs	r2, #10
 800792c:	4620      	mov	r0, r4
 800792e:	f000 fc47 	bl	80081c0 <__multadd>
 8007932:	f1b9 0f00 	cmp.w	r9, #0
 8007936:	4607      	mov	r7, r0
 8007938:	f300 808e 	bgt.w	8007a58 <_dtoa_r+0x9a8>
 800793c:	9b05      	ldr	r3, [sp, #20]
 800793e:	2b02      	cmp	r3, #2
 8007940:	dc50      	bgt.n	80079e4 <_dtoa_r+0x934>
 8007942:	e089      	b.n	8007a58 <_dtoa_r+0x9a8>
 8007944:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007946:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800794a:	e75d      	b.n	8007808 <_dtoa_r+0x758>
 800794c:	9b01      	ldr	r3, [sp, #4]
 800794e:	1e5e      	subs	r6, r3, #1
 8007950:	9b06      	ldr	r3, [sp, #24]
 8007952:	42b3      	cmp	r3, r6
 8007954:	bfbf      	itttt	lt
 8007956:	9b06      	ldrlt	r3, [sp, #24]
 8007958:	9606      	strlt	r6, [sp, #24]
 800795a:	1af2      	sublt	r2, r6, r3
 800795c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800795e:	bfb6      	itet	lt
 8007960:	189b      	addlt	r3, r3, r2
 8007962:	1b9e      	subge	r6, r3, r6
 8007964:	930d      	strlt	r3, [sp, #52]	; 0x34
 8007966:	9b01      	ldr	r3, [sp, #4]
 8007968:	bfb8      	it	lt
 800796a:	2600      	movlt	r6, #0
 800796c:	2b00      	cmp	r3, #0
 800796e:	bfb5      	itete	lt
 8007970:	eba8 0503 	sublt.w	r5, r8, r3
 8007974:	9b01      	ldrge	r3, [sp, #4]
 8007976:	2300      	movlt	r3, #0
 8007978:	4645      	movge	r5, r8
 800797a:	e747      	b.n	800780c <_dtoa_r+0x75c>
 800797c:	9e06      	ldr	r6, [sp, #24]
 800797e:	9f08      	ldr	r7, [sp, #32]
 8007980:	4645      	mov	r5, r8
 8007982:	e74c      	b.n	800781e <_dtoa_r+0x76e>
 8007984:	9a06      	ldr	r2, [sp, #24]
 8007986:	e775      	b.n	8007874 <_dtoa_r+0x7c4>
 8007988:	9b05      	ldr	r3, [sp, #20]
 800798a:	2b01      	cmp	r3, #1
 800798c:	dc18      	bgt.n	80079c0 <_dtoa_r+0x910>
 800798e:	9b02      	ldr	r3, [sp, #8]
 8007990:	b9b3      	cbnz	r3, 80079c0 <_dtoa_r+0x910>
 8007992:	9b03      	ldr	r3, [sp, #12]
 8007994:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007998:	b9a3      	cbnz	r3, 80079c4 <_dtoa_r+0x914>
 800799a:	9b03      	ldr	r3, [sp, #12]
 800799c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80079a0:	0d1b      	lsrs	r3, r3, #20
 80079a2:	051b      	lsls	r3, r3, #20
 80079a4:	b12b      	cbz	r3, 80079b2 <_dtoa_r+0x902>
 80079a6:	9b04      	ldr	r3, [sp, #16]
 80079a8:	3301      	adds	r3, #1
 80079aa:	9304      	str	r3, [sp, #16]
 80079ac:	f108 0801 	add.w	r8, r8, #1
 80079b0:	2301      	movs	r3, #1
 80079b2:	9306      	str	r3, [sp, #24]
 80079b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	f47f af74 	bne.w	80078a4 <_dtoa_r+0x7f4>
 80079bc:	2001      	movs	r0, #1
 80079be:	e779      	b.n	80078b4 <_dtoa_r+0x804>
 80079c0:	2300      	movs	r3, #0
 80079c2:	e7f6      	b.n	80079b2 <_dtoa_r+0x902>
 80079c4:	9b02      	ldr	r3, [sp, #8]
 80079c6:	e7f4      	b.n	80079b2 <_dtoa_r+0x902>
 80079c8:	d085      	beq.n	80078d6 <_dtoa_r+0x826>
 80079ca:	4618      	mov	r0, r3
 80079cc:	301c      	adds	r0, #28
 80079ce:	e77d      	b.n	80078cc <_dtoa_r+0x81c>
 80079d0:	40240000 	.word	0x40240000
 80079d4:	9b01      	ldr	r3, [sp, #4]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	dc38      	bgt.n	8007a4c <_dtoa_r+0x99c>
 80079da:	9b05      	ldr	r3, [sp, #20]
 80079dc:	2b02      	cmp	r3, #2
 80079de:	dd35      	ble.n	8007a4c <_dtoa_r+0x99c>
 80079e0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80079e4:	f1b9 0f00 	cmp.w	r9, #0
 80079e8:	d10d      	bne.n	8007a06 <_dtoa_r+0x956>
 80079ea:	4631      	mov	r1, r6
 80079ec:	464b      	mov	r3, r9
 80079ee:	2205      	movs	r2, #5
 80079f0:	4620      	mov	r0, r4
 80079f2:	f000 fbe5 	bl	80081c0 <__multadd>
 80079f6:	4601      	mov	r1, r0
 80079f8:	4606      	mov	r6, r0
 80079fa:	4658      	mov	r0, fp
 80079fc:	f000 fdfc 	bl	80085f8 <__mcmp>
 8007a00:	2800      	cmp	r0, #0
 8007a02:	f73f adbd 	bgt.w	8007580 <_dtoa_r+0x4d0>
 8007a06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a08:	9d00      	ldr	r5, [sp, #0]
 8007a0a:	ea6f 0a03 	mvn.w	sl, r3
 8007a0e:	f04f 0800 	mov.w	r8, #0
 8007a12:	4631      	mov	r1, r6
 8007a14:	4620      	mov	r0, r4
 8007a16:	f000 fbb1 	bl	800817c <_Bfree>
 8007a1a:	2f00      	cmp	r7, #0
 8007a1c:	f43f aeb4 	beq.w	8007788 <_dtoa_r+0x6d8>
 8007a20:	f1b8 0f00 	cmp.w	r8, #0
 8007a24:	d005      	beq.n	8007a32 <_dtoa_r+0x982>
 8007a26:	45b8      	cmp	r8, r7
 8007a28:	d003      	beq.n	8007a32 <_dtoa_r+0x982>
 8007a2a:	4641      	mov	r1, r8
 8007a2c:	4620      	mov	r0, r4
 8007a2e:	f000 fba5 	bl	800817c <_Bfree>
 8007a32:	4639      	mov	r1, r7
 8007a34:	4620      	mov	r0, r4
 8007a36:	f000 fba1 	bl	800817c <_Bfree>
 8007a3a:	e6a5      	b.n	8007788 <_dtoa_r+0x6d8>
 8007a3c:	2600      	movs	r6, #0
 8007a3e:	4637      	mov	r7, r6
 8007a40:	e7e1      	b.n	8007a06 <_dtoa_r+0x956>
 8007a42:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007a44:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007a48:	4637      	mov	r7, r6
 8007a4a:	e599      	b.n	8007580 <_dtoa_r+0x4d0>
 8007a4c:	9b08      	ldr	r3, [sp, #32]
 8007a4e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	f000 80fd 	beq.w	8007c52 <_dtoa_r+0xba2>
 8007a58:	2d00      	cmp	r5, #0
 8007a5a:	dd05      	ble.n	8007a68 <_dtoa_r+0x9b8>
 8007a5c:	4639      	mov	r1, r7
 8007a5e:	462a      	mov	r2, r5
 8007a60:	4620      	mov	r0, r4
 8007a62:	f000 fd5d 	bl	8008520 <__lshift>
 8007a66:	4607      	mov	r7, r0
 8007a68:	9b06      	ldr	r3, [sp, #24]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d05c      	beq.n	8007b28 <_dtoa_r+0xa78>
 8007a6e:	6879      	ldr	r1, [r7, #4]
 8007a70:	4620      	mov	r0, r4
 8007a72:	f000 fb43 	bl	80080fc <_Balloc>
 8007a76:	4605      	mov	r5, r0
 8007a78:	b928      	cbnz	r0, 8007a86 <_dtoa_r+0x9d6>
 8007a7a:	4b80      	ldr	r3, [pc, #512]	; (8007c7c <_dtoa_r+0xbcc>)
 8007a7c:	4602      	mov	r2, r0
 8007a7e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007a82:	f7ff bb2e 	b.w	80070e2 <_dtoa_r+0x32>
 8007a86:	693a      	ldr	r2, [r7, #16]
 8007a88:	3202      	adds	r2, #2
 8007a8a:	0092      	lsls	r2, r2, #2
 8007a8c:	f107 010c 	add.w	r1, r7, #12
 8007a90:	300c      	adds	r0, #12
 8007a92:	f000 fb25 	bl	80080e0 <memcpy>
 8007a96:	2201      	movs	r2, #1
 8007a98:	4629      	mov	r1, r5
 8007a9a:	4620      	mov	r0, r4
 8007a9c:	f000 fd40 	bl	8008520 <__lshift>
 8007aa0:	9b00      	ldr	r3, [sp, #0]
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	9301      	str	r3, [sp, #4]
 8007aa6:	9b00      	ldr	r3, [sp, #0]
 8007aa8:	444b      	add	r3, r9
 8007aaa:	9307      	str	r3, [sp, #28]
 8007aac:	9b02      	ldr	r3, [sp, #8]
 8007aae:	f003 0301 	and.w	r3, r3, #1
 8007ab2:	46b8      	mov	r8, r7
 8007ab4:	9306      	str	r3, [sp, #24]
 8007ab6:	4607      	mov	r7, r0
 8007ab8:	9b01      	ldr	r3, [sp, #4]
 8007aba:	4631      	mov	r1, r6
 8007abc:	3b01      	subs	r3, #1
 8007abe:	4658      	mov	r0, fp
 8007ac0:	9302      	str	r3, [sp, #8]
 8007ac2:	f7ff fa67 	bl	8006f94 <quorem>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	3330      	adds	r3, #48	; 0x30
 8007aca:	9004      	str	r0, [sp, #16]
 8007acc:	4641      	mov	r1, r8
 8007ace:	4658      	mov	r0, fp
 8007ad0:	9308      	str	r3, [sp, #32]
 8007ad2:	f000 fd91 	bl	80085f8 <__mcmp>
 8007ad6:	463a      	mov	r2, r7
 8007ad8:	4681      	mov	r9, r0
 8007ada:	4631      	mov	r1, r6
 8007adc:	4620      	mov	r0, r4
 8007ade:	f000 fda7 	bl	8008630 <__mdiff>
 8007ae2:	68c2      	ldr	r2, [r0, #12]
 8007ae4:	9b08      	ldr	r3, [sp, #32]
 8007ae6:	4605      	mov	r5, r0
 8007ae8:	bb02      	cbnz	r2, 8007b2c <_dtoa_r+0xa7c>
 8007aea:	4601      	mov	r1, r0
 8007aec:	4658      	mov	r0, fp
 8007aee:	f000 fd83 	bl	80085f8 <__mcmp>
 8007af2:	9b08      	ldr	r3, [sp, #32]
 8007af4:	4602      	mov	r2, r0
 8007af6:	4629      	mov	r1, r5
 8007af8:	4620      	mov	r0, r4
 8007afa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8007afe:	f000 fb3d 	bl	800817c <_Bfree>
 8007b02:	9b05      	ldr	r3, [sp, #20]
 8007b04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b06:	9d01      	ldr	r5, [sp, #4]
 8007b08:	ea43 0102 	orr.w	r1, r3, r2
 8007b0c:	9b06      	ldr	r3, [sp, #24]
 8007b0e:	430b      	orrs	r3, r1
 8007b10:	9b08      	ldr	r3, [sp, #32]
 8007b12:	d10d      	bne.n	8007b30 <_dtoa_r+0xa80>
 8007b14:	2b39      	cmp	r3, #57	; 0x39
 8007b16:	d029      	beq.n	8007b6c <_dtoa_r+0xabc>
 8007b18:	f1b9 0f00 	cmp.w	r9, #0
 8007b1c:	dd01      	ble.n	8007b22 <_dtoa_r+0xa72>
 8007b1e:	9b04      	ldr	r3, [sp, #16]
 8007b20:	3331      	adds	r3, #49	; 0x31
 8007b22:	9a02      	ldr	r2, [sp, #8]
 8007b24:	7013      	strb	r3, [r2, #0]
 8007b26:	e774      	b.n	8007a12 <_dtoa_r+0x962>
 8007b28:	4638      	mov	r0, r7
 8007b2a:	e7b9      	b.n	8007aa0 <_dtoa_r+0x9f0>
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	e7e2      	b.n	8007af6 <_dtoa_r+0xa46>
 8007b30:	f1b9 0f00 	cmp.w	r9, #0
 8007b34:	db06      	blt.n	8007b44 <_dtoa_r+0xa94>
 8007b36:	9905      	ldr	r1, [sp, #20]
 8007b38:	ea41 0909 	orr.w	r9, r1, r9
 8007b3c:	9906      	ldr	r1, [sp, #24]
 8007b3e:	ea59 0101 	orrs.w	r1, r9, r1
 8007b42:	d120      	bne.n	8007b86 <_dtoa_r+0xad6>
 8007b44:	2a00      	cmp	r2, #0
 8007b46:	ddec      	ble.n	8007b22 <_dtoa_r+0xa72>
 8007b48:	4659      	mov	r1, fp
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	4620      	mov	r0, r4
 8007b4e:	9301      	str	r3, [sp, #4]
 8007b50:	f000 fce6 	bl	8008520 <__lshift>
 8007b54:	4631      	mov	r1, r6
 8007b56:	4683      	mov	fp, r0
 8007b58:	f000 fd4e 	bl	80085f8 <__mcmp>
 8007b5c:	2800      	cmp	r0, #0
 8007b5e:	9b01      	ldr	r3, [sp, #4]
 8007b60:	dc02      	bgt.n	8007b68 <_dtoa_r+0xab8>
 8007b62:	d1de      	bne.n	8007b22 <_dtoa_r+0xa72>
 8007b64:	07da      	lsls	r2, r3, #31
 8007b66:	d5dc      	bpl.n	8007b22 <_dtoa_r+0xa72>
 8007b68:	2b39      	cmp	r3, #57	; 0x39
 8007b6a:	d1d8      	bne.n	8007b1e <_dtoa_r+0xa6e>
 8007b6c:	9a02      	ldr	r2, [sp, #8]
 8007b6e:	2339      	movs	r3, #57	; 0x39
 8007b70:	7013      	strb	r3, [r2, #0]
 8007b72:	462b      	mov	r3, r5
 8007b74:	461d      	mov	r5, r3
 8007b76:	3b01      	subs	r3, #1
 8007b78:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007b7c:	2a39      	cmp	r2, #57	; 0x39
 8007b7e:	d050      	beq.n	8007c22 <_dtoa_r+0xb72>
 8007b80:	3201      	adds	r2, #1
 8007b82:	701a      	strb	r2, [r3, #0]
 8007b84:	e745      	b.n	8007a12 <_dtoa_r+0x962>
 8007b86:	2a00      	cmp	r2, #0
 8007b88:	dd03      	ble.n	8007b92 <_dtoa_r+0xae2>
 8007b8a:	2b39      	cmp	r3, #57	; 0x39
 8007b8c:	d0ee      	beq.n	8007b6c <_dtoa_r+0xabc>
 8007b8e:	3301      	adds	r3, #1
 8007b90:	e7c7      	b.n	8007b22 <_dtoa_r+0xa72>
 8007b92:	9a01      	ldr	r2, [sp, #4]
 8007b94:	9907      	ldr	r1, [sp, #28]
 8007b96:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007b9a:	428a      	cmp	r2, r1
 8007b9c:	d02a      	beq.n	8007bf4 <_dtoa_r+0xb44>
 8007b9e:	4659      	mov	r1, fp
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	220a      	movs	r2, #10
 8007ba4:	4620      	mov	r0, r4
 8007ba6:	f000 fb0b 	bl	80081c0 <__multadd>
 8007baa:	45b8      	cmp	r8, r7
 8007bac:	4683      	mov	fp, r0
 8007bae:	f04f 0300 	mov.w	r3, #0
 8007bb2:	f04f 020a 	mov.w	r2, #10
 8007bb6:	4641      	mov	r1, r8
 8007bb8:	4620      	mov	r0, r4
 8007bba:	d107      	bne.n	8007bcc <_dtoa_r+0xb1c>
 8007bbc:	f000 fb00 	bl	80081c0 <__multadd>
 8007bc0:	4680      	mov	r8, r0
 8007bc2:	4607      	mov	r7, r0
 8007bc4:	9b01      	ldr	r3, [sp, #4]
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	9301      	str	r3, [sp, #4]
 8007bca:	e775      	b.n	8007ab8 <_dtoa_r+0xa08>
 8007bcc:	f000 faf8 	bl	80081c0 <__multadd>
 8007bd0:	4639      	mov	r1, r7
 8007bd2:	4680      	mov	r8, r0
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	220a      	movs	r2, #10
 8007bd8:	4620      	mov	r0, r4
 8007bda:	f000 faf1 	bl	80081c0 <__multadd>
 8007bde:	4607      	mov	r7, r0
 8007be0:	e7f0      	b.n	8007bc4 <_dtoa_r+0xb14>
 8007be2:	f1b9 0f00 	cmp.w	r9, #0
 8007be6:	9a00      	ldr	r2, [sp, #0]
 8007be8:	bfcc      	ite	gt
 8007bea:	464d      	movgt	r5, r9
 8007bec:	2501      	movle	r5, #1
 8007bee:	4415      	add	r5, r2
 8007bf0:	f04f 0800 	mov.w	r8, #0
 8007bf4:	4659      	mov	r1, fp
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	4620      	mov	r0, r4
 8007bfa:	9301      	str	r3, [sp, #4]
 8007bfc:	f000 fc90 	bl	8008520 <__lshift>
 8007c00:	4631      	mov	r1, r6
 8007c02:	4683      	mov	fp, r0
 8007c04:	f000 fcf8 	bl	80085f8 <__mcmp>
 8007c08:	2800      	cmp	r0, #0
 8007c0a:	dcb2      	bgt.n	8007b72 <_dtoa_r+0xac2>
 8007c0c:	d102      	bne.n	8007c14 <_dtoa_r+0xb64>
 8007c0e:	9b01      	ldr	r3, [sp, #4]
 8007c10:	07db      	lsls	r3, r3, #31
 8007c12:	d4ae      	bmi.n	8007b72 <_dtoa_r+0xac2>
 8007c14:	462b      	mov	r3, r5
 8007c16:	461d      	mov	r5, r3
 8007c18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c1c:	2a30      	cmp	r2, #48	; 0x30
 8007c1e:	d0fa      	beq.n	8007c16 <_dtoa_r+0xb66>
 8007c20:	e6f7      	b.n	8007a12 <_dtoa_r+0x962>
 8007c22:	9a00      	ldr	r2, [sp, #0]
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d1a5      	bne.n	8007b74 <_dtoa_r+0xac4>
 8007c28:	f10a 0a01 	add.w	sl, sl, #1
 8007c2c:	2331      	movs	r3, #49	; 0x31
 8007c2e:	e779      	b.n	8007b24 <_dtoa_r+0xa74>
 8007c30:	4b13      	ldr	r3, [pc, #76]	; (8007c80 <_dtoa_r+0xbd0>)
 8007c32:	f7ff baaf 	b.w	8007194 <_dtoa_r+0xe4>
 8007c36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	f47f aa86 	bne.w	800714a <_dtoa_r+0x9a>
 8007c3e:	4b11      	ldr	r3, [pc, #68]	; (8007c84 <_dtoa_r+0xbd4>)
 8007c40:	f7ff baa8 	b.w	8007194 <_dtoa_r+0xe4>
 8007c44:	f1b9 0f00 	cmp.w	r9, #0
 8007c48:	dc03      	bgt.n	8007c52 <_dtoa_r+0xba2>
 8007c4a:	9b05      	ldr	r3, [sp, #20]
 8007c4c:	2b02      	cmp	r3, #2
 8007c4e:	f73f aec9 	bgt.w	80079e4 <_dtoa_r+0x934>
 8007c52:	9d00      	ldr	r5, [sp, #0]
 8007c54:	4631      	mov	r1, r6
 8007c56:	4658      	mov	r0, fp
 8007c58:	f7ff f99c 	bl	8006f94 <quorem>
 8007c5c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007c60:	f805 3b01 	strb.w	r3, [r5], #1
 8007c64:	9a00      	ldr	r2, [sp, #0]
 8007c66:	1aaa      	subs	r2, r5, r2
 8007c68:	4591      	cmp	r9, r2
 8007c6a:	ddba      	ble.n	8007be2 <_dtoa_r+0xb32>
 8007c6c:	4659      	mov	r1, fp
 8007c6e:	2300      	movs	r3, #0
 8007c70:	220a      	movs	r2, #10
 8007c72:	4620      	mov	r0, r4
 8007c74:	f000 faa4 	bl	80081c0 <__multadd>
 8007c78:	4683      	mov	fp, r0
 8007c7a:	e7eb      	b.n	8007c54 <_dtoa_r+0xba4>
 8007c7c:	0801c827 	.word	0x0801c827
 8007c80:	0801c780 	.word	0x0801c780
 8007c84:	0801c7a4 	.word	0x0801c7a4

08007c88 <__sflush_r>:
 8007c88:	898a      	ldrh	r2, [r1, #12]
 8007c8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c8e:	4605      	mov	r5, r0
 8007c90:	0710      	lsls	r0, r2, #28
 8007c92:	460c      	mov	r4, r1
 8007c94:	d458      	bmi.n	8007d48 <__sflush_r+0xc0>
 8007c96:	684b      	ldr	r3, [r1, #4]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	dc05      	bgt.n	8007ca8 <__sflush_r+0x20>
 8007c9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	dc02      	bgt.n	8007ca8 <__sflush_r+0x20>
 8007ca2:	2000      	movs	r0, #0
 8007ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ca8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007caa:	2e00      	cmp	r6, #0
 8007cac:	d0f9      	beq.n	8007ca2 <__sflush_r+0x1a>
 8007cae:	2300      	movs	r3, #0
 8007cb0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007cb4:	682f      	ldr	r7, [r5, #0]
 8007cb6:	602b      	str	r3, [r5, #0]
 8007cb8:	d032      	beq.n	8007d20 <__sflush_r+0x98>
 8007cba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007cbc:	89a3      	ldrh	r3, [r4, #12]
 8007cbe:	075a      	lsls	r2, r3, #29
 8007cc0:	d505      	bpl.n	8007cce <__sflush_r+0x46>
 8007cc2:	6863      	ldr	r3, [r4, #4]
 8007cc4:	1ac0      	subs	r0, r0, r3
 8007cc6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007cc8:	b10b      	cbz	r3, 8007cce <__sflush_r+0x46>
 8007cca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ccc:	1ac0      	subs	r0, r0, r3
 8007cce:	2300      	movs	r3, #0
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007cd4:	6a21      	ldr	r1, [r4, #32]
 8007cd6:	4628      	mov	r0, r5
 8007cd8:	47b0      	blx	r6
 8007cda:	1c43      	adds	r3, r0, #1
 8007cdc:	89a3      	ldrh	r3, [r4, #12]
 8007cde:	d106      	bne.n	8007cee <__sflush_r+0x66>
 8007ce0:	6829      	ldr	r1, [r5, #0]
 8007ce2:	291d      	cmp	r1, #29
 8007ce4:	d82c      	bhi.n	8007d40 <__sflush_r+0xb8>
 8007ce6:	4a2a      	ldr	r2, [pc, #168]	; (8007d90 <__sflush_r+0x108>)
 8007ce8:	40ca      	lsrs	r2, r1
 8007cea:	07d6      	lsls	r6, r2, #31
 8007cec:	d528      	bpl.n	8007d40 <__sflush_r+0xb8>
 8007cee:	2200      	movs	r2, #0
 8007cf0:	6062      	str	r2, [r4, #4]
 8007cf2:	04d9      	lsls	r1, r3, #19
 8007cf4:	6922      	ldr	r2, [r4, #16]
 8007cf6:	6022      	str	r2, [r4, #0]
 8007cf8:	d504      	bpl.n	8007d04 <__sflush_r+0x7c>
 8007cfa:	1c42      	adds	r2, r0, #1
 8007cfc:	d101      	bne.n	8007d02 <__sflush_r+0x7a>
 8007cfe:	682b      	ldr	r3, [r5, #0]
 8007d00:	b903      	cbnz	r3, 8007d04 <__sflush_r+0x7c>
 8007d02:	6560      	str	r0, [r4, #84]	; 0x54
 8007d04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d06:	602f      	str	r7, [r5, #0]
 8007d08:	2900      	cmp	r1, #0
 8007d0a:	d0ca      	beq.n	8007ca2 <__sflush_r+0x1a>
 8007d0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d10:	4299      	cmp	r1, r3
 8007d12:	d002      	beq.n	8007d1a <__sflush_r+0x92>
 8007d14:	4628      	mov	r0, r5
 8007d16:	f000 fd7f 	bl	8008818 <_free_r>
 8007d1a:	2000      	movs	r0, #0
 8007d1c:	6360      	str	r0, [r4, #52]	; 0x34
 8007d1e:	e7c1      	b.n	8007ca4 <__sflush_r+0x1c>
 8007d20:	6a21      	ldr	r1, [r4, #32]
 8007d22:	2301      	movs	r3, #1
 8007d24:	4628      	mov	r0, r5
 8007d26:	47b0      	blx	r6
 8007d28:	1c41      	adds	r1, r0, #1
 8007d2a:	d1c7      	bne.n	8007cbc <__sflush_r+0x34>
 8007d2c:	682b      	ldr	r3, [r5, #0]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d0c4      	beq.n	8007cbc <__sflush_r+0x34>
 8007d32:	2b1d      	cmp	r3, #29
 8007d34:	d001      	beq.n	8007d3a <__sflush_r+0xb2>
 8007d36:	2b16      	cmp	r3, #22
 8007d38:	d101      	bne.n	8007d3e <__sflush_r+0xb6>
 8007d3a:	602f      	str	r7, [r5, #0]
 8007d3c:	e7b1      	b.n	8007ca2 <__sflush_r+0x1a>
 8007d3e:	89a3      	ldrh	r3, [r4, #12]
 8007d40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d44:	81a3      	strh	r3, [r4, #12]
 8007d46:	e7ad      	b.n	8007ca4 <__sflush_r+0x1c>
 8007d48:	690f      	ldr	r7, [r1, #16]
 8007d4a:	2f00      	cmp	r7, #0
 8007d4c:	d0a9      	beq.n	8007ca2 <__sflush_r+0x1a>
 8007d4e:	0793      	lsls	r3, r2, #30
 8007d50:	680e      	ldr	r6, [r1, #0]
 8007d52:	bf08      	it	eq
 8007d54:	694b      	ldreq	r3, [r1, #20]
 8007d56:	600f      	str	r7, [r1, #0]
 8007d58:	bf18      	it	ne
 8007d5a:	2300      	movne	r3, #0
 8007d5c:	eba6 0807 	sub.w	r8, r6, r7
 8007d60:	608b      	str	r3, [r1, #8]
 8007d62:	f1b8 0f00 	cmp.w	r8, #0
 8007d66:	dd9c      	ble.n	8007ca2 <__sflush_r+0x1a>
 8007d68:	6a21      	ldr	r1, [r4, #32]
 8007d6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007d6c:	4643      	mov	r3, r8
 8007d6e:	463a      	mov	r2, r7
 8007d70:	4628      	mov	r0, r5
 8007d72:	47b0      	blx	r6
 8007d74:	2800      	cmp	r0, #0
 8007d76:	dc06      	bgt.n	8007d86 <__sflush_r+0xfe>
 8007d78:	89a3      	ldrh	r3, [r4, #12]
 8007d7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d7e:	81a3      	strh	r3, [r4, #12]
 8007d80:	f04f 30ff 	mov.w	r0, #4294967295
 8007d84:	e78e      	b.n	8007ca4 <__sflush_r+0x1c>
 8007d86:	4407      	add	r7, r0
 8007d88:	eba8 0800 	sub.w	r8, r8, r0
 8007d8c:	e7e9      	b.n	8007d62 <__sflush_r+0xda>
 8007d8e:	bf00      	nop
 8007d90:	20400001 	.word	0x20400001

08007d94 <_fflush_r>:
 8007d94:	b538      	push	{r3, r4, r5, lr}
 8007d96:	690b      	ldr	r3, [r1, #16]
 8007d98:	4605      	mov	r5, r0
 8007d9a:	460c      	mov	r4, r1
 8007d9c:	b913      	cbnz	r3, 8007da4 <_fflush_r+0x10>
 8007d9e:	2500      	movs	r5, #0
 8007da0:	4628      	mov	r0, r5
 8007da2:	bd38      	pop	{r3, r4, r5, pc}
 8007da4:	b118      	cbz	r0, 8007dae <_fflush_r+0x1a>
 8007da6:	6983      	ldr	r3, [r0, #24]
 8007da8:	b90b      	cbnz	r3, 8007dae <_fflush_r+0x1a>
 8007daa:	f000 f887 	bl	8007ebc <__sinit>
 8007dae:	4b14      	ldr	r3, [pc, #80]	; (8007e00 <_fflush_r+0x6c>)
 8007db0:	429c      	cmp	r4, r3
 8007db2:	d11b      	bne.n	8007dec <_fflush_r+0x58>
 8007db4:	686c      	ldr	r4, [r5, #4]
 8007db6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d0ef      	beq.n	8007d9e <_fflush_r+0xa>
 8007dbe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007dc0:	07d0      	lsls	r0, r2, #31
 8007dc2:	d404      	bmi.n	8007dce <_fflush_r+0x3a>
 8007dc4:	0599      	lsls	r1, r3, #22
 8007dc6:	d402      	bmi.n	8007dce <_fflush_r+0x3a>
 8007dc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007dca:	f000 f91a 	bl	8008002 <__retarget_lock_acquire_recursive>
 8007dce:	4628      	mov	r0, r5
 8007dd0:	4621      	mov	r1, r4
 8007dd2:	f7ff ff59 	bl	8007c88 <__sflush_r>
 8007dd6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007dd8:	07da      	lsls	r2, r3, #31
 8007dda:	4605      	mov	r5, r0
 8007ddc:	d4e0      	bmi.n	8007da0 <_fflush_r+0xc>
 8007dde:	89a3      	ldrh	r3, [r4, #12]
 8007de0:	059b      	lsls	r3, r3, #22
 8007de2:	d4dd      	bmi.n	8007da0 <_fflush_r+0xc>
 8007de4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007de6:	f000 f90d 	bl	8008004 <__retarget_lock_release_recursive>
 8007dea:	e7d9      	b.n	8007da0 <_fflush_r+0xc>
 8007dec:	4b05      	ldr	r3, [pc, #20]	; (8007e04 <_fflush_r+0x70>)
 8007dee:	429c      	cmp	r4, r3
 8007df0:	d101      	bne.n	8007df6 <_fflush_r+0x62>
 8007df2:	68ac      	ldr	r4, [r5, #8]
 8007df4:	e7df      	b.n	8007db6 <_fflush_r+0x22>
 8007df6:	4b04      	ldr	r3, [pc, #16]	; (8007e08 <_fflush_r+0x74>)
 8007df8:	429c      	cmp	r4, r3
 8007dfa:	bf08      	it	eq
 8007dfc:	68ec      	ldreq	r4, [r5, #12]
 8007dfe:	e7da      	b.n	8007db6 <_fflush_r+0x22>
 8007e00:	0801c858 	.word	0x0801c858
 8007e04:	0801c878 	.word	0x0801c878
 8007e08:	0801c838 	.word	0x0801c838

08007e0c <std>:
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	b510      	push	{r4, lr}
 8007e10:	4604      	mov	r4, r0
 8007e12:	e9c0 3300 	strd	r3, r3, [r0]
 8007e16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e1a:	6083      	str	r3, [r0, #8]
 8007e1c:	8181      	strh	r1, [r0, #12]
 8007e1e:	6643      	str	r3, [r0, #100]	; 0x64
 8007e20:	81c2      	strh	r2, [r0, #14]
 8007e22:	6183      	str	r3, [r0, #24]
 8007e24:	4619      	mov	r1, r3
 8007e26:	2208      	movs	r2, #8
 8007e28:	305c      	adds	r0, #92	; 0x5c
 8007e2a:	f7fe faf3 	bl	8006414 <memset>
 8007e2e:	4b05      	ldr	r3, [pc, #20]	; (8007e44 <std+0x38>)
 8007e30:	6263      	str	r3, [r4, #36]	; 0x24
 8007e32:	4b05      	ldr	r3, [pc, #20]	; (8007e48 <std+0x3c>)
 8007e34:	62a3      	str	r3, [r4, #40]	; 0x28
 8007e36:	4b05      	ldr	r3, [pc, #20]	; (8007e4c <std+0x40>)
 8007e38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007e3a:	4b05      	ldr	r3, [pc, #20]	; (8007e50 <std+0x44>)
 8007e3c:	6224      	str	r4, [r4, #32]
 8007e3e:	6323      	str	r3, [r4, #48]	; 0x30
 8007e40:	bd10      	pop	{r4, pc}
 8007e42:	bf00      	nop
 8007e44:	08008c41 	.word	0x08008c41
 8007e48:	08008c63 	.word	0x08008c63
 8007e4c:	08008c9b 	.word	0x08008c9b
 8007e50:	08008cbf 	.word	0x08008cbf

08007e54 <_cleanup_r>:
 8007e54:	4901      	ldr	r1, [pc, #4]	; (8007e5c <_cleanup_r+0x8>)
 8007e56:	f000 b8af 	b.w	8007fb8 <_fwalk_reent>
 8007e5a:	bf00      	nop
 8007e5c:	08007d95 	.word	0x08007d95

08007e60 <__sfmoreglue>:
 8007e60:	b570      	push	{r4, r5, r6, lr}
 8007e62:	1e4a      	subs	r2, r1, #1
 8007e64:	2568      	movs	r5, #104	; 0x68
 8007e66:	4355      	muls	r5, r2
 8007e68:	460e      	mov	r6, r1
 8007e6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007e6e:	f000 fd23 	bl	80088b8 <_malloc_r>
 8007e72:	4604      	mov	r4, r0
 8007e74:	b140      	cbz	r0, 8007e88 <__sfmoreglue+0x28>
 8007e76:	2100      	movs	r1, #0
 8007e78:	e9c0 1600 	strd	r1, r6, [r0]
 8007e7c:	300c      	adds	r0, #12
 8007e7e:	60a0      	str	r0, [r4, #8]
 8007e80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007e84:	f7fe fac6 	bl	8006414 <memset>
 8007e88:	4620      	mov	r0, r4
 8007e8a:	bd70      	pop	{r4, r5, r6, pc}

08007e8c <__sfp_lock_acquire>:
 8007e8c:	4801      	ldr	r0, [pc, #4]	; (8007e94 <__sfp_lock_acquire+0x8>)
 8007e8e:	f000 b8b8 	b.w	8008002 <__retarget_lock_acquire_recursive>
 8007e92:	bf00      	nop
 8007e94:	2000f3b4 	.word	0x2000f3b4

08007e98 <__sfp_lock_release>:
 8007e98:	4801      	ldr	r0, [pc, #4]	; (8007ea0 <__sfp_lock_release+0x8>)
 8007e9a:	f000 b8b3 	b.w	8008004 <__retarget_lock_release_recursive>
 8007e9e:	bf00      	nop
 8007ea0:	2000f3b4 	.word	0x2000f3b4

08007ea4 <__sinit_lock_acquire>:
 8007ea4:	4801      	ldr	r0, [pc, #4]	; (8007eac <__sinit_lock_acquire+0x8>)
 8007ea6:	f000 b8ac 	b.w	8008002 <__retarget_lock_acquire_recursive>
 8007eaa:	bf00      	nop
 8007eac:	2000f3af 	.word	0x2000f3af

08007eb0 <__sinit_lock_release>:
 8007eb0:	4801      	ldr	r0, [pc, #4]	; (8007eb8 <__sinit_lock_release+0x8>)
 8007eb2:	f000 b8a7 	b.w	8008004 <__retarget_lock_release_recursive>
 8007eb6:	bf00      	nop
 8007eb8:	2000f3af 	.word	0x2000f3af

08007ebc <__sinit>:
 8007ebc:	b510      	push	{r4, lr}
 8007ebe:	4604      	mov	r4, r0
 8007ec0:	f7ff fff0 	bl	8007ea4 <__sinit_lock_acquire>
 8007ec4:	69a3      	ldr	r3, [r4, #24]
 8007ec6:	b11b      	cbz	r3, 8007ed0 <__sinit+0x14>
 8007ec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ecc:	f7ff bff0 	b.w	8007eb0 <__sinit_lock_release>
 8007ed0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007ed4:	6523      	str	r3, [r4, #80]	; 0x50
 8007ed6:	4b13      	ldr	r3, [pc, #76]	; (8007f24 <__sinit+0x68>)
 8007ed8:	4a13      	ldr	r2, [pc, #76]	; (8007f28 <__sinit+0x6c>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	62a2      	str	r2, [r4, #40]	; 0x28
 8007ede:	42a3      	cmp	r3, r4
 8007ee0:	bf04      	itt	eq
 8007ee2:	2301      	moveq	r3, #1
 8007ee4:	61a3      	streq	r3, [r4, #24]
 8007ee6:	4620      	mov	r0, r4
 8007ee8:	f000 f820 	bl	8007f2c <__sfp>
 8007eec:	6060      	str	r0, [r4, #4]
 8007eee:	4620      	mov	r0, r4
 8007ef0:	f000 f81c 	bl	8007f2c <__sfp>
 8007ef4:	60a0      	str	r0, [r4, #8]
 8007ef6:	4620      	mov	r0, r4
 8007ef8:	f000 f818 	bl	8007f2c <__sfp>
 8007efc:	2200      	movs	r2, #0
 8007efe:	60e0      	str	r0, [r4, #12]
 8007f00:	2104      	movs	r1, #4
 8007f02:	6860      	ldr	r0, [r4, #4]
 8007f04:	f7ff ff82 	bl	8007e0c <std>
 8007f08:	68a0      	ldr	r0, [r4, #8]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	2109      	movs	r1, #9
 8007f0e:	f7ff ff7d 	bl	8007e0c <std>
 8007f12:	68e0      	ldr	r0, [r4, #12]
 8007f14:	2202      	movs	r2, #2
 8007f16:	2112      	movs	r1, #18
 8007f18:	f7ff ff78 	bl	8007e0c <std>
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	61a3      	str	r3, [r4, #24]
 8007f20:	e7d2      	b.n	8007ec8 <__sinit+0xc>
 8007f22:	bf00      	nop
 8007f24:	0801c76c 	.word	0x0801c76c
 8007f28:	08007e55 	.word	0x08007e55

08007f2c <__sfp>:
 8007f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f2e:	4607      	mov	r7, r0
 8007f30:	f7ff ffac 	bl	8007e8c <__sfp_lock_acquire>
 8007f34:	4b1e      	ldr	r3, [pc, #120]	; (8007fb0 <__sfp+0x84>)
 8007f36:	681e      	ldr	r6, [r3, #0]
 8007f38:	69b3      	ldr	r3, [r6, #24]
 8007f3a:	b913      	cbnz	r3, 8007f42 <__sfp+0x16>
 8007f3c:	4630      	mov	r0, r6
 8007f3e:	f7ff ffbd 	bl	8007ebc <__sinit>
 8007f42:	3648      	adds	r6, #72	; 0x48
 8007f44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007f48:	3b01      	subs	r3, #1
 8007f4a:	d503      	bpl.n	8007f54 <__sfp+0x28>
 8007f4c:	6833      	ldr	r3, [r6, #0]
 8007f4e:	b30b      	cbz	r3, 8007f94 <__sfp+0x68>
 8007f50:	6836      	ldr	r6, [r6, #0]
 8007f52:	e7f7      	b.n	8007f44 <__sfp+0x18>
 8007f54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007f58:	b9d5      	cbnz	r5, 8007f90 <__sfp+0x64>
 8007f5a:	4b16      	ldr	r3, [pc, #88]	; (8007fb4 <__sfp+0x88>)
 8007f5c:	60e3      	str	r3, [r4, #12]
 8007f5e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007f62:	6665      	str	r5, [r4, #100]	; 0x64
 8007f64:	f000 f84c 	bl	8008000 <__retarget_lock_init_recursive>
 8007f68:	f7ff ff96 	bl	8007e98 <__sfp_lock_release>
 8007f6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007f70:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007f74:	6025      	str	r5, [r4, #0]
 8007f76:	61a5      	str	r5, [r4, #24]
 8007f78:	2208      	movs	r2, #8
 8007f7a:	4629      	mov	r1, r5
 8007f7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007f80:	f7fe fa48 	bl	8006414 <memset>
 8007f84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007f88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007f8c:	4620      	mov	r0, r4
 8007f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f90:	3468      	adds	r4, #104	; 0x68
 8007f92:	e7d9      	b.n	8007f48 <__sfp+0x1c>
 8007f94:	2104      	movs	r1, #4
 8007f96:	4638      	mov	r0, r7
 8007f98:	f7ff ff62 	bl	8007e60 <__sfmoreglue>
 8007f9c:	4604      	mov	r4, r0
 8007f9e:	6030      	str	r0, [r6, #0]
 8007fa0:	2800      	cmp	r0, #0
 8007fa2:	d1d5      	bne.n	8007f50 <__sfp+0x24>
 8007fa4:	f7ff ff78 	bl	8007e98 <__sfp_lock_release>
 8007fa8:	230c      	movs	r3, #12
 8007faa:	603b      	str	r3, [r7, #0]
 8007fac:	e7ee      	b.n	8007f8c <__sfp+0x60>
 8007fae:	bf00      	nop
 8007fb0:	0801c76c 	.word	0x0801c76c
 8007fb4:	ffff0001 	.word	0xffff0001

08007fb8 <_fwalk_reent>:
 8007fb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fbc:	4606      	mov	r6, r0
 8007fbe:	4688      	mov	r8, r1
 8007fc0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007fc4:	2700      	movs	r7, #0
 8007fc6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007fca:	f1b9 0901 	subs.w	r9, r9, #1
 8007fce:	d505      	bpl.n	8007fdc <_fwalk_reent+0x24>
 8007fd0:	6824      	ldr	r4, [r4, #0]
 8007fd2:	2c00      	cmp	r4, #0
 8007fd4:	d1f7      	bne.n	8007fc6 <_fwalk_reent+0xe>
 8007fd6:	4638      	mov	r0, r7
 8007fd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fdc:	89ab      	ldrh	r3, [r5, #12]
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d907      	bls.n	8007ff2 <_fwalk_reent+0x3a>
 8007fe2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	d003      	beq.n	8007ff2 <_fwalk_reent+0x3a>
 8007fea:	4629      	mov	r1, r5
 8007fec:	4630      	mov	r0, r6
 8007fee:	47c0      	blx	r8
 8007ff0:	4307      	orrs	r7, r0
 8007ff2:	3568      	adds	r5, #104	; 0x68
 8007ff4:	e7e9      	b.n	8007fca <_fwalk_reent+0x12>
	...

08007ff8 <_localeconv_r>:
 8007ff8:	4800      	ldr	r0, [pc, #0]	; (8007ffc <_localeconv_r+0x4>)
 8007ffa:	4770      	bx	lr
 8007ffc:	20000164 	.word	0x20000164

08008000 <__retarget_lock_init_recursive>:
 8008000:	4770      	bx	lr

08008002 <__retarget_lock_acquire_recursive>:
 8008002:	4770      	bx	lr

08008004 <__retarget_lock_release_recursive>:
 8008004:	4770      	bx	lr

08008006 <__swhatbuf_r>:
 8008006:	b570      	push	{r4, r5, r6, lr}
 8008008:	460e      	mov	r6, r1
 800800a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800800e:	2900      	cmp	r1, #0
 8008010:	b096      	sub	sp, #88	; 0x58
 8008012:	4614      	mov	r4, r2
 8008014:	461d      	mov	r5, r3
 8008016:	da07      	bge.n	8008028 <__swhatbuf_r+0x22>
 8008018:	2300      	movs	r3, #0
 800801a:	602b      	str	r3, [r5, #0]
 800801c:	89b3      	ldrh	r3, [r6, #12]
 800801e:	061a      	lsls	r2, r3, #24
 8008020:	d410      	bmi.n	8008044 <__swhatbuf_r+0x3e>
 8008022:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008026:	e00e      	b.n	8008046 <__swhatbuf_r+0x40>
 8008028:	466a      	mov	r2, sp
 800802a:	f000 fe9f 	bl	8008d6c <_fstat_r>
 800802e:	2800      	cmp	r0, #0
 8008030:	dbf2      	blt.n	8008018 <__swhatbuf_r+0x12>
 8008032:	9a01      	ldr	r2, [sp, #4]
 8008034:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008038:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800803c:	425a      	negs	r2, r3
 800803e:	415a      	adcs	r2, r3
 8008040:	602a      	str	r2, [r5, #0]
 8008042:	e7ee      	b.n	8008022 <__swhatbuf_r+0x1c>
 8008044:	2340      	movs	r3, #64	; 0x40
 8008046:	2000      	movs	r0, #0
 8008048:	6023      	str	r3, [r4, #0]
 800804a:	b016      	add	sp, #88	; 0x58
 800804c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008050 <__smakebuf_r>:
 8008050:	898b      	ldrh	r3, [r1, #12]
 8008052:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008054:	079d      	lsls	r5, r3, #30
 8008056:	4606      	mov	r6, r0
 8008058:	460c      	mov	r4, r1
 800805a:	d507      	bpl.n	800806c <__smakebuf_r+0x1c>
 800805c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008060:	6023      	str	r3, [r4, #0]
 8008062:	6123      	str	r3, [r4, #16]
 8008064:	2301      	movs	r3, #1
 8008066:	6163      	str	r3, [r4, #20]
 8008068:	b002      	add	sp, #8
 800806a:	bd70      	pop	{r4, r5, r6, pc}
 800806c:	ab01      	add	r3, sp, #4
 800806e:	466a      	mov	r2, sp
 8008070:	f7ff ffc9 	bl	8008006 <__swhatbuf_r>
 8008074:	9900      	ldr	r1, [sp, #0]
 8008076:	4605      	mov	r5, r0
 8008078:	4630      	mov	r0, r6
 800807a:	f000 fc1d 	bl	80088b8 <_malloc_r>
 800807e:	b948      	cbnz	r0, 8008094 <__smakebuf_r+0x44>
 8008080:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008084:	059a      	lsls	r2, r3, #22
 8008086:	d4ef      	bmi.n	8008068 <__smakebuf_r+0x18>
 8008088:	f023 0303 	bic.w	r3, r3, #3
 800808c:	f043 0302 	orr.w	r3, r3, #2
 8008090:	81a3      	strh	r3, [r4, #12]
 8008092:	e7e3      	b.n	800805c <__smakebuf_r+0xc>
 8008094:	4b0d      	ldr	r3, [pc, #52]	; (80080cc <__smakebuf_r+0x7c>)
 8008096:	62b3      	str	r3, [r6, #40]	; 0x28
 8008098:	89a3      	ldrh	r3, [r4, #12]
 800809a:	6020      	str	r0, [r4, #0]
 800809c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080a0:	81a3      	strh	r3, [r4, #12]
 80080a2:	9b00      	ldr	r3, [sp, #0]
 80080a4:	6163      	str	r3, [r4, #20]
 80080a6:	9b01      	ldr	r3, [sp, #4]
 80080a8:	6120      	str	r0, [r4, #16]
 80080aa:	b15b      	cbz	r3, 80080c4 <__smakebuf_r+0x74>
 80080ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080b0:	4630      	mov	r0, r6
 80080b2:	f000 fe6d 	bl	8008d90 <_isatty_r>
 80080b6:	b128      	cbz	r0, 80080c4 <__smakebuf_r+0x74>
 80080b8:	89a3      	ldrh	r3, [r4, #12]
 80080ba:	f023 0303 	bic.w	r3, r3, #3
 80080be:	f043 0301 	orr.w	r3, r3, #1
 80080c2:	81a3      	strh	r3, [r4, #12]
 80080c4:	89a0      	ldrh	r0, [r4, #12]
 80080c6:	4305      	orrs	r5, r0
 80080c8:	81a5      	strh	r5, [r4, #12]
 80080ca:	e7cd      	b.n	8008068 <__smakebuf_r+0x18>
 80080cc:	08007e55 	.word	0x08007e55

080080d0 <malloc>:
 80080d0:	4b02      	ldr	r3, [pc, #8]	; (80080dc <malloc+0xc>)
 80080d2:	4601      	mov	r1, r0
 80080d4:	6818      	ldr	r0, [r3, #0]
 80080d6:	f000 bbef 	b.w	80088b8 <_malloc_r>
 80080da:	bf00      	nop
 80080dc:	20000010 	.word	0x20000010

080080e0 <memcpy>:
 80080e0:	440a      	add	r2, r1
 80080e2:	4291      	cmp	r1, r2
 80080e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80080e8:	d100      	bne.n	80080ec <memcpy+0xc>
 80080ea:	4770      	bx	lr
 80080ec:	b510      	push	{r4, lr}
 80080ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080f6:	4291      	cmp	r1, r2
 80080f8:	d1f9      	bne.n	80080ee <memcpy+0xe>
 80080fa:	bd10      	pop	{r4, pc}

080080fc <_Balloc>:
 80080fc:	b570      	push	{r4, r5, r6, lr}
 80080fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008100:	4604      	mov	r4, r0
 8008102:	460d      	mov	r5, r1
 8008104:	b976      	cbnz	r6, 8008124 <_Balloc+0x28>
 8008106:	2010      	movs	r0, #16
 8008108:	f7ff ffe2 	bl	80080d0 <malloc>
 800810c:	4602      	mov	r2, r0
 800810e:	6260      	str	r0, [r4, #36]	; 0x24
 8008110:	b920      	cbnz	r0, 800811c <_Balloc+0x20>
 8008112:	4b18      	ldr	r3, [pc, #96]	; (8008174 <_Balloc+0x78>)
 8008114:	4818      	ldr	r0, [pc, #96]	; (8008178 <_Balloc+0x7c>)
 8008116:	2166      	movs	r1, #102	; 0x66
 8008118:	f000 fde8 	bl	8008cec <__assert_func>
 800811c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008120:	6006      	str	r6, [r0, #0]
 8008122:	60c6      	str	r6, [r0, #12]
 8008124:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008126:	68f3      	ldr	r3, [r6, #12]
 8008128:	b183      	cbz	r3, 800814c <_Balloc+0x50>
 800812a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800812c:	68db      	ldr	r3, [r3, #12]
 800812e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008132:	b9b8      	cbnz	r0, 8008164 <_Balloc+0x68>
 8008134:	2101      	movs	r1, #1
 8008136:	fa01 f605 	lsl.w	r6, r1, r5
 800813a:	1d72      	adds	r2, r6, #5
 800813c:	0092      	lsls	r2, r2, #2
 800813e:	4620      	mov	r0, r4
 8008140:	f000 fb5a 	bl	80087f8 <_calloc_r>
 8008144:	b160      	cbz	r0, 8008160 <_Balloc+0x64>
 8008146:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800814a:	e00e      	b.n	800816a <_Balloc+0x6e>
 800814c:	2221      	movs	r2, #33	; 0x21
 800814e:	2104      	movs	r1, #4
 8008150:	4620      	mov	r0, r4
 8008152:	f000 fb51 	bl	80087f8 <_calloc_r>
 8008156:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008158:	60f0      	str	r0, [r6, #12]
 800815a:	68db      	ldr	r3, [r3, #12]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d1e4      	bne.n	800812a <_Balloc+0x2e>
 8008160:	2000      	movs	r0, #0
 8008162:	bd70      	pop	{r4, r5, r6, pc}
 8008164:	6802      	ldr	r2, [r0, #0]
 8008166:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800816a:	2300      	movs	r3, #0
 800816c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008170:	e7f7      	b.n	8008162 <_Balloc+0x66>
 8008172:	bf00      	nop
 8008174:	0801c7b1 	.word	0x0801c7b1
 8008178:	0801c898 	.word	0x0801c898

0800817c <_Bfree>:
 800817c:	b570      	push	{r4, r5, r6, lr}
 800817e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008180:	4605      	mov	r5, r0
 8008182:	460c      	mov	r4, r1
 8008184:	b976      	cbnz	r6, 80081a4 <_Bfree+0x28>
 8008186:	2010      	movs	r0, #16
 8008188:	f7ff ffa2 	bl	80080d0 <malloc>
 800818c:	4602      	mov	r2, r0
 800818e:	6268      	str	r0, [r5, #36]	; 0x24
 8008190:	b920      	cbnz	r0, 800819c <_Bfree+0x20>
 8008192:	4b09      	ldr	r3, [pc, #36]	; (80081b8 <_Bfree+0x3c>)
 8008194:	4809      	ldr	r0, [pc, #36]	; (80081bc <_Bfree+0x40>)
 8008196:	218a      	movs	r1, #138	; 0x8a
 8008198:	f000 fda8 	bl	8008cec <__assert_func>
 800819c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80081a0:	6006      	str	r6, [r0, #0]
 80081a2:	60c6      	str	r6, [r0, #12]
 80081a4:	b13c      	cbz	r4, 80081b6 <_Bfree+0x3a>
 80081a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80081a8:	6862      	ldr	r2, [r4, #4]
 80081aa:	68db      	ldr	r3, [r3, #12]
 80081ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80081b0:	6021      	str	r1, [r4, #0]
 80081b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80081b6:	bd70      	pop	{r4, r5, r6, pc}
 80081b8:	0801c7b1 	.word	0x0801c7b1
 80081bc:	0801c898 	.word	0x0801c898

080081c0 <__multadd>:
 80081c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081c4:	690e      	ldr	r6, [r1, #16]
 80081c6:	4607      	mov	r7, r0
 80081c8:	4698      	mov	r8, r3
 80081ca:	460c      	mov	r4, r1
 80081cc:	f101 0014 	add.w	r0, r1, #20
 80081d0:	2300      	movs	r3, #0
 80081d2:	6805      	ldr	r5, [r0, #0]
 80081d4:	b2a9      	uxth	r1, r5
 80081d6:	fb02 8101 	mla	r1, r2, r1, r8
 80081da:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80081de:	0c2d      	lsrs	r5, r5, #16
 80081e0:	fb02 c505 	mla	r5, r2, r5, ip
 80081e4:	b289      	uxth	r1, r1
 80081e6:	3301      	adds	r3, #1
 80081e8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80081ec:	429e      	cmp	r6, r3
 80081ee:	f840 1b04 	str.w	r1, [r0], #4
 80081f2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80081f6:	dcec      	bgt.n	80081d2 <__multadd+0x12>
 80081f8:	f1b8 0f00 	cmp.w	r8, #0
 80081fc:	d022      	beq.n	8008244 <__multadd+0x84>
 80081fe:	68a3      	ldr	r3, [r4, #8]
 8008200:	42b3      	cmp	r3, r6
 8008202:	dc19      	bgt.n	8008238 <__multadd+0x78>
 8008204:	6861      	ldr	r1, [r4, #4]
 8008206:	4638      	mov	r0, r7
 8008208:	3101      	adds	r1, #1
 800820a:	f7ff ff77 	bl	80080fc <_Balloc>
 800820e:	4605      	mov	r5, r0
 8008210:	b928      	cbnz	r0, 800821e <__multadd+0x5e>
 8008212:	4602      	mov	r2, r0
 8008214:	4b0d      	ldr	r3, [pc, #52]	; (800824c <__multadd+0x8c>)
 8008216:	480e      	ldr	r0, [pc, #56]	; (8008250 <__multadd+0x90>)
 8008218:	21b5      	movs	r1, #181	; 0xb5
 800821a:	f000 fd67 	bl	8008cec <__assert_func>
 800821e:	6922      	ldr	r2, [r4, #16]
 8008220:	3202      	adds	r2, #2
 8008222:	f104 010c 	add.w	r1, r4, #12
 8008226:	0092      	lsls	r2, r2, #2
 8008228:	300c      	adds	r0, #12
 800822a:	f7ff ff59 	bl	80080e0 <memcpy>
 800822e:	4621      	mov	r1, r4
 8008230:	4638      	mov	r0, r7
 8008232:	f7ff ffa3 	bl	800817c <_Bfree>
 8008236:	462c      	mov	r4, r5
 8008238:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800823c:	3601      	adds	r6, #1
 800823e:	f8c3 8014 	str.w	r8, [r3, #20]
 8008242:	6126      	str	r6, [r4, #16]
 8008244:	4620      	mov	r0, r4
 8008246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800824a:	bf00      	nop
 800824c:	0801c827 	.word	0x0801c827
 8008250:	0801c898 	.word	0x0801c898

08008254 <__hi0bits>:
 8008254:	0c03      	lsrs	r3, r0, #16
 8008256:	041b      	lsls	r3, r3, #16
 8008258:	b9d3      	cbnz	r3, 8008290 <__hi0bits+0x3c>
 800825a:	0400      	lsls	r0, r0, #16
 800825c:	2310      	movs	r3, #16
 800825e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008262:	bf04      	itt	eq
 8008264:	0200      	lsleq	r0, r0, #8
 8008266:	3308      	addeq	r3, #8
 8008268:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800826c:	bf04      	itt	eq
 800826e:	0100      	lsleq	r0, r0, #4
 8008270:	3304      	addeq	r3, #4
 8008272:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008276:	bf04      	itt	eq
 8008278:	0080      	lsleq	r0, r0, #2
 800827a:	3302      	addeq	r3, #2
 800827c:	2800      	cmp	r0, #0
 800827e:	db05      	blt.n	800828c <__hi0bits+0x38>
 8008280:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008284:	f103 0301 	add.w	r3, r3, #1
 8008288:	bf08      	it	eq
 800828a:	2320      	moveq	r3, #32
 800828c:	4618      	mov	r0, r3
 800828e:	4770      	bx	lr
 8008290:	2300      	movs	r3, #0
 8008292:	e7e4      	b.n	800825e <__hi0bits+0xa>

08008294 <__lo0bits>:
 8008294:	6803      	ldr	r3, [r0, #0]
 8008296:	f013 0207 	ands.w	r2, r3, #7
 800829a:	4601      	mov	r1, r0
 800829c:	d00b      	beq.n	80082b6 <__lo0bits+0x22>
 800829e:	07da      	lsls	r2, r3, #31
 80082a0:	d424      	bmi.n	80082ec <__lo0bits+0x58>
 80082a2:	0798      	lsls	r0, r3, #30
 80082a4:	bf49      	itett	mi
 80082a6:	085b      	lsrmi	r3, r3, #1
 80082a8:	089b      	lsrpl	r3, r3, #2
 80082aa:	2001      	movmi	r0, #1
 80082ac:	600b      	strmi	r3, [r1, #0]
 80082ae:	bf5c      	itt	pl
 80082b0:	600b      	strpl	r3, [r1, #0]
 80082b2:	2002      	movpl	r0, #2
 80082b4:	4770      	bx	lr
 80082b6:	b298      	uxth	r0, r3
 80082b8:	b9b0      	cbnz	r0, 80082e8 <__lo0bits+0x54>
 80082ba:	0c1b      	lsrs	r3, r3, #16
 80082bc:	2010      	movs	r0, #16
 80082be:	f013 0fff 	tst.w	r3, #255	; 0xff
 80082c2:	bf04      	itt	eq
 80082c4:	0a1b      	lsreq	r3, r3, #8
 80082c6:	3008      	addeq	r0, #8
 80082c8:	071a      	lsls	r2, r3, #28
 80082ca:	bf04      	itt	eq
 80082cc:	091b      	lsreq	r3, r3, #4
 80082ce:	3004      	addeq	r0, #4
 80082d0:	079a      	lsls	r2, r3, #30
 80082d2:	bf04      	itt	eq
 80082d4:	089b      	lsreq	r3, r3, #2
 80082d6:	3002      	addeq	r0, #2
 80082d8:	07da      	lsls	r2, r3, #31
 80082da:	d403      	bmi.n	80082e4 <__lo0bits+0x50>
 80082dc:	085b      	lsrs	r3, r3, #1
 80082de:	f100 0001 	add.w	r0, r0, #1
 80082e2:	d005      	beq.n	80082f0 <__lo0bits+0x5c>
 80082e4:	600b      	str	r3, [r1, #0]
 80082e6:	4770      	bx	lr
 80082e8:	4610      	mov	r0, r2
 80082ea:	e7e8      	b.n	80082be <__lo0bits+0x2a>
 80082ec:	2000      	movs	r0, #0
 80082ee:	4770      	bx	lr
 80082f0:	2020      	movs	r0, #32
 80082f2:	4770      	bx	lr

080082f4 <__i2b>:
 80082f4:	b510      	push	{r4, lr}
 80082f6:	460c      	mov	r4, r1
 80082f8:	2101      	movs	r1, #1
 80082fa:	f7ff feff 	bl	80080fc <_Balloc>
 80082fe:	4602      	mov	r2, r0
 8008300:	b928      	cbnz	r0, 800830e <__i2b+0x1a>
 8008302:	4b05      	ldr	r3, [pc, #20]	; (8008318 <__i2b+0x24>)
 8008304:	4805      	ldr	r0, [pc, #20]	; (800831c <__i2b+0x28>)
 8008306:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800830a:	f000 fcef 	bl	8008cec <__assert_func>
 800830e:	2301      	movs	r3, #1
 8008310:	6144      	str	r4, [r0, #20]
 8008312:	6103      	str	r3, [r0, #16]
 8008314:	bd10      	pop	{r4, pc}
 8008316:	bf00      	nop
 8008318:	0801c827 	.word	0x0801c827
 800831c:	0801c898 	.word	0x0801c898

08008320 <__multiply>:
 8008320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008324:	4614      	mov	r4, r2
 8008326:	690a      	ldr	r2, [r1, #16]
 8008328:	6923      	ldr	r3, [r4, #16]
 800832a:	429a      	cmp	r2, r3
 800832c:	bfb8      	it	lt
 800832e:	460b      	movlt	r3, r1
 8008330:	460d      	mov	r5, r1
 8008332:	bfbc      	itt	lt
 8008334:	4625      	movlt	r5, r4
 8008336:	461c      	movlt	r4, r3
 8008338:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800833c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008340:	68ab      	ldr	r3, [r5, #8]
 8008342:	6869      	ldr	r1, [r5, #4]
 8008344:	eb0a 0709 	add.w	r7, sl, r9
 8008348:	42bb      	cmp	r3, r7
 800834a:	b085      	sub	sp, #20
 800834c:	bfb8      	it	lt
 800834e:	3101      	addlt	r1, #1
 8008350:	f7ff fed4 	bl	80080fc <_Balloc>
 8008354:	b930      	cbnz	r0, 8008364 <__multiply+0x44>
 8008356:	4602      	mov	r2, r0
 8008358:	4b42      	ldr	r3, [pc, #264]	; (8008464 <__multiply+0x144>)
 800835a:	4843      	ldr	r0, [pc, #268]	; (8008468 <__multiply+0x148>)
 800835c:	f240 115d 	movw	r1, #349	; 0x15d
 8008360:	f000 fcc4 	bl	8008cec <__assert_func>
 8008364:	f100 0614 	add.w	r6, r0, #20
 8008368:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800836c:	4633      	mov	r3, r6
 800836e:	2200      	movs	r2, #0
 8008370:	4543      	cmp	r3, r8
 8008372:	d31e      	bcc.n	80083b2 <__multiply+0x92>
 8008374:	f105 0c14 	add.w	ip, r5, #20
 8008378:	f104 0314 	add.w	r3, r4, #20
 800837c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008380:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008384:	9202      	str	r2, [sp, #8]
 8008386:	ebac 0205 	sub.w	r2, ip, r5
 800838a:	3a15      	subs	r2, #21
 800838c:	f022 0203 	bic.w	r2, r2, #3
 8008390:	3204      	adds	r2, #4
 8008392:	f105 0115 	add.w	r1, r5, #21
 8008396:	458c      	cmp	ip, r1
 8008398:	bf38      	it	cc
 800839a:	2204      	movcc	r2, #4
 800839c:	9201      	str	r2, [sp, #4]
 800839e:	9a02      	ldr	r2, [sp, #8]
 80083a0:	9303      	str	r3, [sp, #12]
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d808      	bhi.n	80083b8 <__multiply+0x98>
 80083a6:	2f00      	cmp	r7, #0
 80083a8:	dc55      	bgt.n	8008456 <__multiply+0x136>
 80083aa:	6107      	str	r7, [r0, #16]
 80083ac:	b005      	add	sp, #20
 80083ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083b2:	f843 2b04 	str.w	r2, [r3], #4
 80083b6:	e7db      	b.n	8008370 <__multiply+0x50>
 80083b8:	f8b3 a000 	ldrh.w	sl, [r3]
 80083bc:	f1ba 0f00 	cmp.w	sl, #0
 80083c0:	d020      	beq.n	8008404 <__multiply+0xe4>
 80083c2:	f105 0e14 	add.w	lr, r5, #20
 80083c6:	46b1      	mov	r9, r6
 80083c8:	2200      	movs	r2, #0
 80083ca:	f85e 4b04 	ldr.w	r4, [lr], #4
 80083ce:	f8d9 b000 	ldr.w	fp, [r9]
 80083d2:	b2a1      	uxth	r1, r4
 80083d4:	fa1f fb8b 	uxth.w	fp, fp
 80083d8:	fb0a b101 	mla	r1, sl, r1, fp
 80083dc:	4411      	add	r1, r2
 80083de:	f8d9 2000 	ldr.w	r2, [r9]
 80083e2:	0c24      	lsrs	r4, r4, #16
 80083e4:	0c12      	lsrs	r2, r2, #16
 80083e6:	fb0a 2404 	mla	r4, sl, r4, r2
 80083ea:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80083ee:	b289      	uxth	r1, r1
 80083f0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80083f4:	45f4      	cmp	ip, lr
 80083f6:	f849 1b04 	str.w	r1, [r9], #4
 80083fa:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80083fe:	d8e4      	bhi.n	80083ca <__multiply+0xaa>
 8008400:	9901      	ldr	r1, [sp, #4]
 8008402:	5072      	str	r2, [r6, r1]
 8008404:	9a03      	ldr	r2, [sp, #12]
 8008406:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800840a:	3304      	adds	r3, #4
 800840c:	f1b9 0f00 	cmp.w	r9, #0
 8008410:	d01f      	beq.n	8008452 <__multiply+0x132>
 8008412:	6834      	ldr	r4, [r6, #0]
 8008414:	f105 0114 	add.w	r1, r5, #20
 8008418:	46b6      	mov	lr, r6
 800841a:	f04f 0a00 	mov.w	sl, #0
 800841e:	880a      	ldrh	r2, [r1, #0]
 8008420:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008424:	fb09 b202 	mla	r2, r9, r2, fp
 8008428:	4492      	add	sl, r2
 800842a:	b2a4      	uxth	r4, r4
 800842c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008430:	f84e 4b04 	str.w	r4, [lr], #4
 8008434:	f851 4b04 	ldr.w	r4, [r1], #4
 8008438:	f8be 2000 	ldrh.w	r2, [lr]
 800843c:	0c24      	lsrs	r4, r4, #16
 800843e:	fb09 2404 	mla	r4, r9, r4, r2
 8008442:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008446:	458c      	cmp	ip, r1
 8008448:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800844c:	d8e7      	bhi.n	800841e <__multiply+0xfe>
 800844e:	9a01      	ldr	r2, [sp, #4]
 8008450:	50b4      	str	r4, [r6, r2]
 8008452:	3604      	adds	r6, #4
 8008454:	e7a3      	b.n	800839e <__multiply+0x7e>
 8008456:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800845a:	2b00      	cmp	r3, #0
 800845c:	d1a5      	bne.n	80083aa <__multiply+0x8a>
 800845e:	3f01      	subs	r7, #1
 8008460:	e7a1      	b.n	80083a6 <__multiply+0x86>
 8008462:	bf00      	nop
 8008464:	0801c827 	.word	0x0801c827
 8008468:	0801c898 	.word	0x0801c898

0800846c <__pow5mult>:
 800846c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008470:	4615      	mov	r5, r2
 8008472:	f012 0203 	ands.w	r2, r2, #3
 8008476:	4606      	mov	r6, r0
 8008478:	460f      	mov	r7, r1
 800847a:	d007      	beq.n	800848c <__pow5mult+0x20>
 800847c:	4c25      	ldr	r4, [pc, #148]	; (8008514 <__pow5mult+0xa8>)
 800847e:	3a01      	subs	r2, #1
 8008480:	2300      	movs	r3, #0
 8008482:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008486:	f7ff fe9b 	bl	80081c0 <__multadd>
 800848a:	4607      	mov	r7, r0
 800848c:	10ad      	asrs	r5, r5, #2
 800848e:	d03d      	beq.n	800850c <__pow5mult+0xa0>
 8008490:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008492:	b97c      	cbnz	r4, 80084b4 <__pow5mult+0x48>
 8008494:	2010      	movs	r0, #16
 8008496:	f7ff fe1b 	bl	80080d0 <malloc>
 800849a:	4602      	mov	r2, r0
 800849c:	6270      	str	r0, [r6, #36]	; 0x24
 800849e:	b928      	cbnz	r0, 80084ac <__pow5mult+0x40>
 80084a0:	4b1d      	ldr	r3, [pc, #116]	; (8008518 <__pow5mult+0xac>)
 80084a2:	481e      	ldr	r0, [pc, #120]	; (800851c <__pow5mult+0xb0>)
 80084a4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80084a8:	f000 fc20 	bl	8008cec <__assert_func>
 80084ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80084b0:	6004      	str	r4, [r0, #0]
 80084b2:	60c4      	str	r4, [r0, #12]
 80084b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80084b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80084bc:	b94c      	cbnz	r4, 80084d2 <__pow5mult+0x66>
 80084be:	f240 2171 	movw	r1, #625	; 0x271
 80084c2:	4630      	mov	r0, r6
 80084c4:	f7ff ff16 	bl	80082f4 <__i2b>
 80084c8:	2300      	movs	r3, #0
 80084ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80084ce:	4604      	mov	r4, r0
 80084d0:	6003      	str	r3, [r0, #0]
 80084d2:	f04f 0900 	mov.w	r9, #0
 80084d6:	07eb      	lsls	r3, r5, #31
 80084d8:	d50a      	bpl.n	80084f0 <__pow5mult+0x84>
 80084da:	4639      	mov	r1, r7
 80084dc:	4622      	mov	r2, r4
 80084de:	4630      	mov	r0, r6
 80084e0:	f7ff ff1e 	bl	8008320 <__multiply>
 80084e4:	4639      	mov	r1, r7
 80084e6:	4680      	mov	r8, r0
 80084e8:	4630      	mov	r0, r6
 80084ea:	f7ff fe47 	bl	800817c <_Bfree>
 80084ee:	4647      	mov	r7, r8
 80084f0:	106d      	asrs	r5, r5, #1
 80084f2:	d00b      	beq.n	800850c <__pow5mult+0xa0>
 80084f4:	6820      	ldr	r0, [r4, #0]
 80084f6:	b938      	cbnz	r0, 8008508 <__pow5mult+0x9c>
 80084f8:	4622      	mov	r2, r4
 80084fa:	4621      	mov	r1, r4
 80084fc:	4630      	mov	r0, r6
 80084fe:	f7ff ff0f 	bl	8008320 <__multiply>
 8008502:	6020      	str	r0, [r4, #0]
 8008504:	f8c0 9000 	str.w	r9, [r0]
 8008508:	4604      	mov	r4, r0
 800850a:	e7e4      	b.n	80084d6 <__pow5mult+0x6a>
 800850c:	4638      	mov	r0, r7
 800850e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008512:	bf00      	nop
 8008514:	0801c9e8 	.word	0x0801c9e8
 8008518:	0801c7b1 	.word	0x0801c7b1
 800851c:	0801c898 	.word	0x0801c898

08008520 <__lshift>:
 8008520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008524:	460c      	mov	r4, r1
 8008526:	6849      	ldr	r1, [r1, #4]
 8008528:	6923      	ldr	r3, [r4, #16]
 800852a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800852e:	68a3      	ldr	r3, [r4, #8]
 8008530:	4607      	mov	r7, r0
 8008532:	4691      	mov	r9, r2
 8008534:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008538:	f108 0601 	add.w	r6, r8, #1
 800853c:	42b3      	cmp	r3, r6
 800853e:	db0b      	blt.n	8008558 <__lshift+0x38>
 8008540:	4638      	mov	r0, r7
 8008542:	f7ff fddb 	bl	80080fc <_Balloc>
 8008546:	4605      	mov	r5, r0
 8008548:	b948      	cbnz	r0, 800855e <__lshift+0x3e>
 800854a:	4602      	mov	r2, r0
 800854c:	4b28      	ldr	r3, [pc, #160]	; (80085f0 <__lshift+0xd0>)
 800854e:	4829      	ldr	r0, [pc, #164]	; (80085f4 <__lshift+0xd4>)
 8008550:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008554:	f000 fbca 	bl	8008cec <__assert_func>
 8008558:	3101      	adds	r1, #1
 800855a:	005b      	lsls	r3, r3, #1
 800855c:	e7ee      	b.n	800853c <__lshift+0x1c>
 800855e:	2300      	movs	r3, #0
 8008560:	f100 0114 	add.w	r1, r0, #20
 8008564:	f100 0210 	add.w	r2, r0, #16
 8008568:	4618      	mov	r0, r3
 800856a:	4553      	cmp	r3, sl
 800856c:	db33      	blt.n	80085d6 <__lshift+0xb6>
 800856e:	6920      	ldr	r0, [r4, #16]
 8008570:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008574:	f104 0314 	add.w	r3, r4, #20
 8008578:	f019 091f 	ands.w	r9, r9, #31
 800857c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008580:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008584:	d02b      	beq.n	80085de <__lshift+0xbe>
 8008586:	f1c9 0e20 	rsb	lr, r9, #32
 800858a:	468a      	mov	sl, r1
 800858c:	2200      	movs	r2, #0
 800858e:	6818      	ldr	r0, [r3, #0]
 8008590:	fa00 f009 	lsl.w	r0, r0, r9
 8008594:	4302      	orrs	r2, r0
 8008596:	f84a 2b04 	str.w	r2, [sl], #4
 800859a:	f853 2b04 	ldr.w	r2, [r3], #4
 800859e:	459c      	cmp	ip, r3
 80085a0:	fa22 f20e 	lsr.w	r2, r2, lr
 80085a4:	d8f3      	bhi.n	800858e <__lshift+0x6e>
 80085a6:	ebac 0304 	sub.w	r3, ip, r4
 80085aa:	3b15      	subs	r3, #21
 80085ac:	f023 0303 	bic.w	r3, r3, #3
 80085b0:	3304      	adds	r3, #4
 80085b2:	f104 0015 	add.w	r0, r4, #21
 80085b6:	4584      	cmp	ip, r0
 80085b8:	bf38      	it	cc
 80085ba:	2304      	movcc	r3, #4
 80085bc:	50ca      	str	r2, [r1, r3]
 80085be:	b10a      	cbz	r2, 80085c4 <__lshift+0xa4>
 80085c0:	f108 0602 	add.w	r6, r8, #2
 80085c4:	3e01      	subs	r6, #1
 80085c6:	4638      	mov	r0, r7
 80085c8:	612e      	str	r6, [r5, #16]
 80085ca:	4621      	mov	r1, r4
 80085cc:	f7ff fdd6 	bl	800817c <_Bfree>
 80085d0:	4628      	mov	r0, r5
 80085d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80085da:	3301      	adds	r3, #1
 80085dc:	e7c5      	b.n	800856a <__lshift+0x4a>
 80085de:	3904      	subs	r1, #4
 80085e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80085e4:	f841 2f04 	str.w	r2, [r1, #4]!
 80085e8:	459c      	cmp	ip, r3
 80085ea:	d8f9      	bhi.n	80085e0 <__lshift+0xc0>
 80085ec:	e7ea      	b.n	80085c4 <__lshift+0xa4>
 80085ee:	bf00      	nop
 80085f0:	0801c827 	.word	0x0801c827
 80085f4:	0801c898 	.word	0x0801c898

080085f8 <__mcmp>:
 80085f8:	b530      	push	{r4, r5, lr}
 80085fa:	6902      	ldr	r2, [r0, #16]
 80085fc:	690c      	ldr	r4, [r1, #16]
 80085fe:	1b12      	subs	r2, r2, r4
 8008600:	d10e      	bne.n	8008620 <__mcmp+0x28>
 8008602:	f100 0314 	add.w	r3, r0, #20
 8008606:	3114      	adds	r1, #20
 8008608:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800860c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008610:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008614:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008618:	42a5      	cmp	r5, r4
 800861a:	d003      	beq.n	8008624 <__mcmp+0x2c>
 800861c:	d305      	bcc.n	800862a <__mcmp+0x32>
 800861e:	2201      	movs	r2, #1
 8008620:	4610      	mov	r0, r2
 8008622:	bd30      	pop	{r4, r5, pc}
 8008624:	4283      	cmp	r3, r0
 8008626:	d3f3      	bcc.n	8008610 <__mcmp+0x18>
 8008628:	e7fa      	b.n	8008620 <__mcmp+0x28>
 800862a:	f04f 32ff 	mov.w	r2, #4294967295
 800862e:	e7f7      	b.n	8008620 <__mcmp+0x28>

08008630 <__mdiff>:
 8008630:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008634:	460c      	mov	r4, r1
 8008636:	4606      	mov	r6, r0
 8008638:	4611      	mov	r1, r2
 800863a:	4620      	mov	r0, r4
 800863c:	4617      	mov	r7, r2
 800863e:	f7ff ffdb 	bl	80085f8 <__mcmp>
 8008642:	1e05      	subs	r5, r0, #0
 8008644:	d110      	bne.n	8008668 <__mdiff+0x38>
 8008646:	4629      	mov	r1, r5
 8008648:	4630      	mov	r0, r6
 800864a:	f7ff fd57 	bl	80080fc <_Balloc>
 800864e:	b930      	cbnz	r0, 800865e <__mdiff+0x2e>
 8008650:	4b39      	ldr	r3, [pc, #228]	; (8008738 <__mdiff+0x108>)
 8008652:	4602      	mov	r2, r0
 8008654:	f240 2132 	movw	r1, #562	; 0x232
 8008658:	4838      	ldr	r0, [pc, #224]	; (800873c <__mdiff+0x10c>)
 800865a:	f000 fb47 	bl	8008cec <__assert_func>
 800865e:	2301      	movs	r3, #1
 8008660:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008664:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008668:	bfa4      	itt	ge
 800866a:	463b      	movge	r3, r7
 800866c:	4627      	movge	r7, r4
 800866e:	4630      	mov	r0, r6
 8008670:	6879      	ldr	r1, [r7, #4]
 8008672:	bfa6      	itte	ge
 8008674:	461c      	movge	r4, r3
 8008676:	2500      	movge	r5, #0
 8008678:	2501      	movlt	r5, #1
 800867a:	f7ff fd3f 	bl	80080fc <_Balloc>
 800867e:	b920      	cbnz	r0, 800868a <__mdiff+0x5a>
 8008680:	4b2d      	ldr	r3, [pc, #180]	; (8008738 <__mdiff+0x108>)
 8008682:	4602      	mov	r2, r0
 8008684:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008688:	e7e6      	b.n	8008658 <__mdiff+0x28>
 800868a:	693e      	ldr	r6, [r7, #16]
 800868c:	60c5      	str	r5, [r0, #12]
 800868e:	6925      	ldr	r5, [r4, #16]
 8008690:	f107 0114 	add.w	r1, r7, #20
 8008694:	f104 0914 	add.w	r9, r4, #20
 8008698:	f100 0e14 	add.w	lr, r0, #20
 800869c:	f107 0210 	add.w	r2, r7, #16
 80086a0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80086a4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80086a8:	46f2      	mov	sl, lr
 80086aa:	2700      	movs	r7, #0
 80086ac:	f859 3b04 	ldr.w	r3, [r9], #4
 80086b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80086b4:	fa1f f883 	uxth.w	r8, r3
 80086b8:	fa17 f78b 	uxtah	r7, r7, fp
 80086bc:	0c1b      	lsrs	r3, r3, #16
 80086be:	eba7 0808 	sub.w	r8, r7, r8
 80086c2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80086c6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80086ca:	fa1f f888 	uxth.w	r8, r8
 80086ce:	141f      	asrs	r7, r3, #16
 80086d0:	454d      	cmp	r5, r9
 80086d2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80086d6:	f84a 3b04 	str.w	r3, [sl], #4
 80086da:	d8e7      	bhi.n	80086ac <__mdiff+0x7c>
 80086dc:	1b2b      	subs	r3, r5, r4
 80086de:	3b15      	subs	r3, #21
 80086e0:	f023 0303 	bic.w	r3, r3, #3
 80086e4:	3304      	adds	r3, #4
 80086e6:	3415      	adds	r4, #21
 80086e8:	42a5      	cmp	r5, r4
 80086ea:	bf38      	it	cc
 80086ec:	2304      	movcc	r3, #4
 80086ee:	4419      	add	r1, r3
 80086f0:	4473      	add	r3, lr
 80086f2:	469e      	mov	lr, r3
 80086f4:	460d      	mov	r5, r1
 80086f6:	4565      	cmp	r5, ip
 80086f8:	d30e      	bcc.n	8008718 <__mdiff+0xe8>
 80086fa:	f10c 0203 	add.w	r2, ip, #3
 80086fe:	1a52      	subs	r2, r2, r1
 8008700:	f022 0203 	bic.w	r2, r2, #3
 8008704:	3903      	subs	r1, #3
 8008706:	458c      	cmp	ip, r1
 8008708:	bf38      	it	cc
 800870a:	2200      	movcc	r2, #0
 800870c:	441a      	add	r2, r3
 800870e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008712:	b17b      	cbz	r3, 8008734 <__mdiff+0x104>
 8008714:	6106      	str	r6, [r0, #16]
 8008716:	e7a5      	b.n	8008664 <__mdiff+0x34>
 8008718:	f855 8b04 	ldr.w	r8, [r5], #4
 800871c:	fa17 f488 	uxtah	r4, r7, r8
 8008720:	1422      	asrs	r2, r4, #16
 8008722:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008726:	b2a4      	uxth	r4, r4
 8008728:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800872c:	f84e 4b04 	str.w	r4, [lr], #4
 8008730:	1417      	asrs	r7, r2, #16
 8008732:	e7e0      	b.n	80086f6 <__mdiff+0xc6>
 8008734:	3e01      	subs	r6, #1
 8008736:	e7ea      	b.n	800870e <__mdiff+0xde>
 8008738:	0801c827 	.word	0x0801c827
 800873c:	0801c898 	.word	0x0801c898

08008740 <__d2b>:
 8008740:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008744:	4689      	mov	r9, r1
 8008746:	2101      	movs	r1, #1
 8008748:	ec57 6b10 	vmov	r6, r7, d0
 800874c:	4690      	mov	r8, r2
 800874e:	f7ff fcd5 	bl	80080fc <_Balloc>
 8008752:	4604      	mov	r4, r0
 8008754:	b930      	cbnz	r0, 8008764 <__d2b+0x24>
 8008756:	4602      	mov	r2, r0
 8008758:	4b25      	ldr	r3, [pc, #148]	; (80087f0 <__d2b+0xb0>)
 800875a:	4826      	ldr	r0, [pc, #152]	; (80087f4 <__d2b+0xb4>)
 800875c:	f240 310a 	movw	r1, #778	; 0x30a
 8008760:	f000 fac4 	bl	8008cec <__assert_func>
 8008764:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008768:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800876c:	bb35      	cbnz	r5, 80087bc <__d2b+0x7c>
 800876e:	2e00      	cmp	r6, #0
 8008770:	9301      	str	r3, [sp, #4]
 8008772:	d028      	beq.n	80087c6 <__d2b+0x86>
 8008774:	4668      	mov	r0, sp
 8008776:	9600      	str	r6, [sp, #0]
 8008778:	f7ff fd8c 	bl	8008294 <__lo0bits>
 800877c:	9900      	ldr	r1, [sp, #0]
 800877e:	b300      	cbz	r0, 80087c2 <__d2b+0x82>
 8008780:	9a01      	ldr	r2, [sp, #4]
 8008782:	f1c0 0320 	rsb	r3, r0, #32
 8008786:	fa02 f303 	lsl.w	r3, r2, r3
 800878a:	430b      	orrs	r3, r1
 800878c:	40c2      	lsrs	r2, r0
 800878e:	6163      	str	r3, [r4, #20]
 8008790:	9201      	str	r2, [sp, #4]
 8008792:	9b01      	ldr	r3, [sp, #4]
 8008794:	61a3      	str	r3, [r4, #24]
 8008796:	2b00      	cmp	r3, #0
 8008798:	bf14      	ite	ne
 800879a:	2202      	movne	r2, #2
 800879c:	2201      	moveq	r2, #1
 800879e:	6122      	str	r2, [r4, #16]
 80087a0:	b1d5      	cbz	r5, 80087d8 <__d2b+0x98>
 80087a2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80087a6:	4405      	add	r5, r0
 80087a8:	f8c9 5000 	str.w	r5, [r9]
 80087ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80087b0:	f8c8 0000 	str.w	r0, [r8]
 80087b4:	4620      	mov	r0, r4
 80087b6:	b003      	add	sp, #12
 80087b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80087bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80087c0:	e7d5      	b.n	800876e <__d2b+0x2e>
 80087c2:	6161      	str	r1, [r4, #20]
 80087c4:	e7e5      	b.n	8008792 <__d2b+0x52>
 80087c6:	a801      	add	r0, sp, #4
 80087c8:	f7ff fd64 	bl	8008294 <__lo0bits>
 80087cc:	9b01      	ldr	r3, [sp, #4]
 80087ce:	6163      	str	r3, [r4, #20]
 80087d0:	2201      	movs	r2, #1
 80087d2:	6122      	str	r2, [r4, #16]
 80087d4:	3020      	adds	r0, #32
 80087d6:	e7e3      	b.n	80087a0 <__d2b+0x60>
 80087d8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80087dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80087e0:	f8c9 0000 	str.w	r0, [r9]
 80087e4:	6918      	ldr	r0, [r3, #16]
 80087e6:	f7ff fd35 	bl	8008254 <__hi0bits>
 80087ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80087ee:	e7df      	b.n	80087b0 <__d2b+0x70>
 80087f0:	0801c827 	.word	0x0801c827
 80087f4:	0801c898 	.word	0x0801c898

080087f8 <_calloc_r>:
 80087f8:	b513      	push	{r0, r1, r4, lr}
 80087fa:	434a      	muls	r2, r1
 80087fc:	4611      	mov	r1, r2
 80087fe:	9201      	str	r2, [sp, #4]
 8008800:	f000 f85a 	bl	80088b8 <_malloc_r>
 8008804:	4604      	mov	r4, r0
 8008806:	b118      	cbz	r0, 8008810 <_calloc_r+0x18>
 8008808:	9a01      	ldr	r2, [sp, #4]
 800880a:	2100      	movs	r1, #0
 800880c:	f7fd fe02 	bl	8006414 <memset>
 8008810:	4620      	mov	r0, r4
 8008812:	b002      	add	sp, #8
 8008814:	bd10      	pop	{r4, pc}
	...

08008818 <_free_r>:
 8008818:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800881a:	2900      	cmp	r1, #0
 800881c:	d048      	beq.n	80088b0 <_free_r+0x98>
 800881e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008822:	9001      	str	r0, [sp, #4]
 8008824:	2b00      	cmp	r3, #0
 8008826:	f1a1 0404 	sub.w	r4, r1, #4
 800882a:	bfb8      	it	lt
 800882c:	18e4      	addlt	r4, r4, r3
 800882e:	f000 fae3 	bl	8008df8 <__malloc_lock>
 8008832:	4a20      	ldr	r2, [pc, #128]	; (80088b4 <_free_r+0x9c>)
 8008834:	9801      	ldr	r0, [sp, #4]
 8008836:	6813      	ldr	r3, [r2, #0]
 8008838:	4615      	mov	r5, r2
 800883a:	b933      	cbnz	r3, 800884a <_free_r+0x32>
 800883c:	6063      	str	r3, [r4, #4]
 800883e:	6014      	str	r4, [r2, #0]
 8008840:	b003      	add	sp, #12
 8008842:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008846:	f000 badd 	b.w	8008e04 <__malloc_unlock>
 800884a:	42a3      	cmp	r3, r4
 800884c:	d90b      	bls.n	8008866 <_free_r+0x4e>
 800884e:	6821      	ldr	r1, [r4, #0]
 8008850:	1862      	adds	r2, r4, r1
 8008852:	4293      	cmp	r3, r2
 8008854:	bf04      	itt	eq
 8008856:	681a      	ldreq	r2, [r3, #0]
 8008858:	685b      	ldreq	r3, [r3, #4]
 800885a:	6063      	str	r3, [r4, #4]
 800885c:	bf04      	itt	eq
 800885e:	1852      	addeq	r2, r2, r1
 8008860:	6022      	streq	r2, [r4, #0]
 8008862:	602c      	str	r4, [r5, #0]
 8008864:	e7ec      	b.n	8008840 <_free_r+0x28>
 8008866:	461a      	mov	r2, r3
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	b10b      	cbz	r3, 8008870 <_free_r+0x58>
 800886c:	42a3      	cmp	r3, r4
 800886e:	d9fa      	bls.n	8008866 <_free_r+0x4e>
 8008870:	6811      	ldr	r1, [r2, #0]
 8008872:	1855      	adds	r5, r2, r1
 8008874:	42a5      	cmp	r5, r4
 8008876:	d10b      	bne.n	8008890 <_free_r+0x78>
 8008878:	6824      	ldr	r4, [r4, #0]
 800887a:	4421      	add	r1, r4
 800887c:	1854      	adds	r4, r2, r1
 800887e:	42a3      	cmp	r3, r4
 8008880:	6011      	str	r1, [r2, #0]
 8008882:	d1dd      	bne.n	8008840 <_free_r+0x28>
 8008884:	681c      	ldr	r4, [r3, #0]
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	6053      	str	r3, [r2, #4]
 800888a:	4421      	add	r1, r4
 800888c:	6011      	str	r1, [r2, #0]
 800888e:	e7d7      	b.n	8008840 <_free_r+0x28>
 8008890:	d902      	bls.n	8008898 <_free_r+0x80>
 8008892:	230c      	movs	r3, #12
 8008894:	6003      	str	r3, [r0, #0]
 8008896:	e7d3      	b.n	8008840 <_free_r+0x28>
 8008898:	6825      	ldr	r5, [r4, #0]
 800889a:	1961      	adds	r1, r4, r5
 800889c:	428b      	cmp	r3, r1
 800889e:	bf04      	itt	eq
 80088a0:	6819      	ldreq	r1, [r3, #0]
 80088a2:	685b      	ldreq	r3, [r3, #4]
 80088a4:	6063      	str	r3, [r4, #4]
 80088a6:	bf04      	itt	eq
 80088a8:	1949      	addeq	r1, r1, r5
 80088aa:	6021      	streq	r1, [r4, #0]
 80088ac:	6054      	str	r4, [r2, #4]
 80088ae:	e7c7      	b.n	8008840 <_free_r+0x28>
 80088b0:	b003      	add	sp, #12
 80088b2:	bd30      	pop	{r4, r5, pc}
 80088b4:	2000f22c 	.word	0x2000f22c

080088b8 <_malloc_r>:
 80088b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ba:	1ccd      	adds	r5, r1, #3
 80088bc:	f025 0503 	bic.w	r5, r5, #3
 80088c0:	3508      	adds	r5, #8
 80088c2:	2d0c      	cmp	r5, #12
 80088c4:	bf38      	it	cc
 80088c6:	250c      	movcc	r5, #12
 80088c8:	2d00      	cmp	r5, #0
 80088ca:	4606      	mov	r6, r0
 80088cc:	db01      	blt.n	80088d2 <_malloc_r+0x1a>
 80088ce:	42a9      	cmp	r1, r5
 80088d0:	d903      	bls.n	80088da <_malloc_r+0x22>
 80088d2:	230c      	movs	r3, #12
 80088d4:	6033      	str	r3, [r6, #0]
 80088d6:	2000      	movs	r0, #0
 80088d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088da:	f000 fa8d 	bl	8008df8 <__malloc_lock>
 80088de:	4921      	ldr	r1, [pc, #132]	; (8008964 <_malloc_r+0xac>)
 80088e0:	680a      	ldr	r2, [r1, #0]
 80088e2:	4614      	mov	r4, r2
 80088e4:	b99c      	cbnz	r4, 800890e <_malloc_r+0x56>
 80088e6:	4f20      	ldr	r7, [pc, #128]	; (8008968 <_malloc_r+0xb0>)
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	b923      	cbnz	r3, 80088f6 <_malloc_r+0x3e>
 80088ec:	4621      	mov	r1, r4
 80088ee:	4630      	mov	r0, r6
 80088f0:	f000 f996 	bl	8008c20 <_sbrk_r>
 80088f4:	6038      	str	r0, [r7, #0]
 80088f6:	4629      	mov	r1, r5
 80088f8:	4630      	mov	r0, r6
 80088fa:	f000 f991 	bl	8008c20 <_sbrk_r>
 80088fe:	1c43      	adds	r3, r0, #1
 8008900:	d123      	bne.n	800894a <_malloc_r+0x92>
 8008902:	230c      	movs	r3, #12
 8008904:	6033      	str	r3, [r6, #0]
 8008906:	4630      	mov	r0, r6
 8008908:	f000 fa7c 	bl	8008e04 <__malloc_unlock>
 800890c:	e7e3      	b.n	80088d6 <_malloc_r+0x1e>
 800890e:	6823      	ldr	r3, [r4, #0]
 8008910:	1b5b      	subs	r3, r3, r5
 8008912:	d417      	bmi.n	8008944 <_malloc_r+0x8c>
 8008914:	2b0b      	cmp	r3, #11
 8008916:	d903      	bls.n	8008920 <_malloc_r+0x68>
 8008918:	6023      	str	r3, [r4, #0]
 800891a:	441c      	add	r4, r3
 800891c:	6025      	str	r5, [r4, #0]
 800891e:	e004      	b.n	800892a <_malloc_r+0x72>
 8008920:	6863      	ldr	r3, [r4, #4]
 8008922:	42a2      	cmp	r2, r4
 8008924:	bf0c      	ite	eq
 8008926:	600b      	streq	r3, [r1, #0]
 8008928:	6053      	strne	r3, [r2, #4]
 800892a:	4630      	mov	r0, r6
 800892c:	f000 fa6a 	bl	8008e04 <__malloc_unlock>
 8008930:	f104 000b 	add.w	r0, r4, #11
 8008934:	1d23      	adds	r3, r4, #4
 8008936:	f020 0007 	bic.w	r0, r0, #7
 800893a:	1ac2      	subs	r2, r0, r3
 800893c:	d0cc      	beq.n	80088d8 <_malloc_r+0x20>
 800893e:	1a1b      	subs	r3, r3, r0
 8008940:	50a3      	str	r3, [r4, r2]
 8008942:	e7c9      	b.n	80088d8 <_malloc_r+0x20>
 8008944:	4622      	mov	r2, r4
 8008946:	6864      	ldr	r4, [r4, #4]
 8008948:	e7cc      	b.n	80088e4 <_malloc_r+0x2c>
 800894a:	1cc4      	adds	r4, r0, #3
 800894c:	f024 0403 	bic.w	r4, r4, #3
 8008950:	42a0      	cmp	r0, r4
 8008952:	d0e3      	beq.n	800891c <_malloc_r+0x64>
 8008954:	1a21      	subs	r1, r4, r0
 8008956:	4630      	mov	r0, r6
 8008958:	f000 f962 	bl	8008c20 <_sbrk_r>
 800895c:	3001      	adds	r0, #1
 800895e:	d1dd      	bne.n	800891c <_malloc_r+0x64>
 8008960:	e7cf      	b.n	8008902 <_malloc_r+0x4a>
 8008962:	bf00      	nop
 8008964:	2000f22c 	.word	0x2000f22c
 8008968:	2000f230 	.word	0x2000f230

0800896c <__sfputc_r>:
 800896c:	6893      	ldr	r3, [r2, #8]
 800896e:	3b01      	subs	r3, #1
 8008970:	2b00      	cmp	r3, #0
 8008972:	b410      	push	{r4}
 8008974:	6093      	str	r3, [r2, #8]
 8008976:	da08      	bge.n	800898a <__sfputc_r+0x1e>
 8008978:	6994      	ldr	r4, [r2, #24]
 800897a:	42a3      	cmp	r3, r4
 800897c:	db01      	blt.n	8008982 <__sfputc_r+0x16>
 800897e:	290a      	cmp	r1, #10
 8008980:	d103      	bne.n	800898a <__sfputc_r+0x1e>
 8008982:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008986:	f7fe ba45 	b.w	8006e14 <__swbuf_r>
 800898a:	6813      	ldr	r3, [r2, #0]
 800898c:	1c58      	adds	r0, r3, #1
 800898e:	6010      	str	r0, [r2, #0]
 8008990:	7019      	strb	r1, [r3, #0]
 8008992:	4608      	mov	r0, r1
 8008994:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008998:	4770      	bx	lr

0800899a <__sfputs_r>:
 800899a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800899c:	4606      	mov	r6, r0
 800899e:	460f      	mov	r7, r1
 80089a0:	4614      	mov	r4, r2
 80089a2:	18d5      	adds	r5, r2, r3
 80089a4:	42ac      	cmp	r4, r5
 80089a6:	d101      	bne.n	80089ac <__sfputs_r+0x12>
 80089a8:	2000      	movs	r0, #0
 80089aa:	e007      	b.n	80089bc <__sfputs_r+0x22>
 80089ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089b0:	463a      	mov	r2, r7
 80089b2:	4630      	mov	r0, r6
 80089b4:	f7ff ffda 	bl	800896c <__sfputc_r>
 80089b8:	1c43      	adds	r3, r0, #1
 80089ba:	d1f3      	bne.n	80089a4 <__sfputs_r+0xa>
 80089bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080089c0 <_vfiprintf_r>:
 80089c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089c4:	460d      	mov	r5, r1
 80089c6:	b09d      	sub	sp, #116	; 0x74
 80089c8:	4614      	mov	r4, r2
 80089ca:	4698      	mov	r8, r3
 80089cc:	4606      	mov	r6, r0
 80089ce:	b118      	cbz	r0, 80089d8 <_vfiprintf_r+0x18>
 80089d0:	6983      	ldr	r3, [r0, #24]
 80089d2:	b90b      	cbnz	r3, 80089d8 <_vfiprintf_r+0x18>
 80089d4:	f7ff fa72 	bl	8007ebc <__sinit>
 80089d8:	4b89      	ldr	r3, [pc, #548]	; (8008c00 <_vfiprintf_r+0x240>)
 80089da:	429d      	cmp	r5, r3
 80089dc:	d11b      	bne.n	8008a16 <_vfiprintf_r+0x56>
 80089de:	6875      	ldr	r5, [r6, #4]
 80089e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089e2:	07d9      	lsls	r1, r3, #31
 80089e4:	d405      	bmi.n	80089f2 <_vfiprintf_r+0x32>
 80089e6:	89ab      	ldrh	r3, [r5, #12]
 80089e8:	059a      	lsls	r2, r3, #22
 80089ea:	d402      	bmi.n	80089f2 <_vfiprintf_r+0x32>
 80089ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089ee:	f7ff fb08 	bl	8008002 <__retarget_lock_acquire_recursive>
 80089f2:	89ab      	ldrh	r3, [r5, #12]
 80089f4:	071b      	lsls	r3, r3, #28
 80089f6:	d501      	bpl.n	80089fc <_vfiprintf_r+0x3c>
 80089f8:	692b      	ldr	r3, [r5, #16]
 80089fa:	b9eb      	cbnz	r3, 8008a38 <_vfiprintf_r+0x78>
 80089fc:	4629      	mov	r1, r5
 80089fe:	4630      	mov	r0, r6
 8008a00:	f7fe fa5a 	bl	8006eb8 <__swsetup_r>
 8008a04:	b1c0      	cbz	r0, 8008a38 <_vfiprintf_r+0x78>
 8008a06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a08:	07dc      	lsls	r4, r3, #31
 8008a0a:	d50e      	bpl.n	8008a2a <_vfiprintf_r+0x6a>
 8008a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a10:	b01d      	add	sp, #116	; 0x74
 8008a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a16:	4b7b      	ldr	r3, [pc, #492]	; (8008c04 <_vfiprintf_r+0x244>)
 8008a18:	429d      	cmp	r5, r3
 8008a1a:	d101      	bne.n	8008a20 <_vfiprintf_r+0x60>
 8008a1c:	68b5      	ldr	r5, [r6, #8]
 8008a1e:	e7df      	b.n	80089e0 <_vfiprintf_r+0x20>
 8008a20:	4b79      	ldr	r3, [pc, #484]	; (8008c08 <_vfiprintf_r+0x248>)
 8008a22:	429d      	cmp	r5, r3
 8008a24:	bf08      	it	eq
 8008a26:	68f5      	ldreq	r5, [r6, #12]
 8008a28:	e7da      	b.n	80089e0 <_vfiprintf_r+0x20>
 8008a2a:	89ab      	ldrh	r3, [r5, #12]
 8008a2c:	0598      	lsls	r0, r3, #22
 8008a2e:	d4ed      	bmi.n	8008a0c <_vfiprintf_r+0x4c>
 8008a30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a32:	f7ff fae7 	bl	8008004 <__retarget_lock_release_recursive>
 8008a36:	e7e9      	b.n	8008a0c <_vfiprintf_r+0x4c>
 8008a38:	2300      	movs	r3, #0
 8008a3a:	9309      	str	r3, [sp, #36]	; 0x24
 8008a3c:	2320      	movs	r3, #32
 8008a3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a42:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a46:	2330      	movs	r3, #48	; 0x30
 8008a48:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008c0c <_vfiprintf_r+0x24c>
 8008a4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a50:	f04f 0901 	mov.w	r9, #1
 8008a54:	4623      	mov	r3, r4
 8008a56:	469a      	mov	sl, r3
 8008a58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a5c:	b10a      	cbz	r2, 8008a62 <_vfiprintf_r+0xa2>
 8008a5e:	2a25      	cmp	r2, #37	; 0x25
 8008a60:	d1f9      	bne.n	8008a56 <_vfiprintf_r+0x96>
 8008a62:	ebba 0b04 	subs.w	fp, sl, r4
 8008a66:	d00b      	beq.n	8008a80 <_vfiprintf_r+0xc0>
 8008a68:	465b      	mov	r3, fp
 8008a6a:	4622      	mov	r2, r4
 8008a6c:	4629      	mov	r1, r5
 8008a6e:	4630      	mov	r0, r6
 8008a70:	f7ff ff93 	bl	800899a <__sfputs_r>
 8008a74:	3001      	adds	r0, #1
 8008a76:	f000 80aa 	beq.w	8008bce <_vfiprintf_r+0x20e>
 8008a7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a7c:	445a      	add	r2, fp
 8008a7e:	9209      	str	r2, [sp, #36]	; 0x24
 8008a80:	f89a 3000 	ldrb.w	r3, [sl]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	f000 80a2 	beq.w	8008bce <_vfiprintf_r+0x20e>
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8008a90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a94:	f10a 0a01 	add.w	sl, sl, #1
 8008a98:	9304      	str	r3, [sp, #16]
 8008a9a:	9307      	str	r3, [sp, #28]
 8008a9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008aa0:	931a      	str	r3, [sp, #104]	; 0x68
 8008aa2:	4654      	mov	r4, sl
 8008aa4:	2205      	movs	r2, #5
 8008aa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008aaa:	4858      	ldr	r0, [pc, #352]	; (8008c0c <_vfiprintf_r+0x24c>)
 8008aac:	f7f7 fb98 	bl	80001e0 <memchr>
 8008ab0:	9a04      	ldr	r2, [sp, #16]
 8008ab2:	b9d8      	cbnz	r0, 8008aec <_vfiprintf_r+0x12c>
 8008ab4:	06d1      	lsls	r1, r2, #27
 8008ab6:	bf44      	itt	mi
 8008ab8:	2320      	movmi	r3, #32
 8008aba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008abe:	0713      	lsls	r3, r2, #28
 8008ac0:	bf44      	itt	mi
 8008ac2:	232b      	movmi	r3, #43	; 0x2b
 8008ac4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ac8:	f89a 3000 	ldrb.w	r3, [sl]
 8008acc:	2b2a      	cmp	r3, #42	; 0x2a
 8008ace:	d015      	beq.n	8008afc <_vfiprintf_r+0x13c>
 8008ad0:	9a07      	ldr	r2, [sp, #28]
 8008ad2:	4654      	mov	r4, sl
 8008ad4:	2000      	movs	r0, #0
 8008ad6:	f04f 0c0a 	mov.w	ip, #10
 8008ada:	4621      	mov	r1, r4
 8008adc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ae0:	3b30      	subs	r3, #48	; 0x30
 8008ae2:	2b09      	cmp	r3, #9
 8008ae4:	d94e      	bls.n	8008b84 <_vfiprintf_r+0x1c4>
 8008ae6:	b1b0      	cbz	r0, 8008b16 <_vfiprintf_r+0x156>
 8008ae8:	9207      	str	r2, [sp, #28]
 8008aea:	e014      	b.n	8008b16 <_vfiprintf_r+0x156>
 8008aec:	eba0 0308 	sub.w	r3, r0, r8
 8008af0:	fa09 f303 	lsl.w	r3, r9, r3
 8008af4:	4313      	orrs	r3, r2
 8008af6:	9304      	str	r3, [sp, #16]
 8008af8:	46a2      	mov	sl, r4
 8008afa:	e7d2      	b.n	8008aa2 <_vfiprintf_r+0xe2>
 8008afc:	9b03      	ldr	r3, [sp, #12]
 8008afe:	1d19      	adds	r1, r3, #4
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	9103      	str	r1, [sp, #12]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	bfbb      	ittet	lt
 8008b08:	425b      	neglt	r3, r3
 8008b0a:	f042 0202 	orrlt.w	r2, r2, #2
 8008b0e:	9307      	strge	r3, [sp, #28]
 8008b10:	9307      	strlt	r3, [sp, #28]
 8008b12:	bfb8      	it	lt
 8008b14:	9204      	strlt	r2, [sp, #16]
 8008b16:	7823      	ldrb	r3, [r4, #0]
 8008b18:	2b2e      	cmp	r3, #46	; 0x2e
 8008b1a:	d10c      	bne.n	8008b36 <_vfiprintf_r+0x176>
 8008b1c:	7863      	ldrb	r3, [r4, #1]
 8008b1e:	2b2a      	cmp	r3, #42	; 0x2a
 8008b20:	d135      	bne.n	8008b8e <_vfiprintf_r+0x1ce>
 8008b22:	9b03      	ldr	r3, [sp, #12]
 8008b24:	1d1a      	adds	r2, r3, #4
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	9203      	str	r2, [sp, #12]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	bfb8      	it	lt
 8008b2e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b32:	3402      	adds	r4, #2
 8008b34:	9305      	str	r3, [sp, #20]
 8008b36:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008c1c <_vfiprintf_r+0x25c>
 8008b3a:	7821      	ldrb	r1, [r4, #0]
 8008b3c:	2203      	movs	r2, #3
 8008b3e:	4650      	mov	r0, sl
 8008b40:	f7f7 fb4e 	bl	80001e0 <memchr>
 8008b44:	b140      	cbz	r0, 8008b58 <_vfiprintf_r+0x198>
 8008b46:	2340      	movs	r3, #64	; 0x40
 8008b48:	eba0 000a 	sub.w	r0, r0, sl
 8008b4c:	fa03 f000 	lsl.w	r0, r3, r0
 8008b50:	9b04      	ldr	r3, [sp, #16]
 8008b52:	4303      	orrs	r3, r0
 8008b54:	3401      	adds	r4, #1
 8008b56:	9304      	str	r3, [sp, #16]
 8008b58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b5c:	482c      	ldr	r0, [pc, #176]	; (8008c10 <_vfiprintf_r+0x250>)
 8008b5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b62:	2206      	movs	r2, #6
 8008b64:	f7f7 fb3c 	bl	80001e0 <memchr>
 8008b68:	2800      	cmp	r0, #0
 8008b6a:	d03f      	beq.n	8008bec <_vfiprintf_r+0x22c>
 8008b6c:	4b29      	ldr	r3, [pc, #164]	; (8008c14 <_vfiprintf_r+0x254>)
 8008b6e:	bb1b      	cbnz	r3, 8008bb8 <_vfiprintf_r+0x1f8>
 8008b70:	9b03      	ldr	r3, [sp, #12]
 8008b72:	3307      	adds	r3, #7
 8008b74:	f023 0307 	bic.w	r3, r3, #7
 8008b78:	3308      	adds	r3, #8
 8008b7a:	9303      	str	r3, [sp, #12]
 8008b7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b7e:	443b      	add	r3, r7
 8008b80:	9309      	str	r3, [sp, #36]	; 0x24
 8008b82:	e767      	b.n	8008a54 <_vfiprintf_r+0x94>
 8008b84:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b88:	460c      	mov	r4, r1
 8008b8a:	2001      	movs	r0, #1
 8008b8c:	e7a5      	b.n	8008ada <_vfiprintf_r+0x11a>
 8008b8e:	2300      	movs	r3, #0
 8008b90:	3401      	adds	r4, #1
 8008b92:	9305      	str	r3, [sp, #20]
 8008b94:	4619      	mov	r1, r3
 8008b96:	f04f 0c0a 	mov.w	ip, #10
 8008b9a:	4620      	mov	r0, r4
 8008b9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ba0:	3a30      	subs	r2, #48	; 0x30
 8008ba2:	2a09      	cmp	r2, #9
 8008ba4:	d903      	bls.n	8008bae <_vfiprintf_r+0x1ee>
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d0c5      	beq.n	8008b36 <_vfiprintf_r+0x176>
 8008baa:	9105      	str	r1, [sp, #20]
 8008bac:	e7c3      	b.n	8008b36 <_vfiprintf_r+0x176>
 8008bae:	fb0c 2101 	mla	r1, ip, r1, r2
 8008bb2:	4604      	mov	r4, r0
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	e7f0      	b.n	8008b9a <_vfiprintf_r+0x1da>
 8008bb8:	ab03      	add	r3, sp, #12
 8008bba:	9300      	str	r3, [sp, #0]
 8008bbc:	462a      	mov	r2, r5
 8008bbe:	4b16      	ldr	r3, [pc, #88]	; (8008c18 <_vfiprintf_r+0x258>)
 8008bc0:	a904      	add	r1, sp, #16
 8008bc2:	4630      	mov	r0, r6
 8008bc4:	f7fd fcce 	bl	8006564 <_printf_float>
 8008bc8:	4607      	mov	r7, r0
 8008bca:	1c78      	adds	r0, r7, #1
 8008bcc:	d1d6      	bne.n	8008b7c <_vfiprintf_r+0x1bc>
 8008bce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008bd0:	07d9      	lsls	r1, r3, #31
 8008bd2:	d405      	bmi.n	8008be0 <_vfiprintf_r+0x220>
 8008bd4:	89ab      	ldrh	r3, [r5, #12]
 8008bd6:	059a      	lsls	r2, r3, #22
 8008bd8:	d402      	bmi.n	8008be0 <_vfiprintf_r+0x220>
 8008bda:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008bdc:	f7ff fa12 	bl	8008004 <__retarget_lock_release_recursive>
 8008be0:	89ab      	ldrh	r3, [r5, #12]
 8008be2:	065b      	lsls	r3, r3, #25
 8008be4:	f53f af12 	bmi.w	8008a0c <_vfiprintf_r+0x4c>
 8008be8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008bea:	e711      	b.n	8008a10 <_vfiprintf_r+0x50>
 8008bec:	ab03      	add	r3, sp, #12
 8008bee:	9300      	str	r3, [sp, #0]
 8008bf0:	462a      	mov	r2, r5
 8008bf2:	4b09      	ldr	r3, [pc, #36]	; (8008c18 <_vfiprintf_r+0x258>)
 8008bf4:	a904      	add	r1, sp, #16
 8008bf6:	4630      	mov	r0, r6
 8008bf8:	f7fd ff58 	bl	8006aac <_printf_i>
 8008bfc:	e7e4      	b.n	8008bc8 <_vfiprintf_r+0x208>
 8008bfe:	bf00      	nop
 8008c00:	0801c858 	.word	0x0801c858
 8008c04:	0801c878 	.word	0x0801c878
 8008c08:	0801c838 	.word	0x0801c838
 8008c0c:	0801c9f4 	.word	0x0801c9f4
 8008c10:	0801c9fe 	.word	0x0801c9fe
 8008c14:	08006565 	.word	0x08006565
 8008c18:	0800899b 	.word	0x0800899b
 8008c1c:	0801c9fa 	.word	0x0801c9fa

08008c20 <_sbrk_r>:
 8008c20:	b538      	push	{r3, r4, r5, lr}
 8008c22:	4d06      	ldr	r5, [pc, #24]	; (8008c3c <_sbrk_r+0x1c>)
 8008c24:	2300      	movs	r3, #0
 8008c26:	4604      	mov	r4, r0
 8008c28:	4608      	mov	r0, r1
 8008c2a:	602b      	str	r3, [r5, #0]
 8008c2c:	f7f8 fe38 	bl	80018a0 <_sbrk>
 8008c30:	1c43      	adds	r3, r0, #1
 8008c32:	d102      	bne.n	8008c3a <_sbrk_r+0x1a>
 8008c34:	682b      	ldr	r3, [r5, #0]
 8008c36:	b103      	cbz	r3, 8008c3a <_sbrk_r+0x1a>
 8008c38:	6023      	str	r3, [r4, #0]
 8008c3a:	bd38      	pop	{r3, r4, r5, pc}
 8008c3c:	2000f3b8 	.word	0x2000f3b8

08008c40 <__sread>:
 8008c40:	b510      	push	{r4, lr}
 8008c42:	460c      	mov	r4, r1
 8008c44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c48:	f000 f8e2 	bl	8008e10 <_read_r>
 8008c4c:	2800      	cmp	r0, #0
 8008c4e:	bfab      	itete	ge
 8008c50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008c52:	89a3      	ldrhlt	r3, [r4, #12]
 8008c54:	181b      	addge	r3, r3, r0
 8008c56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008c5a:	bfac      	ite	ge
 8008c5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008c5e:	81a3      	strhlt	r3, [r4, #12]
 8008c60:	bd10      	pop	{r4, pc}

08008c62 <__swrite>:
 8008c62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c66:	461f      	mov	r7, r3
 8008c68:	898b      	ldrh	r3, [r1, #12]
 8008c6a:	05db      	lsls	r3, r3, #23
 8008c6c:	4605      	mov	r5, r0
 8008c6e:	460c      	mov	r4, r1
 8008c70:	4616      	mov	r6, r2
 8008c72:	d505      	bpl.n	8008c80 <__swrite+0x1e>
 8008c74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c78:	2302      	movs	r3, #2
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	f000 f898 	bl	8008db0 <_lseek_r>
 8008c80:	89a3      	ldrh	r3, [r4, #12]
 8008c82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c8a:	81a3      	strh	r3, [r4, #12]
 8008c8c:	4632      	mov	r2, r6
 8008c8e:	463b      	mov	r3, r7
 8008c90:	4628      	mov	r0, r5
 8008c92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c96:	f000 b817 	b.w	8008cc8 <_write_r>

08008c9a <__sseek>:
 8008c9a:	b510      	push	{r4, lr}
 8008c9c:	460c      	mov	r4, r1
 8008c9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ca2:	f000 f885 	bl	8008db0 <_lseek_r>
 8008ca6:	1c43      	adds	r3, r0, #1
 8008ca8:	89a3      	ldrh	r3, [r4, #12]
 8008caa:	bf15      	itete	ne
 8008cac:	6560      	strne	r0, [r4, #84]	; 0x54
 8008cae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008cb2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008cb6:	81a3      	strheq	r3, [r4, #12]
 8008cb8:	bf18      	it	ne
 8008cba:	81a3      	strhne	r3, [r4, #12]
 8008cbc:	bd10      	pop	{r4, pc}

08008cbe <__sclose>:
 8008cbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cc2:	f000 b831 	b.w	8008d28 <_close_r>
	...

08008cc8 <_write_r>:
 8008cc8:	b538      	push	{r3, r4, r5, lr}
 8008cca:	4d07      	ldr	r5, [pc, #28]	; (8008ce8 <_write_r+0x20>)
 8008ccc:	4604      	mov	r4, r0
 8008cce:	4608      	mov	r0, r1
 8008cd0:	4611      	mov	r1, r2
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	602a      	str	r2, [r5, #0]
 8008cd6:	461a      	mov	r2, r3
 8008cd8:	f7f8 fcfa 	bl	80016d0 <_write>
 8008cdc:	1c43      	adds	r3, r0, #1
 8008cde:	d102      	bne.n	8008ce6 <_write_r+0x1e>
 8008ce0:	682b      	ldr	r3, [r5, #0]
 8008ce2:	b103      	cbz	r3, 8008ce6 <_write_r+0x1e>
 8008ce4:	6023      	str	r3, [r4, #0]
 8008ce6:	bd38      	pop	{r3, r4, r5, pc}
 8008ce8:	2000f3b8 	.word	0x2000f3b8

08008cec <__assert_func>:
 8008cec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008cee:	4614      	mov	r4, r2
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	4b09      	ldr	r3, [pc, #36]	; (8008d18 <__assert_func+0x2c>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4605      	mov	r5, r0
 8008cf8:	68d8      	ldr	r0, [r3, #12]
 8008cfa:	b14c      	cbz	r4, 8008d10 <__assert_func+0x24>
 8008cfc:	4b07      	ldr	r3, [pc, #28]	; (8008d1c <__assert_func+0x30>)
 8008cfe:	9100      	str	r1, [sp, #0]
 8008d00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008d04:	4906      	ldr	r1, [pc, #24]	; (8008d20 <__assert_func+0x34>)
 8008d06:	462b      	mov	r3, r5
 8008d08:	f000 f81e 	bl	8008d48 <fiprintf>
 8008d0c:	f000 f89f 	bl	8008e4e <abort>
 8008d10:	4b04      	ldr	r3, [pc, #16]	; (8008d24 <__assert_func+0x38>)
 8008d12:	461c      	mov	r4, r3
 8008d14:	e7f3      	b.n	8008cfe <__assert_func+0x12>
 8008d16:	bf00      	nop
 8008d18:	20000010 	.word	0x20000010
 8008d1c:	0801ca05 	.word	0x0801ca05
 8008d20:	0801ca12 	.word	0x0801ca12
 8008d24:	0801ca40 	.word	0x0801ca40

08008d28 <_close_r>:
 8008d28:	b538      	push	{r3, r4, r5, lr}
 8008d2a:	4d06      	ldr	r5, [pc, #24]	; (8008d44 <_close_r+0x1c>)
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	4604      	mov	r4, r0
 8008d30:	4608      	mov	r0, r1
 8008d32:	602b      	str	r3, [r5, #0]
 8008d34:	f7f8 fd7f 	bl	8001836 <_close>
 8008d38:	1c43      	adds	r3, r0, #1
 8008d3a:	d102      	bne.n	8008d42 <_close_r+0x1a>
 8008d3c:	682b      	ldr	r3, [r5, #0]
 8008d3e:	b103      	cbz	r3, 8008d42 <_close_r+0x1a>
 8008d40:	6023      	str	r3, [r4, #0]
 8008d42:	bd38      	pop	{r3, r4, r5, pc}
 8008d44:	2000f3b8 	.word	0x2000f3b8

08008d48 <fiprintf>:
 8008d48:	b40e      	push	{r1, r2, r3}
 8008d4a:	b503      	push	{r0, r1, lr}
 8008d4c:	4601      	mov	r1, r0
 8008d4e:	ab03      	add	r3, sp, #12
 8008d50:	4805      	ldr	r0, [pc, #20]	; (8008d68 <fiprintf+0x20>)
 8008d52:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d56:	6800      	ldr	r0, [r0, #0]
 8008d58:	9301      	str	r3, [sp, #4]
 8008d5a:	f7ff fe31 	bl	80089c0 <_vfiprintf_r>
 8008d5e:	b002      	add	sp, #8
 8008d60:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d64:	b003      	add	sp, #12
 8008d66:	4770      	bx	lr
 8008d68:	20000010 	.word	0x20000010

08008d6c <_fstat_r>:
 8008d6c:	b538      	push	{r3, r4, r5, lr}
 8008d6e:	4d07      	ldr	r5, [pc, #28]	; (8008d8c <_fstat_r+0x20>)
 8008d70:	2300      	movs	r3, #0
 8008d72:	4604      	mov	r4, r0
 8008d74:	4608      	mov	r0, r1
 8008d76:	4611      	mov	r1, r2
 8008d78:	602b      	str	r3, [r5, #0]
 8008d7a:	f7f8 fd68 	bl	800184e <_fstat>
 8008d7e:	1c43      	adds	r3, r0, #1
 8008d80:	d102      	bne.n	8008d88 <_fstat_r+0x1c>
 8008d82:	682b      	ldr	r3, [r5, #0]
 8008d84:	b103      	cbz	r3, 8008d88 <_fstat_r+0x1c>
 8008d86:	6023      	str	r3, [r4, #0]
 8008d88:	bd38      	pop	{r3, r4, r5, pc}
 8008d8a:	bf00      	nop
 8008d8c:	2000f3b8 	.word	0x2000f3b8

08008d90 <_isatty_r>:
 8008d90:	b538      	push	{r3, r4, r5, lr}
 8008d92:	4d06      	ldr	r5, [pc, #24]	; (8008dac <_isatty_r+0x1c>)
 8008d94:	2300      	movs	r3, #0
 8008d96:	4604      	mov	r4, r0
 8008d98:	4608      	mov	r0, r1
 8008d9a:	602b      	str	r3, [r5, #0]
 8008d9c:	f7f8 fd67 	bl	800186e <_isatty>
 8008da0:	1c43      	adds	r3, r0, #1
 8008da2:	d102      	bne.n	8008daa <_isatty_r+0x1a>
 8008da4:	682b      	ldr	r3, [r5, #0]
 8008da6:	b103      	cbz	r3, 8008daa <_isatty_r+0x1a>
 8008da8:	6023      	str	r3, [r4, #0]
 8008daa:	bd38      	pop	{r3, r4, r5, pc}
 8008dac:	2000f3b8 	.word	0x2000f3b8

08008db0 <_lseek_r>:
 8008db0:	b538      	push	{r3, r4, r5, lr}
 8008db2:	4d07      	ldr	r5, [pc, #28]	; (8008dd0 <_lseek_r+0x20>)
 8008db4:	4604      	mov	r4, r0
 8008db6:	4608      	mov	r0, r1
 8008db8:	4611      	mov	r1, r2
 8008dba:	2200      	movs	r2, #0
 8008dbc:	602a      	str	r2, [r5, #0]
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	f7f8 fd60 	bl	8001884 <_lseek>
 8008dc4:	1c43      	adds	r3, r0, #1
 8008dc6:	d102      	bne.n	8008dce <_lseek_r+0x1e>
 8008dc8:	682b      	ldr	r3, [r5, #0]
 8008dca:	b103      	cbz	r3, 8008dce <_lseek_r+0x1e>
 8008dcc:	6023      	str	r3, [r4, #0]
 8008dce:	bd38      	pop	{r3, r4, r5, pc}
 8008dd0:	2000f3b8 	.word	0x2000f3b8

08008dd4 <__ascii_mbtowc>:
 8008dd4:	b082      	sub	sp, #8
 8008dd6:	b901      	cbnz	r1, 8008dda <__ascii_mbtowc+0x6>
 8008dd8:	a901      	add	r1, sp, #4
 8008dda:	b142      	cbz	r2, 8008dee <__ascii_mbtowc+0x1a>
 8008ddc:	b14b      	cbz	r3, 8008df2 <__ascii_mbtowc+0x1e>
 8008dde:	7813      	ldrb	r3, [r2, #0]
 8008de0:	600b      	str	r3, [r1, #0]
 8008de2:	7812      	ldrb	r2, [r2, #0]
 8008de4:	1e10      	subs	r0, r2, #0
 8008de6:	bf18      	it	ne
 8008de8:	2001      	movne	r0, #1
 8008dea:	b002      	add	sp, #8
 8008dec:	4770      	bx	lr
 8008dee:	4610      	mov	r0, r2
 8008df0:	e7fb      	b.n	8008dea <__ascii_mbtowc+0x16>
 8008df2:	f06f 0001 	mvn.w	r0, #1
 8008df6:	e7f8      	b.n	8008dea <__ascii_mbtowc+0x16>

08008df8 <__malloc_lock>:
 8008df8:	4801      	ldr	r0, [pc, #4]	; (8008e00 <__malloc_lock+0x8>)
 8008dfa:	f7ff b902 	b.w	8008002 <__retarget_lock_acquire_recursive>
 8008dfe:	bf00      	nop
 8008e00:	2000f3b0 	.word	0x2000f3b0

08008e04 <__malloc_unlock>:
 8008e04:	4801      	ldr	r0, [pc, #4]	; (8008e0c <__malloc_unlock+0x8>)
 8008e06:	f7ff b8fd 	b.w	8008004 <__retarget_lock_release_recursive>
 8008e0a:	bf00      	nop
 8008e0c:	2000f3b0 	.word	0x2000f3b0

08008e10 <_read_r>:
 8008e10:	b538      	push	{r3, r4, r5, lr}
 8008e12:	4d07      	ldr	r5, [pc, #28]	; (8008e30 <_read_r+0x20>)
 8008e14:	4604      	mov	r4, r0
 8008e16:	4608      	mov	r0, r1
 8008e18:	4611      	mov	r1, r2
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	602a      	str	r2, [r5, #0]
 8008e1e:	461a      	mov	r2, r3
 8008e20:	f7f8 fcec 	bl	80017fc <_read>
 8008e24:	1c43      	adds	r3, r0, #1
 8008e26:	d102      	bne.n	8008e2e <_read_r+0x1e>
 8008e28:	682b      	ldr	r3, [r5, #0]
 8008e2a:	b103      	cbz	r3, 8008e2e <_read_r+0x1e>
 8008e2c:	6023      	str	r3, [r4, #0]
 8008e2e:	bd38      	pop	{r3, r4, r5, pc}
 8008e30:	2000f3b8 	.word	0x2000f3b8

08008e34 <__ascii_wctomb>:
 8008e34:	b149      	cbz	r1, 8008e4a <__ascii_wctomb+0x16>
 8008e36:	2aff      	cmp	r2, #255	; 0xff
 8008e38:	bf85      	ittet	hi
 8008e3a:	238a      	movhi	r3, #138	; 0x8a
 8008e3c:	6003      	strhi	r3, [r0, #0]
 8008e3e:	700a      	strbls	r2, [r1, #0]
 8008e40:	f04f 30ff 	movhi.w	r0, #4294967295
 8008e44:	bf98      	it	ls
 8008e46:	2001      	movls	r0, #1
 8008e48:	4770      	bx	lr
 8008e4a:	4608      	mov	r0, r1
 8008e4c:	4770      	bx	lr

08008e4e <abort>:
 8008e4e:	b508      	push	{r3, lr}
 8008e50:	2006      	movs	r0, #6
 8008e52:	f000 f82b 	bl	8008eac <raise>
 8008e56:	2001      	movs	r0, #1
 8008e58:	f7f8 fcc6 	bl	80017e8 <_exit>

08008e5c <_raise_r>:
 8008e5c:	291f      	cmp	r1, #31
 8008e5e:	b538      	push	{r3, r4, r5, lr}
 8008e60:	4604      	mov	r4, r0
 8008e62:	460d      	mov	r5, r1
 8008e64:	d904      	bls.n	8008e70 <_raise_r+0x14>
 8008e66:	2316      	movs	r3, #22
 8008e68:	6003      	str	r3, [r0, #0]
 8008e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8008e6e:	bd38      	pop	{r3, r4, r5, pc}
 8008e70:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008e72:	b112      	cbz	r2, 8008e7a <_raise_r+0x1e>
 8008e74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008e78:	b94b      	cbnz	r3, 8008e8e <_raise_r+0x32>
 8008e7a:	4620      	mov	r0, r4
 8008e7c:	f000 f830 	bl	8008ee0 <_getpid_r>
 8008e80:	462a      	mov	r2, r5
 8008e82:	4601      	mov	r1, r0
 8008e84:	4620      	mov	r0, r4
 8008e86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e8a:	f000 b817 	b.w	8008ebc <_kill_r>
 8008e8e:	2b01      	cmp	r3, #1
 8008e90:	d00a      	beq.n	8008ea8 <_raise_r+0x4c>
 8008e92:	1c59      	adds	r1, r3, #1
 8008e94:	d103      	bne.n	8008e9e <_raise_r+0x42>
 8008e96:	2316      	movs	r3, #22
 8008e98:	6003      	str	r3, [r0, #0]
 8008e9a:	2001      	movs	r0, #1
 8008e9c:	e7e7      	b.n	8008e6e <_raise_r+0x12>
 8008e9e:	2400      	movs	r4, #0
 8008ea0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008ea4:	4628      	mov	r0, r5
 8008ea6:	4798      	blx	r3
 8008ea8:	2000      	movs	r0, #0
 8008eaa:	e7e0      	b.n	8008e6e <_raise_r+0x12>

08008eac <raise>:
 8008eac:	4b02      	ldr	r3, [pc, #8]	; (8008eb8 <raise+0xc>)
 8008eae:	4601      	mov	r1, r0
 8008eb0:	6818      	ldr	r0, [r3, #0]
 8008eb2:	f7ff bfd3 	b.w	8008e5c <_raise_r>
 8008eb6:	bf00      	nop
 8008eb8:	20000010 	.word	0x20000010

08008ebc <_kill_r>:
 8008ebc:	b538      	push	{r3, r4, r5, lr}
 8008ebe:	4d07      	ldr	r5, [pc, #28]	; (8008edc <_kill_r+0x20>)
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	4604      	mov	r4, r0
 8008ec4:	4608      	mov	r0, r1
 8008ec6:	4611      	mov	r1, r2
 8008ec8:	602b      	str	r3, [r5, #0]
 8008eca:	f7f8 fc7d 	bl	80017c8 <_kill>
 8008ece:	1c43      	adds	r3, r0, #1
 8008ed0:	d102      	bne.n	8008ed8 <_kill_r+0x1c>
 8008ed2:	682b      	ldr	r3, [r5, #0]
 8008ed4:	b103      	cbz	r3, 8008ed8 <_kill_r+0x1c>
 8008ed6:	6023      	str	r3, [r4, #0]
 8008ed8:	bd38      	pop	{r3, r4, r5, pc}
 8008eda:	bf00      	nop
 8008edc:	2000f3b8 	.word	0x2000f3b8

08008ee0 <_getpid_r>:
 8008ee0:	f7f8 bc6a 	b.w	80017b8 <_getpid>

08008ee4 <_init>:
 8008ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ee6:	bf00      	nop
 8008ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eea:	bc08      	pop	{r3}
 8008eec:	469e      	mov	lr, r3
 8008eee:	4770      	bx	lr

08008ef0 <_fini>:
 8008ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ef2:	bf00      	nop
 8008ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ef6:	bc08      	pop	{r3}
 8008ef8:	469e      	mov	lr, r3
 8008efa:	4770      	bx	lr
